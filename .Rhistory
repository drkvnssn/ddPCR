get.breakpoint.kmeans <- function(x,nClusters=2)
{ # use kmeans function
x <- as.numeric(x)
result <- NULL
breakpoint <- kmeans(x=x,centers=nClusters)$centers
if(dim(breakpoint)[1] == 2){result <- mean(breakpoint)}
return(result)
}
get.breakpoint.ranges <- function(x)
{ # use min/max function
x <- as.numeric(x)
result <- NULL
result <-  (max(x) - min(x))/2
return(result)
}
get.breakpoint.hist <- function(x)
{ # use hist function to determine locations with no droplets (middle?)
x <- as.numeric(x)
hist.data <- rbind(hist(x, breaks=15, plot=FALSE)$mids, hist(x, breaks=15, plot=FALSE)$counts)
hist.data <- hist.data[,-c(1:2,14:16)]
result <- mean(hist.data[1,hist.data[2,] == min(hist.data[2,])])
return(result)
}
get.ddpcr.breakpoints.kmeans <- function(x)
{ # use kmeans on x & y together, and set for finding 4 clusters
results <- kmeans(x[,1:2], 4)
return(results)
}
get.ddpcr.breakpoints <- function(x, algorithm = "hist")
{
if(tolower(algorithm) == "hist" | tolower(algorithm) == "histogram")
{
results <- c(breakpoint.ch1 = get.breakpoint.hist(x = x[,1]) ,breakpoint.ch2 = get.breakpoint.hist(x = x[,2]))
}
if(tolower(algorithm) == "ranges")
{
results <- c(breakpoint.ch1 = get.breakpoint.ranges(x = x[,1]) ,breakpoint.ch2 = get.breakpoint.ranges(x = x[,2]))
}
if(tolower(algorithm) == "kmeans")
{
results <- c(breakpoint.ch1 = get.breakpoint.kmeans(x = x[,1]) ,breakpoint.ch2 = get.breakpoint.kmeans(x = x[,2]))
}
return(results)
}
define.clusters <- function(x, breakpoints)
{
if (length(breakpoints) != 2) {
stop("breakpoints must have a length of 2.\n")
}
# - [x] find cluster notation BioRad
results <- rep(NA,dim(x)[1])
results[x[,1] < breakpoints[1] & x[,2] < breakpoints[2]] <- 1 # ch1-ch2- : cluster 1
results[x[,1] > breakpoints[1] & x[,2] < breakpoints[2]] <- 2 # ch1+ch2- : cluster 2
results[x[,1] > breakpoints[1] & x[,2] > breakpoints[2]] <- 3 # ch1+ch2+ : cluster 3
results[x[,1] < breakpoints[1] & x[,2] > breakpoints[2]] <- 4 # ch1-ch2+ : cluster 4
x[,3] <- results
return(x)
}
define.color <- function(x,density=40)
{
# - [x] find cluster notation BioRad
ddpcr.colors <- paste(c("#000000","#FF6600","#00CC00","#0033FF"), as.character(density), sep="")
x <- as.character(x)
x <- mgsub(pattern = c("1","3","4","2"),replacement = ddpcr.colors,x=x)
return(x)
}
dropletcount.clusters <- function(x)
{
results <- NULL
results <- list(clusters=c(cluster.1=sum(x == 1),cluster.2=sum(x == 2),cluster.3=sum(x == 3),cluster.4=sum(x == 4)))
results  <-paste("Ch1-Ch2-:",results$clusters[1],
"   Ch1+Ch2-:",results$clusters[2],
"   Ch1+Ch2+:",results$clusters[3],
"   Ch1-Ch2+:",results$clusters[4], sep="")
return(results)
}
get.max.channels <- function(x)
{
results <- c(Ch1.max = round(max(x[,1])+100) ,Ch2.max = round(max(x[,2])+100))
return(results)
}
plot.ddpcr <- function(x,dotres=0.7,main="ddPCR",pch=16,colors="ddpcr",density=60,breakpoints=NULL,max.xy=NULL,verbose=FALSE)
{
if(length(max.xy) != 2) {
xmax <- max(x[,2])
ymax <- max(x[,1])
} else {
xmax <- max.xy[2]
ymax <- max.xy[1]
}
col.vec <- define.color(x = x[,3],density = density)
plot(y=x[,1],x=x[,2], cex=dotres, col=col.vec, ylab="Ch1 Amplitude",xlab="Ch2 Amplitude", pch=pch, main=main,
xlim=c(0,xmax),ylim=c(0,ymax))
sub.text <- dropletcount.clusters(x=x[,3])
mtext(side = 3,text = sub.text, cex = 0.8)
if (length(breakpoints) != 2) {
if(verbose == TRUE){cat("No breakpoint data has been given. Data will not be plotted.")}
}else{
abline(h=breakpoints[1], col="red") # channel 1
abline(v=breakpoints[2], col="red") # channel 2
}
}
mean.cluster <- function(x,cluster=1)
{
}
ddpcr.analysis <- function(path,probe.path)
{
# - [x] start global analysis for experiment
exp.design <- read.design.file(path=path,pattern="design")
data.xy.max <-
combine.samples(path=path,files=exp.design$File) %>%
get.max.channels(.)
# - [x] analyze control files
control.data <-
exp.design[exp.design$Type == "pos" | exp.design$Type == "neg",2] %>%
combine.samples(path=path,files=.)
breakpoints <-
control.data %>%
get.ddpcr.breakpoints(., algorithm = "hist")
control.data %<>%
define.clusters(., breakpoints)
col.vec <-
control.data$Cluster %>%
define.color(., density=60)
# - [x] add probe data
# all.probe.data <- add.probe.data.v2(path = probe.path, name = exp.design[1,4], date = format(Sys.time(), "%Y-%m-%d"), breakpoints = breakpoints)
# - [x] get text for plotting
droplet.count <-
control.data$Cluster %>%
dropletcount.clusters(.)
# - [x] set file name control sample
control.name <- paste(strsplit(x = as.character(exp.design$File[1]),split = "_")[[1]][1],"_Controls",sep="")
output.file <- file.path(project.path, paste(control.name,".png",sep=""))
# - [x] create plot for control data
png(filename=output.file,width = 800,height = 800)
plot.ddpcr(x=control.data, main=control.name, max.xy=data.xy.max, breakpoints=breakpoints)
dev.off()
# - [x] retrieve sample files (all files)
sample.files <- exp.design[,2]
# - [ ] analyse sample files
for(i in 1:length(sample.files))
{
sample.data <-
read.table(file=file.path(path,sample.files[i]),header = TRUE,sep = ",") %>%
define.clusters(., breakpoints)
col.vec <-
sample.data$Cluster %>%
define.color(., density=60)
droplet.count <-
sample.data$Cluster %>%
dropletcount.clusters(.)
sample.name <- gsub(pattern = "_Amplitude.csv",replacement="",x=sample.files[i])
output.file <- file.path(project.path, paste(sample.name,".png",sep=""))
png(filename=output.file,width = 800,height = 800)
plot.ddpcr(x=sample.data, main=sample.name, max.xy = data.xy.max, breakpoints = breakpoints)
dev.off()
}
}
project.path <- "D:\\R SCRIPTS\\ddPCR analysis\\input.data\\E746_A750del"
path <- project.path
exp.design <- read.design.file(path=path,pattern="design")
data.xy.max <-
combine.samples(path=path,files=exp.design$File) %>%
get.max.channels(.)
# - [x] analyze control files
control.data <-
exp.design[exp.design$Type == "pos" | exp.design$Type == "neg",2] %>%
combine.samples(path=path,files=.)
breakpoints <-
control.data %>%
get.ddpcr.breakpoints(., algorithm = "hist")
control.data %<>%
define.clusters(., breakpoints)
col.vec <-
control.data$Cluster %>%
define.color(., density=60)
droplet.count <-
control.data$Cluster %>%
dropletcount.clusters(.)
head(control.data)
library(dplyr)
filter(data=control.data, Cluster=1)
filter(control.data, Cluster=1)
?filter
control.data <- data.table::control.data
control.data <- data.table(control.data)
control.data <- data.frame(control.data)
glipse(control.data)
glimpse(control.data)
filter(control.data, Cluster==1)
mean(control.data[,1])
mean(control.data[,2])
head(control.data)
tail(control.data)
?mutate
clusters.mean.sd <- function(x){
clusters <- c(mean(x[,1]), mean(x[,2]))
clusters <- rbind(sd(x[,1]), sd(x[x,2]))
names = list(c("cluster1","cluster2"),c("mean","sd","3*sd"))
return(clusters)
}
dim(control.data)
clusters.mean.sd(control.data)
x <- control.data
clusters <- c(mean(x[,1]), mean(x[,2]))
clusters
clusters <- rbind(sd(x[,1]), sd(x[x,2]))
clusters <- rbind(c(sd(x[,1]), sd(x[x,2])))
clusters <- rbind(c(sd(x[,1]), sd(x[,2])))
clusters
clusters <- c(mean(x[,1]), mean(x[,2]))
clusters <- rbind(clusters,c(sd(x[,1]), sd(x[,2])))
clusters
names(clusters) = list(c("mean","sd"),c("ch1","ch2"))
clusters
clusters <- c(mean(x[,1]), mean(x[,2]))
clusters <- rbind(clusters,c(sd(x[,1]), sd(x[,2])))
colnames(clusters)<- c("ch1","ch2")
rownames(clusters) <- c("mean","sd")
return(clusters)
clusters
plot(control.data)
clusters.mean.sd <- function(x){
clusters <- c(mean(x[,1]), mean(x[,2]))
clusters <- rbind(clusters,c(sd(x[,1]), sd(x[,2])))
colnames(clusters)<- c("ch1","ch2")
rownames(clusters) <- c("mean","sd")
return(clusters)
}
cluster.mean.sd <- function(x){
cluster <- c(mean(x[,1]), mean(x[,2]))
cluster <- rbind(cluster,c(sd(x[,1]), sd(x[,2])))
colnames(cluster)<- c("ch1","ch2")
rownames(cluster) <- c("mean","sd")
return(cluster)
}
x
tail(x)
head(control.data)
x <- control.data %>%
data.frame(.) %>%
filter(.,Cluster == cluster) %>%
cluster.mean.sd(.)
cluster=1
x <- control.data %>%
data.frame(.) %>%
filter(.,Cluster == cluster) %>%
cluster.mean.sd(.)
x
plot.ddpcr(control.data)
x
abline(h=x[1,1],v=x[1,2])
plot.ddpcr(control.data)
head(sample.data)
input.path <- "D:\\R SCRIPTS\\ddPCR analysis" # work
input.path <- "/Users/dirkvanessen/Desktop/ddPCR analysis" # home
folders <- c("archive","input.data","output.data","output.plot","scripts","scripts.log")
# FUNCTIONS
get_comments = function(filename){
is_assign = function(expr) as.character(expr) %in% c("<-", "<<-", "=", "assign")
is_function = function(expr) is.call(expr) && is_assign(expr[[1L]]) && is.call(expr[[3L]]) && expr[[3L]][[1L]] == quote(`function`)
src = parse(filename, keep.source = TRUE)
functions = Filter(is_function, src)
fun_names = as.character(lapply(functions, `[[`, 2L))
# - [x] extract all comments
r = setNames(lapply(attr(functions, "srcref"), grep, pattern = "^\\s*#", value = TRUE), fun_names)
# - [x] remove leading spaces and comment sign '#'
r = lapply(r, function(x) sub(pattern = "^\\s*#", replacement = "", x = x))
# - [x] keep only markdown checkboxes like " - [ ] " or " - [x] "
r = lapply(r, function(x) x[nchar(x) >= 7L & substr(x, 1L, 7L) %in% c(" - [ ] "," - [x] ")])
# - [x] return only non empty results
r[as.logical(sapply(r, length))]
}
make_doc = function(path = "R", files, package, dest){
if(!missing(package)) path = system.file(path, package=package)
stopifnot(file.exists(path))
if(missing(files)) files = list.files(path, pattern = "\\.R$")
if(!length(files)){
warning(paste0("No files to process in ",path,"."))
return(invisible())
}
if(!all(sapply(file.path(path, files), file.exists))) stop(paste0("Processing stopped as some files not exists: ", paste(files[!sapply(file.path(path, files), file.exists)], collapse=", "),"."))
r = setNames(lapply(file.path(path, files), get_comments), files)
r = r[as.logical(sapply(r, length))]
if(missing(dest)) return(r)
if(!file.exists(dirname(dest))) dir.create(dirname(dest), recursive=TRUE)
if(file.exists(dest)) file.rename(dest, paste0(dest,"_backup"))
invisible(lapply(names(r), function(filename){
cat(c("",paste("###", filename)), sep = "\n", file = dest, append = file.exists(dest))
lapply(names(r[[filename]]), function(funname){
cat(c("",paste("####", funname),""), sep = "\n", file = dest, append = TRUE)
cat(r[[filename]][[funname]], sep = "\n", file = dest, append = TRUE)
})
}))
if(file.exists(paste0(dest,"_backup"))) file.remove(paste0(dest,"_backup"))
invisible(dest)
}
create.folders <- function(path,folders){
if(!file.exists(path))
{
stop ("Input folder does not exist. \n")
}else
{
for(i in 1:length(folders))
{
if(!file.exists(file.path(path,as.character(folders[i]))))
{
dir.create(file.path(path,as.character(folders[i])))
}
}
}
}
set.paths <- function(path="", folders){
if(path == "" | class(path) == "numeric"){ stop
} else {
folders <- c("original",folders)
paths <- NULL
for(i in 1:length(folders))
{
if(i == 1)
{
paths <- list(file.path(path))
}
if(i > 1)
{
paths <- c(paths,file.path(path,as.character(folders[i])))
}
}
names(paths) <- as.character(folders)
return(paths)
}
}
# RUN FUNCTIONS
create.folders(path=input.path,folders=folders)
path <- set.paths(path=input.path, folders=folders)
log.file <- paste(format(Sys.time(), "%Y%m%d-%H%M"),"_script_checklist.md",sep="")
make_doc(path=path$scripts,dest = file.path(path$scripts.log,log.file))
# END
input.path <- "D:\\R SCRIPTS\\ddPCR analysis" # work
#input.path <- "/Users/dirkvanessen/Desktop/ddPCR analysis" # home
folders <- c("archive","input.data","output.data","output.plot","scripts","scripts.log")
# FUNCTIONS
get_comments = function(filename){
is_assign = function(expr) as.character(expr) %in% c("<-", "<<-", "=", "assign")
is_function = function(expr) is.call(expr) && is_assign(expr[[1L]]) && is.call(expr[[3L]]) && expr[[3L]][[1L]] == quote(`function`)
src = parse(filename, keep.source = TRUE)
functions = Filter(is_function, src)
fun_names = as.character(lapply(functions, `[[`, 2L))
# - [x] extract all comments
r = setNames(lapply(attr(functions, "srcref"), grep, pattern = "^\\s*#", value = TRUE), fun_names)
# - [x] remove leading spaces and comment sign '#'
r = lapply(r, function(x) sub(pattern = "^\\s*#", replacement = "", x = x))
# - [x] keep only markdown checkboxes like " - [ ] " or " - [x] "
r = lapply(r, function(x) x[nchar(x) >= 7L & substr(x, 1L, 7L) %in% c(" - [ ] "," - [x] ")])
# - [x] return only non empty results
r[as.logical(sapply(r, length))]
}
make_doc = function(path = "R", files, package, dest){
if(!missing(package)) path = system.file(path, package=package)
stopifnot(file.exists(path))
if(missing(files)) files = list.files(path, pattern = "\\.R$")
if(!length(files)){
warning(paste0("No files to process in ",path,"."))
return(invisible())
}
if(!all(sapply(file.path(path, files), file.exists))) stop(paste0("Processing stopped as some files not exists: ", paste(files[!sapply(file.path(path, files), file.exists)], collapse=", "),"."))
r = setNames(lapply(file.path(path, files), get_comments), files)
r = r[as.logical(sapply(r, length))]
if(missing(dest)) return(r)
if(!file.exists(dirname(dest))) dir.create(dirname(dest), recursive=TRUE)
if(file.exists(dest)) file.rename(dest, paste0(dest,"_backup"))
invisible(lapply(names(r), function(filename){
cat(c("",paste("###", filename)), sep = "\n", file = dest, append = file.exists(dest))
lapply(names(r[[filename]]), function(funname){
cat(c("",paste("####", funname),""), sep = "\n", file = dest, append = TRUE)
cat(r[[filename]][[funname]], sep = "\n", file = dest, append = TRUE)
})
}))
if(file.exists(paste0(dest,"_backup"))) file.remove(paste0(dest,"_backup"))
invisible(dest)
}
create.folders <- function(path,folders){
if(!file.exists(path))
{
stop ("Input folder does not exist. \n")
}else
{
for(i in 1:length(folders))
{
if(!file.exists(file.path(path,as.character(folders[i]))))
{
dir.create(file.path(path,as.character(folders[i])))
}
}
}
}
set.paths <- function(path="", folders){
if(path == "" | class(path) == "numeric"){ stop
} else {
folders <- c("original",folders)
paths <- NULL
for(i in 1:length(folders))
{
if(i == 1)
{
paths <- list(file.path(path))
}
if(i > 1)
{
paths <- c(paths,file.path(path,as.character(folders[i])))
}
}
names(paths) <- as.character(folders)
return(paths)
}
}
# RUN FUNCTIONS
create.folders(path=input.path,folders=folders)
path <- set.paths(path=input.path, folders=folders)
log.file <- paste(format(Sys.time(), "%Y%m%d-%H%M"),"_script_checklist.md",sep="")
make_doc(path=path$scripts,dest = file.path(path$scripts.log,log.file))
# END
input.path <- "D:\\R SCRIPTS\\ddPCR analysis" # work
#input.path <- "/Users/dirkvanessen/Desktop/ddPCR analysis" # home
folders <- c("archive","input.data","output.data","output.plot","scripts","scripts.log")
# FUNCTIONS
get_comments = function(filename){
is_assign = function(expr) as.character(expr) %in% c("<-", "<<-", "=", "assign")
is_function = function(expr) is.call(expr) && is_assign(expr[[1L]]) && is.call(expr[[3L]]) && expr[[3L]][[1L]] == quote(`function`)
src = parse(filename, keep.source = TRUE)
functions = Filter(is_function, src)
fun_names = as.character(lapply(functions, `[[`, 2L))
# - [x] extract all comments
r = setNames(lapply(attr(functions, "srcref"), grep, pattern = "^\\s*#", value = TRUE), fun_names)
# - [x] remove leading spaces and comment sign '#'
r = lapply(r, function(x) sub(pattern = "^\\s*#", replacement = "", x = x))
# - [x] keep only markdown checkboxes like " - [ ] " or " - [x] "
r = lapply(r, function(x) x[nchar(x) >= 7L & substr(x, 1L, 7L) %in% c(" - [ ] "," - [x] ")])
# - [x] return only non empty results
r[as.logical(sapply(r, length))]
}
make_doc = function(path = "R", files, package, dest){
if(!missing(package)) path = system.file(path, package=package)
stopifnot(file.exists(path))
if(missing(files)) files = list.files(path, pattern = "\\.R$")
if(!length(files)){
warning(paste0("No files to process in ",path,"."))
return(invisible())
}
if(!all(sapply(file.path(path, files), file.exists))) stop(paste0("Processing stopped as some files not exists: ", paste(files[!sapply(file.path(path, files), file.exists)], collapse=", "),"."))
r = setNames(lapply(file.path(path, files), get_comments), files)
r = r[as.logical(sapply(r, length))]
if(missing(dest)) return(r)
if(!file.exists(dirname(dest))) dir.create(dirname(dest), recursive=TRUE)
if(file.exists(dest)) file.rename(dest, paste0(dest,"_backup"))
invisible(lapply(names(r), function(filename){
cat(c("",paste("###", filename)), sep = "\n", file = dest, append = file.exists(dest))
lapply(names(r[[filename]]), function(funname){
cat(c("",paste("####", funname),""), sep = "\n", file = dest, append = TRUE)
cat(r[[filename]][[funname]], sep = "\n", file = dest, append = TRUE)
})
}))
if(file.exists(paste0(dest,"_backup"))) file.remove(paste0(dest,"_backup"))
invisible(dest)
}
create.folders <- function(path,folders){
if(!file.exists(path))
{
stop ("Input folder does not exist. \n")
}else
{
for(i in 1:length(folders))
{
if(!file.exists(file.path(path,as.character(folders[i]))))
{
dir.create(file.path(path,as.character(folders[i])))
}
}
}
}
set.paths <- function(path="", folders){
if(path == "" | class(path) == "numeric"){ stop
} else {
folders <- c("original",folders)
paths <- NULL
for(i in 1:length(folders))
{
if(i == 1)
{
paths <- list(file.path(path))
}
if(i > 1)
{
paths <- c(paths,file.path(path,as.character(folders[i])))
}
}
names(paths) <- as.character(folders)
return(paths)
}
}
# RUN FUNCTIONS
create.folders(path=input.path,folders=folders)
path <- set.paths(path=input.path, folders=folders)
log.file <- paste(format(Sys.time(), "%Y%m%d-%H%M"),"_script_checklist.md",sep="")
make_doc(path=path$scripts,dest = file.path(path$scripts.log,log.file))
# END
path
source(file.path(path$scripts,"ddPCR.R"))
ls
ls()
breakpoints
plot.cutoffs(breakpoints)
