dim(experiment.data)
experiment.data$Sample
experiment.data$Sample %in% control.data[[1]]
experiment.data$Sample %in% control.data[[2]]
control.data=list(pos=c("positive","pos control"),ntc=c("TE buffer","water"))
control.data
names(control.data)
results <- rep("sample",length(x))
experiment.data$Sample -> x
results <- rep("sample",length(x))
results
x <- tolower(x)
control.data <- tolower(control.data)
control.data
x <- tolower(x)
x
i=1
results[results %in% tolower(control.data[[i]])]
n
x %in% tolower(control.data[[i]])
x
control.data[[i]]
results[x %in% control.data[[i]]]
control.data[[i]]
control.data=list(pos=c("positive","pos control"),ntc=c("te buffer","water"))
control.data[[i]]
tolower(control.data[[i]])
results[x %in% tolower(control.data[[i]])]
x %in% tolower(control.data[[i]])
results[x %in% tolower(control.data[[i]])] <- names(control.data)[i]
for(i in 1:length(names(control.data)))
{
results[x %in% tolower(control.data[[i]])] <- names(control.data)[i]
}
results
get.controls <- function(x, control.data=list(pos=c("positive","pos control"),ntc=c("te buffer","water")))
{
results <- rep("sample",length(x))
x <- tolower(x)
for(i in 1:length(names(control.data)))
{
results[x %in% tolower(control.data[[i]])] <- names(control.data)[i]
}
}
get.controls(experiment.data$Sample, list(c(H1975),c(water)))
get.controls(experiment.data$Sample, list(c(D1975),c(water)))
get.controls(experiment.data$Sample, list(c(h1975),c(water)))
get.controls <- function(x, pos=c("positive","pos control"), ntc=c("te buffer","water"), neg="")
{
results <- rep("sample",length(x))
x <- tolower(x)
results[x %in% tolower(pos)] <- "pos"
results[x %in% tolower(ntc)] <- "ntc"
results[x %in% tolower(neg)] <- "neg"
}
get.controls(experiment.data$Sample, pos="h1975")
get.controls <- function(x, pos=c("positive","pos control"), ntc=c("te buffer","water"), neg="")
{
results <- rep("sample",length(x))
x <- tolower(x)
results[x %in% tolower(pos)] <- "pos"
results[x %in% tolower(ntc)] <- "ntc"
results[x %in% tolower(neg)] <- "neg"
return(results)
}
get.controls(experiment.data$Sample, pos="h1975")
experiment.data$Sample
head(experiment.data)
get.experiments <- function(path)
{
file <- list.files(path, pattern = "Error.log",full.names = TRUE)
file <- gsub(pattern = "Error.log", replacement = "",x = file)
experiment.name <- basename(file)
file <- paste(file,".csv", sep="")
if(file.exists(file) == TRUE)
{
data <-  read.table(file = file,header = TRUE, sep=",",row.names = NULL)
} else { break
}
targets <- unique(gsub(pattern = " wt", replacement = "", x=data$Target))
targets <- gsub(pattern = " ", replacement = "_", x=targets)
grep(data$Target,pattern = targets[i])
result <- list()
for(i in 1:length(targets))
{
result[[i]] <- data[grep(data$Target,pattern = targets[i]),]
}
names(result) <- targets
return(result)
}
input.path <- "D:\\R SCRIPTS\\ddPCR analysis\\input.data\\20151202 EGFR spike-in sm_2015-12-02-15-25"
get.experiments(path=input.path)
get.experiments <- function(path)
{
file <- list.files(path, pattern = "Error.log",full.names = TRUE)
file <- gsub(pattern = "Error.log", replacement = "",x = file)
experiment.name <- basename(file)
file <- paste(file,".csv", sep="")
if(file.exists(file) == TRUE)
{
data <-  read.table(file = file,header = TRUE, sep=",",row.names = NULL)
} else { break
}
targets <- unique(gsub(pattern = " wt", replacement = "", x=data$Target))
targets <- gsub(pattern = " ", replacement = "_", x=targets)
result <- list()
for(i in 1:length(targets))
{
result[[i]] <- data[grep(data$Target,pattern = targets[i]),]
}
names(result) <- targets
return(result)
}
get.experiments(path=input.path)
get.experiments <- function(path)
{
file <- list.files(path, pattern = "Error.log",full.names = TRUE)
file <- gsub(pattern = "Error.log", replacement = "",x = file)
experiment.name <- basename(file)
file <- paste(file,".csv", sep="")
if(file.exists(file) == TRUE)
{
data <-  read.table(file = file,header = TRUE, sep=",",row.names = NULL)
} else { break
}
targets <- unique(gsub(pattern = " wt", replacement = "", x=data$Target))
result <- list()
for(i in 1:length(targets))
{
result[[i]] <- data[grep(data$Target,pattern = targets[i]),]
}
targets <- gsub(pattern = " ", replacement = "_", x=targets)
names(result) <- targets
return(result)
}
get.experiments(path=input.path)
test <- get.experiments(path=input.path)
class(test)
names(test)
path=NULL
class(path)
file.path(input.path,names(test))
create.experiment.folders <- function(x, path=NULL)
{
if(class(test) == "list" & class(path) != "NULL")
{
paths <- file.path(path,names(test))
if(!file.exists(paths))
{
dir.create(paths)
}
}
return(paths)
}
create.experiment.folders(x = test, path=input.path)
create.experiment.folders <- function(x, path=NULL)
{
if(class(test) == "list" & class(path) != "NULL")
{
paths <- file.path(path,names(test))
for(i in 1:length(paths))
{
if(!file.exists(paths[i]))
{
dir.create(paths[i])
}
}
}
return(paths)
}
create.experiment.folders(x = test, path=input.path)
test$EGFR_L858R
x <- test$EGFR_L858R
x
col.names <- c("Positives","Negatives","Ch1+Ch2+","Ch1+Ch2-","Ch1-Ch2+","Ch1-Ch2-","AcceptedDroplets")
results <- matrix(0, nrow=2,ncol=length(col.names),dimnames = list(NULL,col.names))
results[1,colnames(results) == "Positives"] <- droplet.count(x, c(2,3)) #Positives
droplet.count <- function(x,cluster=1)
{
result <- sum(x$Cluster %in% cluster)
return(result)
}
results[1,colnames(results) == "Positives"] <- droplet.count(x, c(2,3)) #Positives
results[2,colnames(results) == "Positives"] <- droplet.count(x, c(3,4)) #Positives
results[1,colnames(results) == "Negatives"] <- droplet.count(x, c(1,4))# Negatives
results[2,colnames(results) == "Negatives"] <- droplet.count(x, c(1,2)) # Negatives
results[1:2,colnames(results) == "Ch1+Ch2+"] <- droplet.count(x, 3)
results[1:2,colnames(results) == "Ch1+Ch2-"] <- droplet.count(x, 2)
results[1:2,colnames(results) == "Ch1-Ch2+"] <- droplet.count(x, 4)
results[1:2,colnames(results) == "Ch1-Ch2-"] <- droplet.count(x, 1)
results[1:2,colnames(results) == "AcceptedDroplets"]<- droplet.count(x, c(1,2,3,4)) #AcceptedDroplets
results
x[,1:10]
droplet.count(x, c(2,3))
ls()
library(RISmed)
library(ggplot2)
RISmed
ls(package:RISmed)
Author
Author(object = "van Essen HF")
EUtilsGet(Author(object = "van Essen HF"))
EUtilsGet(Author(object = "van Essen"))
Author
setInterOpFolder <- function(folder){
if (missing(folder)) {
if (length(find.package("InterOpMetrics",quiet=TRUE))==0) {
stop("Please enter a valid path to an InterOp folder.")
} else {
interopDir <<- normalizePath(paste(find.package("InterOpMetrics"),"extdata",sep="/"))
print(paste("interopDir has been set to sample directory:",interopDir))
}
} else {
interopDir <<- normalizePath(folder) # assign global variable
}
}
loadQualityMetrics <- function(){
# 98s for original. 55s for new version
# Load quality metrics
# Output: data frame called "qualityMetrics"
# Fields: Lane Tile Cycle NumQ01 NumQ02 ... NumQ50
# Contains quality score distribution
# Format:
# byte 0: file version number (4)
# byte 1: length of each record
# bytes (N * 206 + 2)  - (N *206 + 207): record:
# 2 bytes: lane number (uint16)
# 2 bytes: tile number (uint16)
# 2 bytes: cycle number (uint16)
# 4 x 50 bytes: number of clusters assigned score (uint32) Q1 through Q50
# Where N is the record index
# Developer notes: Assumes the QMetricsOut.bin file is present. Perform checks upstream.
if (!exists("interopDir")) { stop("The InterOp directory is undefined. Please run setInterOpFolder('path/to/InterOp/folder') to define it.") }
emConn <- file(paste(interopDir,"QMetricsOut.bin",sep='/'), "rb")
file_size <- file.info(paste(interopDir,"QMetricsOut.bin",sep='/'))$size
if (file_size < 3) {
print("QMetricsOut.bin appears to be empty.")
return()
}
file_version <- readBin(emConn,integer(),1,size=1,signed=FALSE)
record_size <- readBin(emConn,integer(),1,size=1,signed=FALSE)
number_records <- (file_size - 2) / record_size
dataRow <- c()
dataTracker <- list()
savedLines <- 0
i = 1
while (i <= number_records)
{
dataRow <- c(readBin(emConn,integer(),n=3,size=2,signed=FALSE),readBin(emConn,integer(),size=4,n=50))
dataTracker[[i - savedLines]] <- dataRow
if (i %% 10000 == 0) {
if (savedLines == 0) { qualityMetrics <- as.data.frame(do.call(rbind,dataTracker),stringsAsFactors=FALSE) }
else { qualityMetrics <- rbind(qualityMetrics,as.data.frame(do.call(rbind,dataTracker),stringsAsFactors=FALSE)) }
dataTracker <- list()
savedLines <- savedLines + 10000
}
i <- i + 1
}
close(emConn)
if (savedLines == 0) { qualityMetrics <- as.data.frame(do.call(rbind,dataTracker),stringsAsFactors=FALSE) }
else { qualityMetrics <- rbind(qualityMetrics,as.data.frame(do.call(rbind,dataTracker),stringsAsFactors=FALSE))  }
qnames <- c()
for (i in 1:9) { qnames <- c(qnames,paste("Q0",i,sep='')) }
for (i in 10:50) { qnames <- c(qnames,paste("Q",i,sep='')) }
qnames <- c("Lane","Tile","Cycle",qnames)
names(qualityMetrics) <- qnames
return(qualityMetrics)
}
### ADD QUALITY METRIC DATA AND GET SUM PER CYCLE
qm.sum.cycle <- function(qm.data){
q30.data <- apply(qm.data[,4:53], FUN=as.numeric,MARGIN=2)
cycles <- unique(qm.data[,3])
cycle.data <- NULL
for(i in 1:length(cycles)){
cycle.vec <- qm.data[,3] == cycles[i]
sum.per.cycle <- apply(X = q30.data[cycle.vec,],MARGIN = 2,FUN = sum)
cycle.data <- rbind(cycle.data,sum.per.cycle)
}
return(cycle.data)
}
qm.sum.heatmap <- function(q30.data.sum,run.id=""){
cycles <- dim(q30.data.sum)[1]
new.order     <- order(q30.data.sum,decreasing = TRUE)
cycle.values  <- matrix(rep(c(1:cycles),50),nrow = cycles,ncol = 50,byrow = FALSE)
cycle.values  <- cycle.values[new.order]
q30.values    <- matrix(rep(c(1:50),cycles),nrow = cycles,ncol = 50,byrow = TRUE)
q30.values    <- q30.values[new.order]
white.vec     <- q30.data.sum != 0
white.vec     <- white.vec[new.order]
col.vec       <- terrain.colors(length(new.order[white.vec]))
if(length(cycle.values[white.vec] > 0)){
plot(x = cycle.values[white.vec],y = q30.values[white.vec],col=col.vec,pch=15,cex=1, ylim=c(0,50), ylab="Q-scores",xlab="cycles",main=run.id)
}
}
qm.cumsum.per.cycle <- function(q30.data.sum,run.id=""){
q.sum <- apply(X=q30.data.sum,MARGIN = 2,FUN = sum)
plot(q.sum/1000000,type="b",cex=0.5,pch=19,xlab="Q-scores",ylab="Cumulative sum clusters (M)",main=run.id)
}
qm.sum.stacked.barplot <- function(q30.data.sum,run.id="",step=10){
cycle.max <- apply(X = q30.data.sum,MARGIN = 1,FUN = sum)
plot("","",xlim=c(0,dim(q30.data.sum)[1]),ylim=c(0,max(cycle.max))/1000000,ylab="Q-score clusters (M)",xlab="Cycles",main=run.id)
windows <- seq(from=50,to=step,by=-step)
colors <- terrain.colors(length(windows))
width <- 1
for(i in 1:dim(q30.data.sum)[1]){
for(z in 1:length(windows)){
rect(xleft=i-width,xright=i+width,ytop = sum(q30.data.sum[i,1:windows[z]])/1000000,ybottom = 0,col=colors[z],border = NA)
}
step.text <- paste("Q-score steps:",step)
mtext(step.text,cex=0.5)
}
}
### CREATE ALL THE PLOTS IN ONE FILE
q30.qc.plots <- function(output.path)
{
miseq.run.folder <- choose.dir()
run.id <- basename(miseq.run.folder)
miseq.interop <- file.path(miseq.run.folder,"interop")
setInterOpFolder(miseq.interop)
interop.files   	<- list.files(miseq.interop,pattern="MetricsOut.bin")
if ("QMetricsOut.bin" %in% interop.files)
{
qualityMetrics   <- loadQualityMetrics()
qualityMetrics.sum <- qm.sum.cycle(qualityMetrics)
output.file   <- file.path(output.path,paste(run.id,"_QC_Plots.png",sep=""))
png(output.file,bg="white",width=2000,height=3000,units="px",res=300)
layout(matrix(c(1,2,3),3,1,byrow=TRUE))
qm.cumsum.per.cycle(qualityMetrics.sum,run.id=run.id)
qm.sum.heatmap(qualityMetrics.sum,run.id=run.id)
qm.sum.stacked.barplot(qualityMetrics.sum,run.id=run.id,step=10)
dev.off()
}
}
#### END OF ALL FUNCTIONS
q30.qc.plots(output.path="C:\\Documents and Settings\\h.vanessen\\Bureaublad\\MiSeq Status\\MiSeq performance plots")
q30.qc.plots(output.path="C:\\Documents and Settings\\h.vanessen\\Bureaublad")
ls()
input.path <- "D:\\R SCRIPTS\\ddPCR analysis" # work
#input.path <- "/Users/dirkvanessen/Desktop/ddPCR analysis" # home
folders <- c("archive","input.data","output.data","output.plot","scripts","scripts.log")
# FUNCTIONS
computer.name <- as.character(Sys.info()["nodename"])
if(computer.name == "PA-PC807")
{
source("C:\\Documents and Settings\\h.vanessen\\ownCloud\\R_my_functions\\_R_my_functions.R")
}
if(computer.name == "iMAC")
{
source("/ownCloud/R_my_functions/_R_my_functions.R")
}
create.folders(path=input.path,folders=folders)
path <- set.paths(path=input.path, folders=folders)
log.file <- paste(format(Sys.time(), "%Y%m%d-%H%M"),"_script_checklist.md",sep="")
make_doc(path=path$scripts,dest = file.path(path$scripts.log,log.file))
# END
create.folders(path=input.path,folders=folders)
path <- set.paths(path=input.path, folders=folders)
log.file <- paste(format(Sys.time(), "%Y%m%d-%H%M"),"_script_checklist.md",sep="")
make_doc(path=path$scripts,dest = file.path(path$scripts.log,log.file))
# END
source(file.path(path$scripts,"ddPCR.R"))
paths
path
ls()
input.path <- "D:\\R SCRIPTS\\ddPCR analysis\\input.data\\20151202 EGFR spike-in sm_2015-12-02-15-25"
get.experiments(path = input.path)
experiments <- get.experiments(path = input.path)
create.experiment.folders(x = experiments, path = input.path)
create.experiment.folders <- function(x, path=NULL)
{
if(class(x) == "list" & class(path) != "NULL")
{
paths <- file.path(path,names(x))
for(i in 1:length(paths))
{
if(!file.exists(paths[i]))
{
dir.create(paths[i])
}
}
}
return(paths)
}
create.experiment.folders(x = experiments, path = input.path)
output.paths <- create.experiment.folders(x = experiments, path = input.path)
experiment.paths <- create.experiment.folders(x = experiments, path = input.path)
experiment.paths
get.controls <- function(x, pos=c("positive","pos control"), ntc=c("te buffer","water"), neg="")
{
results <- rep("sample",length(x))
x <- tolower(x)
results[x %in% tolower(pos)] <- "pos"
results[x %in% tolower(ntc)] <- "ntc"
results[x %in% tolower(neg)] <- "neg"
return(results)
}
experiment <- basename(input.path)
experiment
get.targets <- function(path)
{
file <- list.files(path, pattern = "Error.log",full.names = TRUE)
file <- gsub(pattern = "Error.log", replacement = "",x = file)
experiment.name <- basename(file)
file <- paste(file,".csv", sep="")
if(file.exists(file) == TRUE)
{
data <-  read.table(file = file,header = TRUE, sep=",",row.names = NULL)
} else { break
}
targets <- unique(gsub(pattern = " wt", replacement = "", x=data$Target))
result <- list()
for(i in 1:length(targets))
{
result[[i]] <- data[grep(data$Target,pattern = targets[i]),]
}
targets <- gsub(pattern = " ", replacement = "_", x=targets)
names(result) <- targets
return(result)
}
create.target.folders <- function(x, path=NULL)
{
if(class(x) == "list" & class(path) != "NULL")
{
paths <- file.path(path,names(x))
for(i in 1:length(paths))
{
if(!file.exists(paths[i]))
{
dir.create(paths[i])
}
}
}
return(paths)
}
get.controls <- function(x, pos=c("positive","pos control"), ntc=c("te buffer","water"), neg="")
{ # x = vector of sample names is input
results <- rep("sample",length(x))
x <- tolower(x)
results[x %in% tolower(pos)] <- "pos"
results[x %in% tolower(ntc)] <- "ntc"
results[x %in% tolower(neg)] <- "neg"
return(results)
}
targets
targets <- get.targets(path = input.path)
path.targets <- create.target.folders(x = experiments, path = input.path)
targets
data.targets <- get.targets(path = input.path)
path.targets <- create.target.folders(x = data.targets, path = input.path)
length(data.targets)
names(data.targets)
grep(pattern = "L858R",x = targets,ignore.case = TRUE)
targets <- names(data.targets)
targets
grep(pattern = "L858R",x = targets,ignore.case = TRUE)
grep(pattern = "L88R",x = targets,ignore.case = TRUE)
grep(pattern = "H1975",x = targets,ignore.case = TRUE)
grep(pattern = "H1975",x = targets,ignore.case = TRUE)
targets
grep(pattern = "T790M",x = targets,ignore.case = TRUE)
length(grep(pattern = "H1975",x = targets,ignore.case = TRUE))
i=1
get.controls(x = data.targets[[i]]$Sample,pos = "H1975")
sample.type <- get.controls(x = data.targets[[i]]$Sample,pos = "H1975")
data.targets[[1]][1:10, 1:10]
get.filenems <- list.files(input.path,pattern = data.targets[[i]]$Well)
get.filenems <- list.files(input.path,pattern = "Amplitude")
filenames <- list.files(input.path,pattern = "Amplitude")
filenames
filenames <- unique(data.targets[[i]]$Well)
filenames
filenames <- paste(input.path,"_",filenames,"_Amplitude.csv",sep="")
filenames
filenames <- paste(experiment,"_",filenames,"_Amplitude.csv",sep="")
filenames
filenames <- unique(data.targets[[i]]$Well)
filenames <- paste(experiment,"_",filenames,"_Amplitude.csv",sep="")
filenames
ppath.targets
path.targets
data.xy.max <-
combine.samples(path=input.path,files=filenames) %>%
get.max.channels(.)
filenames
filenames <- unique(data.targets[[i]]$Well)
filenames
input.path
experiment
data.targets
experiment <- basename(input.path)
experiment
experiment  <- list.files(path, pattern = "Error.log",full.names = TRUE)
experiment <- gsub(pattern = "Error.log", replacement = "",x = experiment)
experiment  <- list.files(input.path, pattern = "Error.log",full.names = TRUE)
experiment <- gsub(pattern = "Error.log", replacement = "",x = experiment)
experiment
experiment  <- list.files(input.path, pattern = "Error.log",full.names = FALSE)
experiment <- gsub(pattern = "Error.log", replacement = "",x = experiment)
experiment
filenames <- unique(data.targets[[i]]$Well)
filenames <- paste(experiment,"_",filenames,"_Amplitude.csv",sep="")
filenames
data.xy.max <-
combine.samples(path=input.path,files=filenames) %>%
get.max.channels(.)
i=2
sample.type <- get.controls(x = data.targets[[i]]$Sample,pos = "H1975")
filenames <- unique(data.targets[[i]]$Well)
filenames <- paste(experiment,"_",filenames,"_Amplitude.csv",sep="")
data.xy.max <-
combine.samples(path=input.path,files=filenames) %>%
get.max.channels(.)
