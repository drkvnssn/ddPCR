cat("\n")
}
}
overview <- function(data){
if((class(data)[1] == "ddPCRdata") != TRUE){
stop ("data structure is not in the correct format.\n")
}
probes <- unique(data@phenoData$sampleData['probe', ])
nSamples <- ncol(data@phenoData$sampleData)
cat("ddPCR structure has", nSamples, "samples with", length(probes), "probe(s).\n\n")
for (i in 1:length(probes)){
selection <- data@phenoData$sampleData['probe', ] %in% probes[i]
message("Probe ",i, ": ")
cat(probes[i], "\n", sep ="")
rownames <- c(1:nSamples)[selection]
samples <- data@phenoData$sampleData['name', selection ]
wells <- data@phenoData$sampleData['well', selection ]
threshold.ch1 <- round(data@phenoData$ch1['threshold', selection])
threshold.ch2 <- round(data@phenoData$ch2['threshold', selection])
minOutlier.ch1 <- round(data@phenoData$ch1['minOutlier', selection])
minOutlier.ch2 <- round(data@phenoData$ch2['minOutlier', selection])
results <- matrix(NA, nrow = length(samples), ncol = 6,
dimnames = list(rownames,c("Name", "Well",
"Threshold.ch1",
"Threshold.ch2",
"minOutlier.ch1",
"minOutlier.ch2")))
results[,'Name'] <- samples
results[,'Well'] <- wells
results[,'Threshold.ch1'] <- threshold.ch1
results[,'Threshold.ch2'] <- threshold.ch2
results[,'minOutlier.ch1'] <- minOutlier.ch1
results[,'minOutlier.ch2'] <- minOutlier.ch2
results <- data.frame(results)
print(results)
cat("\n")
}
}
overview(data = data)
overview <- function(data){
if((class(data)[1] == "ddPCRdata") != TRUE){
stop ("data structure is not in the correct format.\n")
}
probes <- unique(data@phenoData$sampleData['probe', ])
nSamples <- ncol(data@phenoData$sampleData)
cat("ddPCR structure has", nSamples, "samples with", length(probes), "probe(s).\n\n")
for (i in 1:length(probes)){
selection <- data@phenoData$sampleData['probe', ] %in% probes[i]
message("Probe ",i, ": ") ; cat(probes[i], "\n", sep ="")
rownames <- c(1:nSamples)[selection]
samples <- data@phenoData$sampleData['name', selection ]
wells <- data@phenoData$sampleData['well', selection ]
threshold.ch1 <- round(data@phenoData$ch1['threshold', selection])
threshold.ch2 <- round(data@phenoData$ch2['threshold', selection])
minOutlier.ch1 <- round(data@phenoData$ch1['minOutlier', selection])
minOutlier.ch2 <- round(data@phenoData$ch2['minOutlier', selection])
results <- matrix(NA, nrow = length(samples), ncol = 6,
dimnames = list(rownames,c("Name", "Well",
"Threshold.ch1",
"Threshold.ch2",
"minOutlier.ch1",
"minOutlier.ch2")))
results[,'Name'] <- samples
results[,'Well'] <- wells
results[,'Threshold.ch1'] <- threshold.ch1
results[,'Threshold.ch2'] <- threshold.ch2
results[,'minOutlier.ch1'] <- minOutlier.ch1
results[,'minOutlier.ch2'] <- minOutlier.ch2
results <- data.frame(results)
print(results)
cat("\n")
}
}
overview(data = data)
overview <- function(data){
if((class(data)[1] == "ddPCRdata") != TRUE){
stop ("data structure is not in the correct format.\n")
}
probes <- unique(data@phenoData$sampleData['probe', ])
nSamples <- ncol(data@phenoData$sampleData)
cat("ddPCR structure has", nSamples, "samples with", length(probes), "probe(s).\n\n")
for (i in 1:length(probes)){
selection <- data@phenoData$sampleData['probe', ] %in% probes[i]
message("Probe ",i, ": ") ; cat(probes[i], "\n\n", sep ="")
rownames <- c(1:nSamples)[selection]
samples <- data@phenoData$sampleData['name', selection ]
wells <- data@phenoData$sampleData['well', selection ]
threshold.ch1 <- round(data@phenoData$ch1['threshold', selection])
threshold.ch2 <- round(data@phenoData$ch2['threshold', selection])
minOutlier.ch1 <- round(data@phenoData$ch1['minOutlier', selection])
minOutlier.ch2 <- round(data@phenoData$ch2['minOutlier', selection])
results <- matrix(NA, nrow = length(samples), ncol = 6,
dimnames = list(rownames,c("Name", "Well",
"Threshold.ch1",
"Threshold.ch2",
"minOutlier.ch1",
"minOutlier.ch2")))
results[,'Name'] <- samples
results[,'Well'] <- wells
results[,'Threshold.ch1'] <- threshold.ch1
results[,'Threshold.ch2'] <- threshold.ch2
results[,'minOutlier.ch1'] <- minOutlier.ch1
results[,'minOutlier.ch2'] <- minOutlier.ch2
results <- data.frame(results)
print(results)
cat("\n")
}
}
overview(data = data)
library(outliers)
plot.ddPCR(data, well =10)
plot.ddPCR(data, well =4)
?outliers
?outlier
i
i=4
x <- data@assayData$Ch1.Amplitude[ ,i]
y <- data@assayData$Ch2.Amplitude[ ,i]
outlier(x)
min(x)
min(x, na.rm = TRUE)
min(y, na.rm = TRUE)
outlier(y)
test <- outlier(x)
test
min(x)
min(x, na.rm = TRUE)
i=10
plot.ddPCR(data, well =10)
x <- data@assayData$Ch1.Amplitude[ ,i]
outlier(x)
outlier(x[x<2000,])
outlier(x[x<2000 == TRUE,])
outlier(x[x < 2000 == TRUE,])
x[x < 2000]
outlierx[x < 2000])
outlier(x[x < 2000])
mean(x)
hist.data <- hist(x, breaks=breaks.ch1, plot=FALSE)
x <- data@assayData$Ch1.Amplitude[ ,i]
x <- x[!(x %in% NA)]
strict <- TRUE
breaks <- 250
if(strict == TRUE){
breaks.ch1 <- .makeBreaks(min = min(x), max = max(x), breaks = breaks)
} else {
breaks.ch1 <- breaks
}
hist.data <- hist(x, breaks=breaks.ch1, plot=FALSE)
firstBigClusterCh1 <- grep(pattern = max(hist.data$counts), x = hist.data$counts)
firstBigClusterCh1
hist.data
x <- cbind(data@assayData$Ch1.Amplitude,data@assayData$Ch2.Amplitude)
head(x)
tail(x)
x <- cbind(data@assayData$Ch1.Amplitude[,i],data@assayData$Ch2.Amplitude[,i])
head(x)
x <- cbind(channel.1 = ch1, channel.2 = ch2)
x <- cbind(data@assayData$Ch1.Amplitude[,i],data@assayData$Ch2.Amplitude[,i])
head(x)
tail(x)
x <- x[!(x[,1] %in% NA),]
tail(x)
if(strict == TRUE){
breaks <- .makeBreaks(min = min(x), max = max(x), breaks = breaks)
}
hist.data <- hist(x, breaks = breaks, plot = FALSE)
x <- hist.data$counts
result <- NULL
for(i in length(x):)){
if(x[i+1] > x[i+2] & x[i+2] > x[i+3] &
x[i+3] <= x[i+4]
) {
result <- c(result, i+3)
}
}
for(i in length(x):)){
if(x[i+1] > x[i+2] & x[i+2] > x[i+3] &
x[i+3] <= x[i+4]
) {
result <- c(result, i+3)
}
result
for(i in length(x):1)){
if(x[i+1] > x[i+2] & x[i+2] > x[i+3] &
x[i+3] <= x[i+4]
) {
result <- c(result, i+3)
}
}
length(x):1
hist.data <- hist(x, breaks = breaks, plot = FALSE)
x <- hist.data$counts
result <- NULL
for(i in length(x):1)){
if(x[i-1] < x[i-2] & x[i-2] < x[i-3] &
x[i-3] >= x[i-4]
) {
result <- c(result, i-3)
}
}
for(i in (length(x)):1)){
if(x[i-1] < x[i-2] & x[i-2] < x[i-3] &
x[i-3] >= x[i-4]
) {
result <- c(result, i-3)
}
}
x <- hist.data$counts
result <- NULL
for(i in (length(x)):1)){
if(x[i-1] < x[i-2] & x[i-2] < x[i-3] &
x[i-3] >= x[i-4]) {
result <- c(result, i-3)
}
}
x <- hist.data$counts
x
length(x)
i in (length(x)):1)
(length(x)):1
for(i in length(x)):1){
if(x[i-1] < x[i-2] & x[i-2] < x[i-3] &
x[i-3] >= x[i-4]) {
result <- c(result, i-3)
}
}
for(i in length(x):1){
if(x[i-1] < x[i-2] & x[i-2] < x[i-3] &
x[i-3] >= x[i-4]) {
result <- c(result, i-3)
}
}
i in length(x):1
i=250
x[i-1] < x[i-2] & x[i-2] < x[i-3] &
x[i-3] >= x[i-4]
for(i in length(x):3){
if(x[i-1] < x[i-2] & x[i-2] < x[i-3] &
x[i-3] >= x[i-4]) {
result <- c(result, (i-3))
}
}
for(i in length(x):4){
if(x[i-1] < x[i-2] & x[i-2] < x[i-3] &
x[i-3] >= x[i-4]) {
result <- c(result, (i-3))
}
}
for(i in length(x):5){
if(x[i-1] < x[i-2] & x[i-2] < x[i-3] &
x[i-3] >= x[i-4]) {
result <- c(result, (i-3))
}
}
result
result <- result[length(result)]
result
results <- hist.data$mids[result]
results
plot.ddPCR(data, well = i)
abline(v = 1186)
abline(h = 1186)
minOutliers <- function(ch1, ch2, thresholds = NULL ,breaks = 100, strict = FALSE){
x <- ch1[!(ch1[,1] %in% NA),]
if(strict == TRUE){
breaks <- .makeBreaks(min = min(x), max = max(x), breaks = breaks)
}
hist.data <- hist(x, breaks = breaks, plot = FALSE)
x <- hist.data$counts
result <- NULL
for(i in length(x):5){
if(x[i-1] < x[i-2] & x[i-2] < x[i-3] &
x[i-3] >= x[i-4]) {
result <- c(result, (i-3))
}
}
result <- result[length(result)]
result.ch1 <- hist.data$mids[result]
x <- ch2[!(ch2[,1] %in% NA),]
if(strict == TRUE){
breaks <- .makeBreaks(min = min(x), max = max(x), breaks = breaks)
}
hist.data <- hist(x, breaks = breaks, plot = FALSE)
x <- hist.data$counts
result <- NULL
for(i in length(x):5){
if(x[i-1] < x[i-2] & x[i-2] < x[i-3] &
x[i-3] >= x[i-4]) {
result <- c(result, (i-3))
}
}
result <- result[length(result)]
result.ch2 <- hist.data$mids[result]
result <- cbind(channel.1 = result.ch1,
channel.2 = result.ch2)
return(results)
}
minOutliers <- function(ch1, ch2 ,breaks = 100, strict = FALSE){
x <- ch1[!(ch1[,1] %in% NA),]
if(strict == TRUE){
breaks <- .makeBreaks(min = min(x), max = max(x), breaks = breaks)
}
hist.data <- hist(x, breaks = breaks, plot = FALSE)
x <- hist.data$counts
result <- NULL
for(i in length(x):5){
if(x[i-1] < x[i-2] & x[i-2] < x[i-3] &
x[i-3] >= x[i-4]) {
result <- c(result, (i-3))
}
}
result <- result[length(result)]
result.ch1 <- hist.data$mids[result]
x <- ch2[!(ch2[,1] %in% NA),]
if(strict == TRUE){
breaks <- .makeBreaks(min = min(x), max = max(x), breaks = breaks)
}
hist.data <- hist(x, breaks = breaks, plot = FALSE)
x <- hist.data$counts
result <- NULL
for(i in length(x):5){
if(x[i-1] < x[i-2] & x[i-2] < x[i-3] &
x[i-3] >= x[i-4]) {
result <- c(result, (i-3))
}
}
result <- result[length(result)]
result.ch2 <- hist.data$mids[result]
result <- cbind(channel.1 = result.ch1,
channel.2 = result.ch2)
return(results)
}
minOutliers(x=data@assayData$Ch1.Amplitude[,4], y= data@assayData$Ch2.Amplitude[,4])
minOutliers(ch1 =data@assayData$Ch1.Amplitude[,4], ch2= data@assayData$Ch2.Amplitude[,4])
ch1 <- data@assayData$Ch1.Amplitude[,4]
ch2 <- data@assayData$Ch2.Amplitude[,4])
x <- ch1[!(ch1[,1] %in% NA),]
ch1 <- data@assayData$Ch1.Amplitude[,4]
ch2 <- data@assayData$Ch2.Amplitude[,4]
x <- ch1[!(ch1[,1] %in% NA),]
breaks = 250
x <- ch1[!(ch1[,1] %in% NA),]
heac(ch1)
head(ch1)
x <- ch1[!(ch1 %in% NA),]
x <- ch1[!(ch1 %in% NA)]
if(strict == TRUE){
breaks <- .makeBreaks(min = min(x), max = max(x), breaks = breaks)
}
hist.data <- hist(x, breaks = breaks, plot = FALSE)
x <- hist.data$counts
result <- NULL
for(i in length(x):5){
if(x[i-1] < x[i-2] & x[i-2] < x[i-3] &
x[i-3] >= x[i-4]) {
result <- c(result, (i-3))
}
}
result <- result[length(result)]
result.ch1 <- hist.data$mids[result]
x <- ch2[!(ch2 %in% NA)]
if(strict == TRUE){
breaks <- .makeBreaks(min = min(x), max = max(x), breaks = breaks)
}
hist.data <- hist(x, breaks = breaks, plot = FALSE)
x <- hist.data$counts
result <- NULL
for(i in length(x):5){
if(x[i-1] < x[i-2] & x[i-2] < x[i-3] &
x[i-3] >= x[i-4]) {
result <- c(result, (i-3))
}
}
result <- result[length(result)]
result.ch2 <- hist.data$mids[result]
result <- cbind(channel.1 = result.ch1,
channel.2 = result.ch2)
result
abline(h=650)
abline(v=946)
i=10
plot.ddPCR(data, well=10)
plot.ddPCR(data, well=4)
i=4
is.null(well) == TRUE
well = NULL
is.null(well) == TRUE
well = TRUE
class(well)
if((class(data)[1] == "ddPCRdata") != TRUE){
stop ("data structure is not in the correct format.\n\n")
}
if((is.null(well) == TRUE){
stop ("well is not given.\n\n")
}
ch1 <- data@assayData$Ch1.Amplitude[ ,well]
x <- ch1[!(ch1 %in% NA)]
if(strict == TRUE){
breaks <- .makeBreaks(min = min(x), max = max(x), breaks = breaks)
}
hist.data <- hist(x, breaks = breaks, plot = FALSE)
x <- hist.data$counts
result <- NULL
for(i in length(x):5){
if(x[i-1] < x[i-2] & x[i-2] < x[i-3] &
x[i-3] >= x[i-4]) {
result <- c(result, (i-3))
}
}
result <- result[length(result)]
result.ch1 <- hist.data$mids[result]
ch2 <- data@assayData$Ch2.Amplitude[,well]
x <- ch2[!(ch2 %in% NA)]
if(strict == TRUE){
breaks <- .makeBreaks(min = min(x), max = max(x), breaks = breaks)
}
minOutliers <- function(data = NULL, well = NULL, breaks = 250, strict = FALSE){
if((class(data)[1] == "ddPCRdata") != TRUE){
stop ("data structure is not in the correct format.\n\n")
}
if(is.null(well) == TRUE){
stop ("well is not given.\n\n")
}
ch1 <- data@assayData$Ch1.Amplitude[ ,well]
x <- ch1[!(ch1 %in% NA)]
if(strict == TRUE){
breaks <- .makeBreaks(min = min(x), max = max(x), breaks = breaks)
}
hist.data <- hist(x, breaks = breaks, plot = FALSE)
x <- hist.data$counts
result <- NULL
for(i in length(x):5){
if(x[i-1] < x[i-2] & x[i-2] < x[i-3] &
x[i-3] >= x[i-4]) {
result <- c(result, (i-3))
}
}
result <- result[length(result)]
result.ch1 <- hist.data$mids[result]
ch2 <- data@assayData$Ch2.Amplitude[,well]
x <- ch2[!(ch2 %in% NA)]
if(strict == TRUE){
breaks <- .makeBreaks(min = min(x), max = max(x), breaks = breaks)
}
hist.data <- hist(x, breaks = breaks, plot = FALSE)
x <- hist.data$counts
result <- NULL
for(i in length(x):5){
if(x[i-1] < x[i-2] & x[i-2] < x[i-3] &
x[i-3] >= x[i-4]) {
result <- c(result, (i-3))
}
}
result <- result[length(result)]
result.ch2 <- hist.data$mids[result]
result <- cbind(channel.1 = result.ch1,
channel.2 = result.ch2)
return(results)
}
# [ ] selection of cluster 1 only
# [ ] reverse of histDensity
minOutliers(data, well =4)
minOutliers <- function(data = NULL, well = NULL, breaks = 250, strict = FALSE){
if((class(data)[1] == "ddPCRdata") != TRUE){
stop ("data structure is not in the correct format.\n\n")
}
if(is.null(well) == TRUE){
stop ("well is not given.\n\n")
}
ch1 <- data@assayData$Ch1.Amplitude[ ,well]
x <- ch1[!(ch1 %in% NA)]
if(strict == TRUE){
breaks <- .makeBreaks(min = min(x), max = max(x), breaks = breaks)
}
hist.data <- hist(x, breaks = breaks, plot = FALSE)
x <- hist.data$counts
result <- NULL
for(i in length(x):5){
if(x[i-1] < x[i-2] & x[i-2] < x[i-3] &
x[i-3] >= x[i-4]) {
result <- c(result, (i-3))
}
}
result <- result[length(result)]
result.ch1 <- hist.data$mids[result]
ch2 <- data@assayData$Ch2.Amplitude[,well]
x <- ch2[!(ch2 %in% NA)]
if(strict == TRUE){
breaks <- .makeBreaks(min = min(x), max = max(x), breaks = breaks)
}
hist.data <- hist(x, breaks = breaks, plot = FALSE)
x <- hist.data$counts
result <- NULL
for(i in length(x):5){
if(x[i-1] < x[i-2] & x[i-2] < x[i-3] &
x[i-3] >= x[i-4]) {
result <- c(result, (i-3))
}
}
result <- result[length(result)]
result.ch2 <- hist.data$mids[result]
results <- cbind(channel.1 = result.ch1,
channel.2 = result.ch2)
return(results)
}
# [ ] selection of cluster 1 only
# [ ] reverse of histDensity
minOutliers(data, well =4)
abline(h=602)
abline(v=562)
hist.data <- hist(x, breaks = breaks)
