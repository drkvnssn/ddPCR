cat(r[[filename]][[funname]], sep = "\n", file = dest, append = TRUE)
})
}))
if(file.exists(paste0(dest,"_backup"))) file.remove(paste0(dest,"_backup"))
invisible(dest)
}
create.folders <- function(path,folders){
# - [x] set path
# - [x] set folders
# - [x] for loooooop
for(i in 1:length(folders))
{
if(!file.exists(file.path(path,as.character(folders[i]))))
{
dir.create(file.path(path,as.character(folders[i])))
}
}
# - [x] check file.exists
# - [x] create folder
# - [x] does it work?
}
set.paths <- function(path=""){
if(path == "" | class(path) == "numeric"){ stop
} else {
archive <- file.path(path,"archive")
input.data <-  file.path(path,"input.data")
output.data <-  file.path(path,"output.data")
scripts <-  file.path(path,"scripts")
scripts.log <- file.path(path,"scripts.log")
# - [x] set paths
paths <- list(archive=archive,
input.data=input.data,
output.data=output.data,
scripts=scripts,
scripts.log=scripts.log)
# - [x] make list
return(paths)
# - [x] return list
}
}
# RUN FUNCTIONS
create.folders(path=input.path,c("archive","input.data","output.data","scripts","scripts.log"))
path <- set.paths(input.path)
log.file <- paste(format(Sys.time(), "%Y%m%d-%H%M"),"_script_checklist.md",sep="")
make_doc(path=path$scripts,dest = file.path(path$scripts.log,log.file))
# END
input.path
make_doc(path=path$scripts,dest = file.path(path$scripts.log,log.file))
file.path(path$scripts.log,log.file)
# R/SET COMPUTER NAME
input.path <- "D:/R SCRIPTS/MiSeq Status" #work
# FUNCTIONS
get_comments = function(filename){
is_assign = function(expr) as.character(expr) %in% c("<-", "<<-", "=", "assign")
is_function = function(expr) is.call(expr) && is_assign(expr[[1L]]) && is.call(expr[[3L]]) && expr[[3L]][[1L]] == quote(`function`)
src = parse(filename, keep.source = TRUE)
functions = Filter(is_function, src)
fun_names = as.character(lapply(functions, `[[`, 2L))
# - [x] extract all comments
r = setNames(lapply(attr(functions, "srcref"), grep, pattern = "^\\s*#", value = TRUE), fun_names)
# - [x] remove leading spaces and comment sign '#'
r = lapply(r, function(x) sub(pattern = "^\\s*#", replacement = "", x = x))
# - [x] keep only markdown checkboxes like " - [ ] " or " - [x] "
r = lapply(r, function(x) x[nchar(x) >= 7L & substr(x, 1L, 7L) %in% c(" - [ ] "," - [x] ")])
# - [x] return only non empty results
r[as.logical(sapply(r, length))]
}
make_doc = function(path = "R", files, package, dest){
if(!missing(package)) path = system.file(path, package=package)
stopifnot(file.exists(path))
if(missing(files)) files = list.files(path, pattern = "\\.R$")
if(!length(files)){
warning(paste0("No files to process in ",path,"."))
return(invisible())
}
if(!all(sapply(file.path(path, files), file.exists))) stop(paste0("Processing stopped as some files not exists: ", paste(files[!sapply(file.path(path, files), file.exists)], collapse=", "),"."))
r = setNames(lapply(file.path(path, files), get_comments), files)
r = r[as.logical(sapply(r, length))]
if(missing(dest)) return(r)
if(!file.exists(dirname(dest))) dir.create(dirname(dest), recursive=TRUE)
if(file.exists(dest)) file.rename(dest, paste0(dest,"_backup"))
invisible(lapply(names(r), function(filename){
cat(c("",paste("###", filename)), sep = "\n", file = dest, append = file.exists(dest))
lapply(names(r[[filename]]), function(funname){
cat(c("",paste("####", funname),""), sep = "\n", file = dest, append = TRUE)
cat(r[[filename]][[funname]], sep = "\n", file = dest, append = TRUE)
})
}))
if(file.exists(paste0(dest,"_backup"))) file.remove(paste0(dest,"_backup"))
invisible(dest)
}
create.folders <- function(path,folders){
# - [x] set path
# - [x] set folders
# - [x] for loooooop
for(i in 1:length(folders))
{
if(!file.exists(file.path(path,as.character(folders[i]))))
{
dir.create(file.path(path,as.character(folders[i])))
}
}
# - [x] check file.exists
# - [x] create folder
# - [x] does it work?
}
set.paths <- function(path=""){
if(path == "" | class(path) == "numeric"){ stop
} else {
archive <- file.path(path,"archive")
input.data <-  file.path(path,"input.data")
output.data <-  file.path(path,"output.data")
scripts <-  file.path(path,"scripts")
scripts.log <- file.path(path,"scripts.log")
# - [x] set paths
paths <- list(archive=archive,
input.data=input.data,
output.data=output.data,
scripts=scripts,
scripts.log=scripts.log)
# - [x] make list
return(paths)
# - [x] return list
}
}
# RUN FUNCTIONS
create.folders(path=input.path,c("archive","input.data","output.data","scripts","scripts.log"))
path <- set.paths(input.path)
log.file <- paste(format(Sys.time(), "%Y%m%d-%H%M"),"_script_checklist.md",sep="")
make_doc(path=path$scripts,dest = file.path(path$scripts.log,log.file))
# END
make_doc(path=path$scripts,dest = file.path(path$scripts.log,log.file))
input.path <- "C:\\Documents and Settings\\h.vanessen\\Bureaublad\\MPS-261\\"
# FUNCTIONS
get_comments = function(filename){
is_assign = function(expr) as.character(expr) %in% c("<-", "<<-", "=", "assign")
is_function = function(expr) is.call(expr) && is_assign(expr[[1L]]) && is.call(expr[[3L]]) && expr[[3L]][[1L]] == quote(`function`)
src = parse(filename, keep.source = TRUE)
functions = Filter(is_function, src)
fun_names = as.character(lapply(functions, `[[`, 2L))
# - [x] extract all comments
r = setNames(lapply(attr(functions, "srcref"), grep, pattern = "^\\s*#", value = TRUE), fun_names)
# - [x] remove leading spaces and comment sign '#'
r = lapply(r, function(x) sub(pattern = "^\\s*#", replacement = "", x = x))
# - [x] keep only markdown checkboxes like " - [ ] " or " - [x] "
r = lapply(r, function(x) x[nchar(x) >= 7L & substr(x, 1L, 7L) %in% c(" - [ ] "," - [x] ")])
# - [x] return only non empty results
r[as.logical(sapply(r, length))]
}
make_doc = function(path = "R", files, package, dest){
if(!missing(package)) path = system.file(path, package=package)
stopifnot(file.exists(path))
if(missing(files)) files = list.files(path, pattern = "\\.R$")
if(!length(files)){
warning(paste0("No files to process in ",path,"."))
return(invisible())
}
if(!all(sapply(file.path(path, files), file.exists))) stop(paste0("Processing stopped as some files not exists: ", paste(files[!sapply(file.path(path, files), file.exists)], collapse=", "),"."))
r = setNames(lapply(file.path(path, files), get_comments), files)
r = r[as.logical(sapply(r, length))]
if(missing(dest)) return(r)
if(!file.exists(dirname(dest))) dir.create(dirname(dest), recursive=TRUE)
if(file.exists(dest)) file.rename(dest, paste0(dest,"_backup"))
invisible(lapply(names(r), function(filename){
cat(c("",paste("###", filename)), sep = "\n", file = dest, append = file.exists(dest))
lapply(names(r[[filename]]), function(funname){
cat(c("",paste("####", funname),""), sep = "\n", file = dest, append = TRUE)
cat(r[[filename]][[funname]], sep = "\n", file = dest, append = TRUE)
})
}))
if(file.exists(paste0(dest,"_backup"))) file.remove(paste0(dest,"_backup"))
invisible(dest)
}
create.folders <- function(path,folders){
# - [x] set path
# - [x] set folders
# - [x] for loooooop
for(i in 1:length(folders))
{
if(!file.exists(file.path(path,as.character(folders[i]))))
{
dir.create(file.path(path,as.character(folders[i])))
}
}
# - [x] check file.exists
# - [x] create folder
# - [x] does it work?
}
set.paths <- function(path=""){
if(path == "" | class(path) == "numeric"){ stop
} else {
# - [x] set paths
paths <- list(archive=file.path(path,"archive"),
input.data=file.path(path,"input.data"),
output.data=file.path(path,"output.data"),
output.plot=file.path(path,"output.plot"),
scripts=file.path(path,"scripts"),
scripts.log= file.path(path,"scripts.log"))
# - [x] make list
return(paths)
# - [x] return list
}
}
# RUN FUNCTIONS
create.folders(path=input.path,c("archive","input.data","output.data","output.plot","scripts","scripts.log"))
path <- set.paths(input.path)
log.file <- paste(format(Sys.time(), "%Y%m%d-%H%M"),"_script_checklist.md",sep="")
make_doc(path=path$scripts,dest = file.path(path$scripts.log,log.file))
input.files <- list.files(path = path.sample.data,full.names = TRUE, pattern = ".txt.bedGraph.txt")
input.files <- input.files[1:100]
sample.names <- gsub(x = basename(input.files), pattern = ".txt.bedGraph.txt", replacement = "")
# read unique probes
unique.probes <- read.table(file = file.path(path.output.data,"matching_probes_all_samples.txt"),header = TRUE,sep = "\t")
unique.data <- unique.probes
probe.chrom <- gsub(pattern = "chrX",replacement = "23",unique.data[,1])
probe.chrom <- gsub(pattern = "chrY",replacement = "24",probe.chrom)
probe.chrom <- gsub(pattern = "chr",replacement = "",probe.chrom)
probe.name <- paste(probe.chrom,":",unique.data[,2],"-",unique.data[,2],sep="")
library(data.table)
keys <- c("Chromosome", "Start")
unique.data <- data.table(unique.probes, key=keys)
input.path <- "C:\\Documents and Settings\\h.vanessen\\Bureaublad\\MPS-261\\"
# FUNCTIONS
get_comments = function(filename){
is_assign = function(expr) as.character(expr) %in% c("<-", "<<-", "=", "assign")
is_function = function(expr) is.call(expr) && is_assign(expr[[1L]]) && is.call(expr[[3L]]) && expr[[3L]][[1L]] == quote(`function`)
src = parse(filename, keep.source = TRUE)
functions = Filter(is_function, src)
fun_names = as.character(lapply(functions, `[[`, 2L))
# - [x] extract all comments
r = setNames(lapply(attr(functions, "srcref"), grep, pattern = "^\\s*#", value = TRUE), fun_names)
# - [x] remove leading spaces and comment sign '#'
r = lapply(r, function(x) sub(pattern = "^\\s*#", replacement = "", x = x))
# - [x] keep only markdown checkboxes like " - [ ] " or " - [x] "
r = lapply(r, function(x) x[nchar(x) >= 7L & substr(x, 1L, 7L) %in% c(" - [ ] "," - [x] ")])
# - [x] return only non empty results
r[as.logical(sapply(r, length))]
}
make_doc = function(path = "R", files, package, dest){
if(!missing(package)) path = system.file(path, package=package)
stopifnot(file.exists(path))
if(missing(files)) files = list.files(path, pattern = "\\.R$")
if(!length(files)){
warning(paste0("No files to process in ",path,"."))
return(invisible())
}
if(!all(sapply(file.path(path, files), file.exists))) stop(paste0("Processing stopped as some files not exists: ", paste(files[!sapply(file.path(path, files), file.exists)], collapse=", "),"."))
r = setNames(lapply(file.path(path, files), get_comments), files)
r = r[as.logical(sapply(r, length))]
if(missing(dest)) return(r)
if(!file.exists(dirname(dest))) dir.create(dirname(dest), recursive=TRUE)
if(file.exists(dest)) file.rename(dest, paste0(dest,"_backup"))
invisible(lapply(names(r), function(filename){
cat(c("",paste("###", filename)), sep = "\n", file = dest, append = file.exists(dest))
lapply(names(r[[filename]]), function(funname){
cat(c("",paste("####", funname),""), sep = "\n", file = dest, append = TRUE)
cat(r[[filename]][[funname]], sep = "\n", file = dest, append = TRUE)
})
}))
if(file.exists(paste0(dest,"_backup"))) file.remove(paste0(dest,"_backup"))
invisible(dest)
}
create.folders <- function(path,folders){
# - [x] set path
# - [x] set folders
# - [x] for loooooop
for(i in 1:length(folders))
{
if(!file.exists(file.path(path,as.character(folders[i]))))
{
dir.create(file.path(path,as.character(folders[i])))
}
}
# - [x] check file.exists
# - [x] create folder
# - [x] does it work?
}
set.paths <- function(path=""){
if(path == "" | class(path) == "numeric"){ stop
} else {
# - [x] set paths
paths <- list(archive=file.path(path,"archive"),
input.data=file.path(path,"input.data"),
output.data=file.path(path,"output.data"),
output.plot=file.path(path,"output.plot"),
scripts=file.path(path,"scripts"),
scripts.log= file.path(path,"scripts.log"))
# - [x] make list
return(paths)
# - [x] return list
}
}
# RUN FUNCTIONS
create.folders(path=input.path,c("archive","input.data","output.data","output.plot","scripts","scripts.log"))
path <- set.paths(input.path)
log.file <- paste(format(Sys.time(), "%Y%m%d-%H%M"),"_script_checklist.md",sep="")
make_doc(path=path$scripts,dest = file.path(path$scripts.log,log.file))
input.files <- list.files(path = path.sample.data,full.names = TRUE, pattern = ".txt.bedGraph.txt")
path
input.files <- list.files(path = path$input.data,full.names = TRUE, pattern = ".txt.bedGraph.txt")
input.files <- input.files[1:100]
sample.names <- gsub(x = basename(input.files), pattern = ".txt.bedGraph.txt", replacement = "")
input.files
input.files <- list.files(path = path$input.data,full.names = TRUE, pattern = ".txt.bedGraph.txt")
input.files <- input.files[1:100]
sample.names <- gsub(x = basename(input.files), pattern = ".txt.bedGraph.txt", replacement = "")
input.files
sample.names
unique.probes <- read.table(file = file.path(path.output.data,"matching_probes_all_samples.txt"),header = TRUE,sep = "\t")
unique.data <- unique.probes
probe.chrom <- gsub(pattern = "chrX",replacement = "23",unique.data[,1])
probe.chrom <- gsub(pattern = "chrY",replacement = "24",probe.chrom)
probe.chrom <- gsub(pattern = "chr",replacement = "",probe.chrom)
probe.name <- paste(probe.chrom,":",unique.data[,2],"-",unique.data[,2],sep="")
unique.probes <- read.table(file = file.path(path$output.data,"matching_probes_all_samples.txt"),header = TRUE,sep = "\t")
unique.probes <- read.table(file = file.path(path$output.data,"matching_probes_all_samples.txt"),header = TRUE,sep = "\t")
head(unique.probes)
unique(unique.probes[,1])
library(data.table)
keys <- c("Chromosome", "Start")
unique.data <- data.table(unique.probes, key=keys)
probe.chrom <- gsub(pattern = "chrX",replacement = "23",unique.data[,1])
probe.chrom <- gsub(pattern = "chrY",replacement = "24",probe.chrom)
probe.chrom <- gsub(pattern = "chr",replacement = "",probe.chrom)
# - [ ] combine chromosome, start, end for probeName column
probe.name <- paste(probe.chrom,":",unique.data[,2],"-",unique.data[,2],sep="")
head(unique.data)
head(unique.probes)
probe.name <- paste(probe.chrom,":",unique.probes[,2],"-",unique.probes[,2],sep="")
head(probe.name)
length(probe.name)
dim(unique.probes)
library(data.table)
keys <- c("Chromosome", "Start")
unique.data <- data.table(unique.probes, key=keys)
unique.daa
unique.data
dim(unique.data)
unique(unique.data[,1])
unique(unique.data$Chromosome)
probes.test <- unique.probes
probes.test[,1] <- probe.chrom
head(probe.chrom)
length(probe.chrom)
probe.chrom <- gsub(pattern = "chrX",replacement = "23",unique.probes[,1])
probe.chrom <- gsub(pattern = "chrY",replacement = "24",probe.chrom)
probe.chrom <- gsub(pattern = "chr",replacement = "",probe.chrom)
head(probe.chrom)
probes.test[,1] <- probe.chrom
probes.test <- unique.probes
probes.test[,1] <- probe.chrom
head(probes.test)
unique(probes.test)
unique(probes.test[,1])
library(data.table)
keys <- c("Chromosome", "Start")
unique.data <- data.table(unique.probes, key=keys)
head(unique.data)
unique.data <- data.table(probes.test, key=keys)
head(unique.data)
unique(unique.data$Chromosome)
unique.data <- data.table(unique.probes, key=keys)
sample.data <- data.table(data, key=keys)
sample.data[unique.data, Bounced := 1L]
first.sample <- 1
last.sample <- 100
diff(200,1)
input.files <- input.files[1:(last.sample-first.sample)+1]
length(input.files)
input.files <- input.files[1:(last.sample-first.sample+1)]
length(input.files)
first.sample <- 10
last.sample <- 100
input.files <- input.files[1:(last.sample-first.sample+1)]
length(input.files)
nSamples <- (last.sample-first.sample)+1
first.sample <- 10
last.sample <- 100
nSamples <- (last.sample-first.sample)+1
input.files <- input.files[first.sample:last.sample]
sample.names <- gsub(x = basename(input.files), pattern = ".txt.bedGraph.txt", replacement = "")
nSamples
first.sample <- 1
last.sample <- 100
nSamples <- (last.sample-first.sample)+1
input.files <- input.files[first.sample:last.sample]
sample.names <- gsub(x = basename(input.files), pattern = ".txt.bedGraph.txt", replacement = "")
nSamples
unique.probes <- read.table(file = file.path(path$output.data,"matching_probes_all_samples.txt"),header = TRUE,sep = "\t")
i=1
data <- read.table(file = input.files[i], sep="\t", header=FALSE, skip=1)
colnames(data) <- c("Chromosome","Start","End","Ratio")
sample.data <- data.table(data, key=keys,keep.rownames = TRUE)
sample.data[unique.data, Bounced := 1L]
all.sample.data[,i] <- sample.data[sample.data$Bounced == 1,Ratio]
data <- read.table(file = input.files[i], sep="\t", header=FALSE, skip=1)
colnames(data) <- c("Chromosome","Start","End","Ratio")
sample.data <- data.table(data, key=keys,keep.rownames = TRUE)
sample.data[unique.data, Bounced := 1L]
cat(unique(sample.data$Chromosome),"\n")
head(sample.data)
unique(sample.data$Chromosome)
as.character(unique(sample.data$Chromosome))
head(sample.data)
unique(sample.data$Chromosome)
unique(unique.data$Chromosome)
data <- read.table(file = input.files[i], sep="\t", header=FALSE, skip=1)
# - [ ] create a matrix to hold all the data
all.sample.data <- matrix(data = 0,nrow = dim(unique.data)[1],ncol = nSamples)
colnames(all.sample.data) <- sample.names
#### parse first half of the set
pb   <- txtProgressBar(1, nSamples, style=3) # add outside loop to print process bar during for loop
for(i in 1:nSamples)
{
data <- read.table(file = input.files[i], sep="\t", header=FALSE, skip=1)
colnames(data) <- c("Chromosome","Start","End","Ratio")
sample.data <- data.table(data, key=keys,keep.rownames = TRUE)
sample.data[unique.data, Bounced := 1L]
all.sample.data[,i] <- sample.data[sample.data$Bounced == 1,Ratio]
output.file <- file.path(path$output.data,"sample_",first.sample,"-",last.sample,"_Stanford.txt",sep="")
setTxtProgressBar(pb, i) # add inside loop
if(i %% 5 == 0 | i == nSamples){write.table(x = unique.data,file = output.file,quote = FALSE,sep = "\t",row.names = FALSE)
# - [ ] is the unique data still in the wrong format?
as.character(unique(sample.data$Chromosome))
}
}
path$output.data
list.files(path$output.data)
output.file <- file.path(path$output.data,paste("sample_",first.sample,"-",last.sample,"_Stanford.txt",sep=""))
output.file
output.file <- file.path(path$output.data,paste("sample_",first.sample,"-",last.sample,"_Stanford.txt",sep=""))
setTxtProgressBar(pb, i) # add inside loop
if(i %% 5 == 0 | i == nSamples){write.table(x = unique.data,file = output.file,quote = FALSE,sep = "\t",row.names = FALSE)
# - [ ] is the unique data still in the wrong format?
as.character(unique(sample.data$Chromosome))
}
pb   <- txtProgressBar(1, nSamples, style=3) # add outside loop to print process bar during for loop
for(i in 1:nSamples)
{
data <- read.table(file = input.files[i], sep="\t", header=FALSE, skip=1)
colnames(data) <- c("Chromosome","Start","End","Ratio")
sample.data <- data.table(data, key=keys,keep.rownames = TRUE)
sample.data[unique.data, Bounced := 1L]
all.sample.data[,i] <- sample.data[sample.data$Bounced == 1,Ratio]
output.file <- file.path(path$output.data,paste("sample_",first.sample,"-",last.sample,"_Stanford.txt",sep=""))
setTxtProgressBar(pb, i) # add inside loop
if(i %% 5 == 0 | i == nSamples){write.table(x = unique.data,file = output.file,quote = FALSE,sep = "\t",row.names = FALSE)
# - [ ] is the unique data still in the wrong format?
as.character(unique(sample.data$Chromosome))
}
}
length(nSamples)
create.folders(path=input.path,c("archive","input.data","output.data","output.plot","scripts","scripts.log"))
path <- set.paths(input.path)
log.file <- paste(format(Sys.time(), "%Y%m%d-%H%M"),"_script_checklist.md",sep="")
make_doc(path=path$scripts,dest = file.path(path$scripts.log,log.file))
# list all the files in the data set
input.files <- list.files(path = path$input.data,full.names = TRUE, pattern = ".txt.bedGraph.txt")
first.sample <- 1
last.sample <- 100
nSamples <- (last.sample-first.sample)+1
input.files <- input.files[first.sample:last.sample]
sample.names <- gsub(x = basename(input.files), pattern = ".txt.bedGraph.txt", replacement = "")
# read unique probes
unique.probes <- read.table(file = file.path(path$output.data,"matching_probes_all_samples.txt"),header = TRUE,sep = "\t")
library(data.table)
keys <- c("Chromosome", "Start")
unique.data <- data.table(unique.probes, key=keys)
# - [ ] store the chromosome, start, end locations after probe selection
data <- read.table(file = input.files[i], sep="\t", header=FALSE, skip=1)
# - [ ] create a matrix to hold all the data
all.sample.data <- matrix(data = 0,nrow = dim(unique.data)[1],ncol = nSamples)
colnames(all.sample.data) <- sample.names
#### parse first half of the set
pb   <- txtProgressBar(1, nSamples, style=3) # add outside loop to print process bar during for loop
for(i in 1:nSamples)
{
data <- read.table(file = input.files[i], sep="\t", header=FALSE, skip=1)
colnames(data) <- c("Chromosome","Start","End","Ratio")
sample.data <- data.table(data, key=keys,keep.rownames = TRUE)
sample.data[unique.data, Bounced := 1L]
all.sample.data[,i] <- sample.data[sample.data$Bounced == 1,Ratio]
output.file <- file.path(path$output.data,paste("sample_",first.sample,"-",last.sample,"_Stanford.txt",sep=""))
setTxtProgressBar(pb, i) # add inside loop
if(i %% 5 == 0 | i == nSamples){write.table(x = unique.data,file = output.file,quote = FALSE,sep = "\t",row.names = FALSE)
# - [ ] is the unique data still in the wrong format?
print(as.character(unique(sample.data$Chromosome)))
}
}
dim(unique.data)
dim(all.sample.data)
probe.chrom <- gsub(pattern = "chrX",replacement = "23",unique.data[,1])
probe.chrom <- gsub(pattern = "chrY",replacement = "24",probe.chrom)
probe.chrom <- gsub(pattern = "chr",replacement = "",probe.chrom)
# - [ ] combine chromosome, start, end for probeName column
probe.name <- paste(probe.chrom,":",unique.data[,2],"-",unique.data[,2],sep="")
temp <- cbind(probe.name,probe.chrom,unique.data[,2:3],all.sample.data)
dim(all.sample.data)
length(probe.name)
probe.name
head(probe.chrom)
probe.chrom <- gsub(pattern = "chrX",replacement = "23",unique.data$Chromosome)
head(probe.chrom)
probe.chrom <- gsub(pattern = "chrY",replacement = "24",probe.chrom)
probe.chrom <- gsub(pattern = "chr",replacement = "",probe.chrom)
probe.name <- paste(probe.chrom,":",unique.data[,2],"-",unique.data[,2],sep="")
head(probe.name)
probe.name <- paste(probe.chrom,":",unique.data$Start,"-",unique.data$End,sep="")
head(probe.name)
unique(unique.data$Chromosome)
unique(probe.chrom)
temp <- cbind(probe.name,probe.chrom,unique.data$Start,unique.data$End,all.sample.data)
