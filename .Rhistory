??alphabet
??letters
paste(c("A","B"),c(as.character(1:12), sep="")
)
paste("A",c(as.character(1:12), sep=""))
paste("A",c(as.character(1:12), sep="")
)
paste("A",c(as.character(1:12)), sep="")
LETTERS(1)
LETTERS[1]
paste(LETTERS[1:8],c(as.character(1:12)), sep="")
restult <- rep(NA, 96)
result
restult
result <- rep(NA, 96)
i=1
result[location[1]:location[2]] <- paste(LETTERS[i],c(as.character(1:12)), sep="")
location <- c(1,12)
result[location[1]:location[2]] <- paste(LETTERS[i],c(as.character(1:12)), sep="")
result
location <- location + 12
location
result <- rep(NA, 96)
location <- c(1,12)
for(i in 1:8)
{
result[location[1]:location[2]] <- paste(LETTERS[i],c(as.character(1:12)), sep="")
location <- location + 12
}
location
result
letters=8
class(letters)
plate.wells <- function(letters=8, numbers=12)
{
if(class(letters) != "numeric" | class(numbers) != "numeric"){
stop("input values should be numeric.\n")
} else {
result <- rep(NA, (letters*numbers))
location <- c(1,numbers)
for(i in 1:letters)
{
result[location[1]:location[2]] <- paste(LETTERS[i],c(as.character(1:12)), sep="")
location <- location + 12
}
}
return(result)
}
plate.wells(8,12)
plate.wells(8,11)
plate.wells <- function(letters=8, numbers=12)
{
if(class(letters) != "numeric" | class(numbers) != "numeric"){
stop("input values should be numeric.\n")
} else {
result <- rep(NA, (letters*numbers))
location <- c(1,numbers)
for(i in 1:letters)
{
result[location[1]:location[2]] <- paste(LETTERS[i],c(as.character(1:numbers)), sep="")
location <- location + numbers
}
}
return(result)
}
plate.wells(8,11)
prefix=NULL
class(prefix)
plate.wells <- function(prefix=NULL,letters=8, numbers=12,suffix=NULL)
{
if(class(letters) != "numeric" | class(numbers) != "numeric"){
stop("input values should be numeric.\n")
} else {
result <- rep(NA, (letters*numbers))
location <- c(1,numbers)
for(i in 1:letters)
{
result[location[1]:location[2]] <- paste(LETTERS[i],c(as.character(1:numbers)), sep="")
location <- location + numbers
}
}
if(class(prefix) != "NULL")
{
result <- paste(prefix,result,sep="")
}
if(class(suffix) != "NULL")
{
result <- paste(suffix,result,sep="")
}
return(result)
}
plate.wells(prefix = "_", 8,12,"_")
plate.wells <- function(prefix=NULL,letters=8, numbers=12,suffix=NULL)
{
if(class(letters) != "numeric" | class(numbers) != "numeric"){
stop("input values should be numeric.\n")
} else {
result <- rep(NA, (letters*numbers))
location <- c(1,numbers)
for(i in 1:letters)
{
result[location[1]:location[2]] <- paste(LETTERS[i],c(as.character(1:numbers)), sep="")
location <- location + numbers
}
}
if(class(prefix) != "NULL")
{
result <- paste(prefix,result,sep="")
}
if(class(suffix) != "NULL")
{
result <- paste(result,suffix,sep="")
}
return(result)
}
plate.wells(prefix = "_", 8,12,"_")
install.packages("RforProteomics")
library("RforProteomics")
install.packages("RforProteomics")
source("https://bioconductor.org/biocLite.R")
install.packages("mzR")
install.packages("mzR")
