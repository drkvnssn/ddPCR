plot.cutoffs(mean.4sd.cutoff(sample.data))
dev.off()
}
}
library(dplyr)
library("dplyr")
install.packages("dplyr")
source(file.path(path$scripts,"ddPCR.R"))
new.path <- "D:\\R SCRIPTS\\ddPCR analysis\\input.data\\20151125_790"
create.design.file(project.path,probe = "790")
create.design.file(new.path,probe = "790")
new.path <- "D:\\R SCRIPTS\\ddPCR analysis\\input.data\\20151125_858"
create.design.file(new.path,probe = "858")
new.path <- "D:\\R SCRIPTS\\ddPCR analysis\\input.data\\20151125_746_del"
create.design.file(new.path,probe = "746_del")
new.path <- "D:\\R SCRIPTS\\ddPCR analysis\\input.data\\20151125_790"
ddpcr.analysis(path = new.path, probe.path = probe.path)
ddpcr.analysis(path = new.path)
ddpcr.analysis <- function(path)
{
# - [x] start global analysis for experiment
exp.design <- read.design.file(path=path,pattern="design")
data.xy.max <-
combine.samples(path=path,files=exp.design$File) %>%
get.max.channels(.)
# - [x] analyze control files
control.data <-
exp.design[exp.design$Type == "pos" | exp.design$Type == "neg",2] %>%
combine.samples(path=path,files=.)
breakpoints <-
control.data %>%
get.ddpcr.breakpoints(., algorithm = "hist")
control.data %<>%
define.clusters(., breakpoints)
col.vec <-
control.data$Cluster %>%
define.color(., density=60)
# - [x] add probe data
# all.probe.data <- add.probe.data.v2(path = probe.path, name = exp.design[1,4], date = format(Sys.time(), "%Y-%m-%d"), breakpoints = breakpoints)
# - [x] get text for plotting
droplet.count <-
control.data$Cluster %>%
dropletcount.clusters(.)
# - [x] set file name control sample
control.name <- paste(strsplit(x = as.character(exp.design$File[1]),split = "_")[[1]][1],"_Controls",sep="")
output.file <- file.path(project.path, paste(control.name,".png",sep=""))
# - [x] create plot for control data
png(filename=output.file,width = 800,height = 800)
plot.ddpcr(x=control.data, main=control.name, max.xy=data.xy.max, breakpoints=breakpoints)
dev.off()
# - [x] retrieve sample files (all files)
sample.files <- exp.design[,2]
# - [ ] analyse sample files
for(i in 1:length(sample.files))
{
sample.data <-
read.table(file=file.path(path,sample.files[i]),header = TRUE,sep = ",") %>%
define.clusters(., breakpoints)
col.vec <-
sample.data$Cluster %>%
define.color(., density=60)
droplet.count <-
sample.data$Cluster %>%
dropletcount.clusters(.)
sample.name <- gsub(pattern = "_Amplitude.csv",replacement="",x=sample.files[i])
output.file <- file.path(project.path, paste(sample.name,".png",sep=""))
png(filename=output.file,width = 800,height = 800)
plot.ddpcr(x=sample.data, main=sample.name, max.xy = data.xy.max, breakpoints = breakpoints)
plot.cutoffs(mean.4sd.cutoff(sample.data))
dev.off()
}
}
new.path <- "D:\\R SCRIPTS\\ddPCR analysis\\input.data\\20151125_790"
ddpcr.analysis(path = new.path)
new.path <- "D:\\R SCRIPTS\\ddPCR analysis\\input.data\\20151125_790"
ddpcr.analysis(path = new.path, project.path=new.path)
ddpcr.analysis <- function(path,project.path)
{
# - [x] start global analysis for experiment
exp.design <- read.design.file(path=path,pattern="design")
data.xy.max <-
combine.samples(path=path,files=exp.design$File) %>%
get.max.channels(.)
# - [x] analyze control files
control.data <-
exp.design[exp.design$Type == "pos" | exp.design$Type == "neg",2] %>%
combine.samples(path=path,files=.)
breakpoints <-
control.data %>%
get.ddpcr.breakpoints(., algorithm = "hist")
control.data %<>%
define.clusters(., breakpoints)
col.vec <-
control.data$Cluster %>%
define.color(., density=60)
# - [x] add probe data
# all.probe.data <- add.probe.data.v2(path = probe.path, name = exp.design[1,4], date = format(Sys.time(), "%Y-%m-%d"), breakpoints = breakpoints)
# - [x] get text for plotting
droplet.count <-
control.data$Cluster %>%
dropletcount.clusters(.)
# - [x] set file name control sample
control.name <- paste(strsplit(x = as.character(exp.design$File[1]),split = "_")[[1]][1],"_Controls",sep="")
output.file <- file.path(project.path, paste(control.name,".png",sep=""))
# - [x] create plot for control data
png(filename=output.file,width = 800,height = 800)
plot.ddpcr(x=control.data, main=control.name, max.xy=data.xy.max, breakpoints=breakpoints)
dev.off()
# - [x] retrieve sample files (all files)
sample.files <- exp.design[,2]
# - [ ] analyse sample files
for(i in 1:length(sample.files))
{
sample.data <-
read.table(file=file.path(path,sample.files[i]),header = TRUE,sep = ",") %>%
define.clusters(., breakpoints)
col.vec <-
sample.data$Cluster %>%
define.color(., density=60)
droplet.count <-
sample.data$Cluster %>%
dropletcount.clusters(.)
sample.name <- gsub(pattern = "_Amplitude.csv",replacement="",x=sample.files[i])
output.file <- file.path(project.path, paste(sample.name,".png",sep=""))
png(filename=output.file,width = 800,height = 800)
plot.ddpcr(x=sample.data, main=sample.name, max.xy = data.xy.max, breakpoints = breakpoints)
plot.cutoffs(mean.4sd.cutoff(sample.data))
dev.off()
}
}
new.path <- "D:\\R SCRIPTS\\ddPCR analysis\\input.data\\20151125_790"
ddpcr.analysis(path = new.path, project.path=new.path)
source(file.path(path$scripts,"ddPCR.R"))
ddpcr.analysis <- function(path,project.path)
{
# - [x] start global analysis for experiment
exp.design <- read.design.file(path=path,pattern="design")
data.xy.max <-
combine.samples(path=path,files=exp.design$File) %>%
get.max.channels(.)
# - [x] analyze control files
control.data <-
exp.design[exp.design$Type == "pos" | exp.design$Type == "neg",2] %>%
combine.samples(path=path,files=.)
breakpoints <-
control.data %>%
get.ddpcr.breakpoints(., algorithm = "hist")
control.data %<>%
define.clusters(., breakpoints)
col.vec <-
control.data$Cluster %>%
define.color(., density=60)
# - [x] add probe data
# all.probe.data <- add.probe.data.v2(path = probe.path, name = exp.design[1,4], date = format(Sys.time(), "%Y-%m-%d"), breakpoints = breakpoints)
# - [x] get text for plotting
droplet.count <-
control.data$Cluster %>%
dropletcount.clusters(.)
# - [x] set file name control sample
control.name <- paste(strsplit(x = as.character(exp.design$File[1]),split = "_")[[1]][1],"_Controls",sep="")
output.file <- file.path(project.path, paste(control.name,".png",sep=""))
# - [x] create plot for control data
png(filename=output.file,width = 800,height = 800)
plot.ddpcr(x=control.data, main=control.name, max.xy=data.xy.max, breakpoints=breakpoints)
dev.off()
# - [x] retrieve sample files (all files)
sample.files <- exp.design[,2]
# - [ ] analyse sample files
for(i in 1:length(sample.files))
{
sample.data <-
read.table(file=file.path(path,sample.files[i]),header = TRUE,sep = ",") %>%
define.clusters(., breakpoints)
col.vec <-
sample.data$Cluster %>%
define.color(., density=60)
droplet.count <-
sample.data$Cluster %>%
dropletcount.clusters(.)
sample.name <- gsub(pattern = "_Amplitude.csv",replacement="",x=sample.files[i])
output.file <- file.path(project.path, paste(sample.name,".png",sep=""))
png(filename=output.file,width = 800,height = 800)
plot.ddpcr(x=sample.data, main=sample.name, max.xy = data.xy.max, breakpoints = breakpoints)
#plot.cutoffs(mean.4sd.cutoff(sample.data))
dev.off()
}
}
new.path <- "D:\\R SCRIPTS\\ddPCR analysis\\input.data\\20151125_790"
ddpcr.analysis(path = new.path, project.path=new.path)
new.path <- "D:\\R SCRIPTS\\ddPCR analysis\\input.data\\20151125_858"
ddpcr.analysis(path = new.path, project.path=new.path)
new.path <- "D:\\R SCRIPTS\\ddPCR analysis\\input.data\\20151125_746_del"
ddpcr.analysis(path = new.path, project.path=new.path)
dev.off()
new.path <- "D:\\R SCRIPTS\\ddPCR analysis\\input.data\\20151125_790"
ddpcr.analysis(path = new.path, project.path=new.path)
new.path <- "D:\\R SCRIPTS\\ddPCR analysis\\input.data\\20151125_858"
ddpcr.analysis(path = new.path, project.path=new.path)
new.path <- "D:\\R SCRIPTS\\ddPCR analysis\\input.data\\20151125_746_del"
ddpcr.analysis(path = new.path, project.path=new.path)
library(RISmed)
install.packages(RISmed)
install.packages("RISmed")
library(RISmed)
res <- EUtilsSummary("pinkeye", type="esearch", db="pubmed", datetype='pdat', mindate=2000, maxdate=2015, retmax=500)
res
QueryCount(res)
res
test <- QueryCount(res)
test
t<-ArticleTitle(EUtilsGet(res))
t
y <- YearPubmed(EUtilsGet(res)) # pubicated
r <- YearReceived(EUtilsGet(res)) # received
y
r
library(ggplot)
install.packages("RISmed","gglot")
install.packages("RISmed", "gglot")
install.packages("RISmed", "gglot")
install.packages("RISmed", "gglot")
install.packages("ggplot", lib="C:/Program Files/R/R-3.2.2/library")
install.packages("ggplot2", lib="C:/Program Files/R/R-3.2.2/library")
library(ggplot2)
date()
count<-table(y)
count<-as.data.frame(count)
names(count)<-c("Year", "Counts")
num <- data.frame(Year=count$Year, Counts=cumsum(count$Counts))
num$g <- "g"
names(num) <- c("Year", "Counts", "g")
q <- qplot(x=Year, y=Counts, data=count, geom="bar", stat="identity")
q <- q + ggtitle(paste("PubMed articles containing '", g,            "' ", "= ", max(num$Counts), sep="")) +
ylab("Number of articles") +
xlab(paste("Year n Query date: ", Sys.time(), sep="")) +
labs(colour="") +
theme_bw()
q
num$g
q <- qplot(x=Year, y=Counts, data=count, geom="bar", stat="identity")
q <- q + ggtitle(paste("PubMed articles containing '", "g",            "' ", "= ", max(num$Counts), sep="")) +
ylab("Number of articles") +
xlab(paste("Year n Query date: ", Sys.time(), sep="")) +
labs(colour="") +
theme_bw()
q
topic <- "pinkeye"
topic <- "pinkeye"
res <- EUtilsSummary(topic, type="esearch", db="pubmed", datetype='pdat', mindate=2000, maxdate=2015, retmax=500)
t<-ArticleTitle(EUtilsGet(res)) # titles
y <- YearPubmed(EUtilsGet(res)) # pubicated
r <- YearReceived(EUtilsGet(res)) # received
library(ggplot2)
date()
count<-table(y)
count<-as.data.frame(count)
names(count)<-c("Year", "Counts")
num <- data.frame(Year=count$Year, Counts=cumsum(count$Counts))
num$g <- "g"
names(num) <- c("Year", "Counts", "g")
q <- qplot(x=Year, y=Counts, data=count, geom="bar", stat="identity")
q <- q + ggtitle(paste("PubMed articles containing '", topic,            "' ", "= ", max(num$Counts), sep="")) +
ylab("Number of articles") +
xlab(paste("Year n Query date: ", Sys.time(), sep="")) +
labs(colour="") +
theme_bw()
q
topic <- "aCGH"
res <- EUtilsSummary(topic, type="esearch", db="pubmed", datetype='pdat', mindate=2000, maxdate=2015, retmax=500)
t<-ArticleTitle(EUtilsGet(res)) # titles
y <- YearPubmed(EUtilsGet(res)) # pubicated
r <- YearReceived(EUtilsGet(res)) # received
library(ggplot2)
date()
count<-table(y)
count<-as.data.frame(count)
names(count)<-c("Year", "Counts")
num <- data.frame(Year=count$Year, Counts=cumsum(count$Counts))
num$g <- "g"
names(num) <- c("Year", "Counts", "g")
q <- qplot(x=Year, y=Counts, data=count, geom="bar", stat="identity")
q <- q + ggtitle(paste("PubMed articles containing '", topic,            "' ", "= ", max(num$Counts), sep="")) +
ylab("Number of articles") +
xlab(paste("Year n Query date: ", Sys.time(), sep="")) +
labs(colour="") +
theme_bw()
q
install.packages("qdap", lib="C:/Program Files/R/R-3.2.2/library")
myFunc<-function(argument){
articles1<-data.frame('Abstract'=AbstractText(fetch), 'Year'=YearPubmed(fetch))
abstracts1<-articles1[which(articles1$Year==argument),]
abstracts1<-data.frame(abstracts1)
abstractsOnly<-as.character(abstracts1$Abstract)
abstractsOnly<-paste(abstractsOnly, sep="", collapse="")
abstractsOnly<-as.vector(abstractsOnly)
abstractsOnly<-strip(abstractsOnly)
stsp<-rm_stopwords(abstractsOnly, stopwords = qdapDictionaries::Top100Words)
ord<-as.data.frame(table(stsp))
ord<-ord[order(ord$Freq, decreasing=TRUE),]
head(ord,20)
}
oSix<-myFunc(2006)
oSeven<-myFunc(2007)
all<-cbind(oSix, oSeven)
names(all)<-c("2006","freq","2007","freq")
res <- EUtilsSummary(topic, type="esearch", db="pubmed", datetype='pdat', mindate=2010, maxdate=2015)
t<-ArticleTitle(EUtilsGet(res)) # titles
y <- YearPubmed(EUtilsGet(res)) # pubicated
r <- YearReceived(EUtilsGet(res)) # received
date()
count<-table(y)
count<-as.data.frame(count)
names(count)<-c("Year", "Counts")
num <- data.frame(Year=count$Year, Counts=cumsum(count$Counts))
num$g <- "g"
names(num) <- c("Year", "Counts", "g")
q <- qplot(x=Year, y=Counts, data=count, geom="bar", stat="identity")
q <- q + ggtitle(paste("PubMed articles containing '", topic,            "' ", "= ", max(num$Counts), sep="")) +
ylab("Number of articles") +
xlab(paste("Year n Query date: ", Sys.time(), sep="")) +
labs(colour="") +
theme_bw()
q
myFunc<-function(argument){
articles1<-data.frame('Abstract'=AbstractText(fetch), 'Year'=YearPubmed(fetch))
abstracts1<-articles1[which(articles1$Year==argument),]
abstracts1<-data.frame(abstracts1)
abstractsOnly<-as.character(abstracts1$Abstract)
abstractsOnly<-paste(abstractsOnly, sep="", collapse="")
abstractsOnly<-as.vector(abstractsOnly)
abstractsOnly<-strip(abstractsOnly)
stsp<-rm_stopwords(abstractsOnly, stopwords = qdapDictionaries::Top100Words)
ord<-as.data.frame(table(stsp))
ord<-ord[order(ord$Freq, decreasing=TRUE),]
head(ord,20)
}
date
date()
date(format(YYMMDD))
output.file <- paste(format(Sys.Date(), ("%d-%b-%Y")), topics[i],".png", sep="")
output.path=NULL
class(output.path)
png(outputFile, bg="white", width=3250, height=2260, units="px", res=300)
date()
count<-table(y)
count<-as.data.frame(count)
names(count)<-c("Year", "Counts")
num <- data.frame(Year=count$Year, Counts=cumsum(count$Counts))
num$g <- "g"
names(num) <- c("Year", "Counts", "g")
q <- qplot(x=Year, y=Counts, data=count, geom="bar", stat="identity")
q <- q + ggtitle(paste("PubMed articles containing '", topics,            "' ", "= ", max(num$Counts), sep="")) +
ylab("Number of articles") +
xlab(paste("Year n Query date: ", Sys.time(), sep="")) +
labs(colour="") +
theme_bw()
q
dev.off()
topics <- c("aCGH","CGH", "copynumber", "WGS")
i=1
png(outputFile, bg="white", width=3250, height=2260, units="px", res=300)
date()
count<-table(y)
count<-as.data.frame(count)
names(count)<-c("Year", "Counts")
num <- data.frame(Year=count$Year, Counts=cumsum(count$Counts))
num$g <- "g"
names(num) <- c("Year", "Counts", "g")
q <- qplot(x=Year, y=Counts, data=count, geom="bar", stat="identity")
q <- q + ggtitle(paste("PubMed articles containing '", topics,            "' ", "= ", max(num$Counts), sep="")) +
ylab("Number of articles") +
xlab(paste("Year n Query date: ", Sys.time(), sep="")) +
labs(colour="") +
theme_bw()
q
dev.off()
getwd()
output.file
output.file <- paste(format(Sys.Date(), ("%d-%b-%Y")), topics[i],".png", sep="")
output.file
output.file <- paste(format(Sys.Date(), ("YMD")),"_",topics[i],".png", sep="")
output.file
output.file <- paste(format(Sys.Date(), ("%Y%M%D")),"_",topics[i],".png", sep="")
output.file
output.file <- paste(format(Sys.Date(), ("%y%M%D")),"_",topics[i],".png", sep="")
output.file
output.file <- paste(format(Sys.Date(), ("%Y %M%D")),"_",topics[i],".png", sep="")
output.file <- paste(format(Sys.Date(), ("%Y %M%D")),"_",topics[i],".png", sep="")
output.file
output.file <- paste(format(Sys.Date(), ("%Y %b %D")),"_",topics[i],".png", sep="")
output.file
output.file <- paste(format(Sys.Date(), ("%Y %m %D")),"_",topics[i],".png", sep="")
output.file
output.file <- paste(format(Sys.Date(), ("%Y %m %d")),"_",topics[i],".png", sep="")
output.file
output.file <- paste(format(Sys.Date(), ("%Y%m%d")),"_",topics[i],".png", sep="")
output.file
png(output.file, bg="white", width=3250, height=2260, units="px", res=300)
date()
count<-table(y)
count<-as.data.frame(count)
names(count)<-c("Year", "Counts")
num <- data.frame(Year=count$Year, Counts=cumsum(count$Counts))
num$g <- "g"
names(num) <- c("Year", "Counts", "g")
q <- qplot(x=Year, y=Counts, data=count, geom="bar", stat="identity")
q <- q + ggtitle(paste("PubMed articles containing '", topics,            "' ", "= ", max(num$Counts), sep="")) +
ylab("Number of articles") +
xlab(paste("Year n Query date: ", Sys.time(), sep="")) +
labs(colour="") +
theme_bw()
q
dev.off()
pubmed.search <- function(topics="pinkeye", output.path=NULL, date.range=c("2015","2013"))
{
for (i in 1:length(topics)){
res <- EUtilsSummary(topics[i], type="esearch", db="pubmed", datetype='pdat', mindate=min(date.range), maxdate=max(date.range))
t<-ArticleTitle(EUtilsGet(res)) # titles
y <- YearPubmed(EUtilsGet(res)) # pubicated
r <- YearReceived(EUtilsGet(res)) # received
output.file <- paste(format(Sys.Date(), ("%Y%m%d")),"_",topics[i],".png", sep="")
if(file.exists(output.path) == TRUE){
file <- file.path(output.path,output.file)
}
png(output.file, bg="white", width=3250, height=2260, units="px", res=300)
date()
count<-table(y)
count<-as.data.frame(count)
names(count)<-c("Year", "Counts")
num <- data.frame(Year=count$Year, Counts=cumsum(count$Counts))
num$g <- "g"
names(num) <- c("Year", "Counts", "g")
q <- qplot(x=Year, y=Counts, data=count, geom="bar", stat="identity")
q <- q + ggtitle(paste("PubMed articles containing '", topics,            "' ", "= ", max(num$Counts), sep="")) +
ylab("Number of articles") +
xlab(paste("Year n Query date: ", Sys.time(), sep="")) +
labs(colour="") +
theme_bw()
q
dev.off()
}
}
output.path <- "C:\\Documents and Settings\\h.vanessen\\Bureaublad\\pubmed search\\output.plots"
topics <- c("aCGH","CGH", "copynumber", "WGS")
pubmed.search(topics = topics, ouput.path=)
pubmed.search(topics = topics, ouput.path=output.path)
output.path <- "C:\\Documents and Settings\\h.vanessen\\Bureaublad\\pubmed search\\output.plots"
topics <- c("aCGH","CGH", "copynumber", "WGS")
pubmed.search(topics = topics, ouput.path=output.path)
output.path <- "C:\\Documents and Settings\\h.vanessen\\Bureaublad\\pubmed search\\output.plots"
file.exists(output.path)
pubmed.search <- function(topics="pinkeye", output.path=NULL, date.range=c("2015","2013"))
{
for (i in 1:length(topics)){
res <- EUtilsSummary(topics[i], type="esearch", db="pubmed", datetype='pdat', mindate=min(date.range), maxdate=max(date.range))
t<-ArticleTitle(EUtilsGet(res)) # titles
y <- YearPubmed(EUtilsGet(res)) # pubicated
r <- YearReceived(EUtilsGet(res)) # received
output.file <- paste(format(Sys.Date(), ("%Y%m%d")),"_",topics[i],".png", sep="")
if(file.exists(output.path) == TRUE){
file <- file.path(output.path,output.file)
}
png(output.file, bg="white", width=3250, height=2260, units="px", res=300)
date()
count<-table(y)
count<-as.data.frame(count)
names(count)<-c("Year", "Counts")
num <- data.frame(Year=count$Year, Counts=cumsum(count$Counts))
num$g <- "g"
names(num) <- c("Year", "Counts", "g")
q <- qplot(x=Year, y=Counts, data=count, geom="bar", stat="identity")
q <- q + ggtitle(paste("PubMed articles containing '", topics,            "' ", "= ", max(num$Counts), sep="")) +
ylab("Number of articles") +
xlab(paste("Year n Query date: ", Sys.time(), sep="")) +
labs(colour="") +
theme_bw()
q
dev.off()
}
}
plot.path <- "C:\\Documents and Settings\\h.vanessen\\Bureaublad\\pubmed search\\output.plots"
topics <- c("aCGH","CGH", "copynumber", "WGS")
pubmed.search(topics = topics, ouput.path=plot.path)
pubmed.search <- function(topics="pinkeye", output.path, date.range=c("2015","2013"))
{
for (i in 1:length(topics)){
res <- EUtilsSummary(topics[i], type="esearch", db="pubmed", datetype='pdat', mindate=min(date.range), maxdate=max(date.range))
t<-ArticleTitle(EUtilsGet(res)) # titles
y <- YearPubmed(EUtilsGet(res)) # pubicated
r <- YearReceived(EUtilsGet(res)) # received
output.file <- paste(format(Sys.Date(), ("%Y%m%d")),"_",topics[i],".png", sep="")
output.file <- file.path(output.path,output.file)
png(output.file, bg="white", width=3250, height=2260, units="px", res=300)
date()
count<-table(y)
count<-as.data.frame(count)
names(count)<-c("Year", "Counts")
num <- data.frame(Year=count$Year, Counts=cumsum(count$Counts))
num$g <- "g"
names(num) <- c("Year", "Counts", "g")
q <- qplot(x=Year, y=Counts, data=count, geom="bar", stat="identity")
q <- q + ggtitle(paste("PubMed articles containing '", topics,            "' ", "= ", max(num$Counts), sep="")) +
ylab("Number of articles") +
xlab(paste("Year n Query date: ", Sys.time(), sep="")) +
labs(colour="") +
theme_bw()
q
dev.off()
}
}
pubmed.search(topics = topics, ouput.path=plot.path)
pubmed.search(topics = topics, output.path=plot.path)
