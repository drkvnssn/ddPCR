plot(CGH)
dev.off()
}
if(filetype==".pdf"){
pdf(paste(output,filetype,sep=""))
plot(CGH)
dev.off()
}
}
parseAgilent<- function(files=NULL,design=NULL,endPos=TRUE,data_output="raw_output",data_type=".txt",plot_output="normalized_plots",plot_type=".ps"){
path <- '.'
if (is.null(design)) {
design <- getDesign(path)
}
if (is.null(design)) {
if (.Platform$OS.type == "windows") {
files <- choose.files(default=paste(getwd(),"/","*.*",sep=""))
} else {
files <- list.files(pattern='\\.txt$')
}
design <- makeDesign(files=files)
}
filesInDesign <- unique(c(design[,3],design[,5]))
if(!all(filesInDesign %in% list.files(path))){
stop("Error in parseAgilent: Files in Design File cannot be found in path.\n")
design
}
gc()
files <- unique(c(design[,3],design[,5]))
if(length(files)==0)
stop("Error in parseAgilent: file.choose(): File choice cancelled.")
path <- dirname(files[1])
setwd(path)
files = basename(files)
index <- grep(paste(c("raw_output","cgh_output","design","normalized_plots"),collapse="|"),files)
if (length(index) != 0){
files <- files[-index]
}
index <- grep(".txt",files)
files <- files[index]
rm(index)
gc()
files <- sort(files)
headers <- tapply(files,1:length(files),getHeader)
headers <- lapply(headers,unlist)
uniqueHeaders <- unique(headers)
if(length(uniqueHeaders)!=1){
agilentDesign <- matrix(unlist(uniqueHeaders),4,length(uniqueHeaders))[4,]
if(length(unique(agilentDesign))!=1){
stop("Error in parseAgilent: Incompatible files: files use differrent Agilent Designs.")
}else{
genomeBuild <- matrix(unlist(uniqueHeaders),4,length(uniqueHeaders))[3,]
genomeBuild <- gsub(":.*","",genomeBuild)
if(length(unique(genomeBuild))!=1){
stop("Error in parseAgilent: Incompatible files: files use different Genome Builds.")
}
}
}
gc()
headersM <- matrix((unlist(headers)),4,length(headers))
uniqueHeadersM <- matrix((unlist(uniqueHeaders)),4,length(uniqueHeaders))
indexorder <- match(paste(headersM[1,],headersM[2,]),paste(uniqueHeadersM[1,],uniqueHeadersM[2,]))
rm(headers,uniqueHeaders,headersM,uniqueHeadersM)
gc()
indextoindex <- as.numeric(rownames(unique(as.data.frame(indexorder))))
filestoindex <- files[indextoindex]
if (length(indexorder) != 1)
indexorder <- indexorder[-indextoindex]
if (length(files) != 1)
files <- files[-indextoindex]
for (i in 1:length(filestoindex)){
arrayLines <- getArrayRows(filestoindex[i])
arrayCols <- getArrayCols(filestoindex[i],arrayLines[[1]])
arrayData <- readArray(filestoindex[i],arrayLines[[1]],arrayLines[[2]],arrayCols[[1]],arrayCols[[2]])
controlSpotIndex <- findControlSpots(arrayData)
arrayData <- filterControlSpots(controlSpotIndex,arrayData)
unmappedSpotIndex <- findUnmappedSpots(arrayData)
arrayData <- filterUnmappedSpots(unmappedSpotIndex,arrayData)
arrayData <- avarageDuplicateSpots(arrayData)
channels <- substractBackGround(arrayData)
assignTemp(filestoindex[i],channels)
filestoread <- files[indexorder==i]
for (j in 1:length(filestoread)){
arrayData <- readArray(filestoread[j],arrayLines[[1]],arrayLines[[2]],arrayCols[[1]],arrayCols[[2]])
arrayData <- filterControlSpots(controlSpotIndex,arrayData)
arrayData <- filterUnmappedSpots(unmappedSpotIndex,arrayData)
arrayData <- avarageDuplicateSpots(arrayData)
channels <- substractBackGround(arrayData)
assignTemp(filestoread[j],channels)
gc()
}
gc()
Names <- arrayData[,1]
chromosomes <- getChromosome(arrayData,endPos)
arrays <- cbind(Names,chromosomes)
gc()
for (k in 1:dim(design)[1]){
fileOne <- getTemp(design[k, "File 1"])
fileTwo <- getTemp(design[k, "File 2"])
channelOne <- fileOne[,design[k,"Channel 1"]]
channelTwo <- fileTwo[,design[k,"Channel 2"]]
logRatio <- logTransformChannels(channelOne, channelTwo)
arrays <- cbind(arrays, logRatio)
}
gc()
if(endPos==TRUE){
colnames(arrays) <- c(colnames(arrays)[1:4],design[,1])
}else{
colnames(arrays) <- c(colnames(arrays)[1:3],design[,1])
}
arrays <- arrays[order(as.numeric(arrays[, 3])), ]
arrays <- arrays[order(as.numeric(arrays[, 2])), ]
if(data_type==".txt" || data_type=="both"){
write.table(arrays, paste(data_output,".txt",sep=""), quote = FALSE, sep = "\t", row.names = FALSE)
}
cgh.arrays <- cghRaw(arrays)
rm(arrays)
gc()
sampleNames(cgh.arrays) <- design[,1]
cgh.arrays <- preprocess(cgh.arrays)
if(data_type==".txt" || data_type=="both"){
printCGH(path,cgh.arrays,paste("Imp_",data_output,".txt",sep=""))
}
cgh.arrays <- normalize(cgh.arrays,cellularity=rep(1,ncol(cgh.arrays)))
if(data_type==".txt" || data_type=="both"){
printCGH(path,cgh.arrays,paste("Norm_Imp_",data_output,".txt",sep=""))
}
if(plot_type==".ps" || plot_type==".pdf"){
parseAgilentPlot()
#	plotCGH(path,cgh.arrays,plot_type,plot_output)
}
if(data_type==".rdata" || data_type=="both"){
save(cgh.arrays,file=paste(data_output,".Rdata",sep=""))}
rm(cgh.arrays)
gc()
}
}
parseAgilentPlot <- function(){
slideType <- ""
slideType <- (strsplit(design[1,3], "_"))
slideType <- slideType$'File 1'[2]
slideType <- substr(x = slideType, start = 3, stop = 7)
if (slideType == "14950"){slideType <- "Agilent 44k"}
if (slideType == "39770"){slideType <- "Agilent 105k, Genetica Erasmus"}
if (slideType == "22522"){slideType <- "Agilent 180k"}
if (slideType == "23363"){slideType <- "Agilent 180k, Genetica"}
if (slideType == "14693"){slideType <- "Agilent 244k"}
### SELECT A FILE TO PROCESS
inputFile <- "Norm_Imp_raw_output.txt"
### READ FIRST LINE AND DETERMINE ROWS & COLUMNS
firstLine <- read.table(inputFile,skip=0,fill=TRUE, header=TRUE, sep="\t",quote="",nrows=1)
cols <- length(firstLine)
rows <- length(count.fields(inputFile))
### DETERMINE NAME, CHROM, START, & END COLUMNS
cc <- rep(list(NULL),cols); cc[4:5] <- c(as.double(0))
columnStartEnd <-scan(file=inputFile,what=cc,sep="\t",quote="",skip=1,nlines=rows,flush=TRUE,fill=TRUE,comment.char="")
column4 <- mean(columnStartEnd[[4]]);column5 <- mean(columnStartEnd[[5]])
if (column4 > 10000 & column5 < 2){end <- 4};if (column4 < 2 & column5 < 2){end <- 3}
### GET NUMBER OF CHROMOSOMES & GET SAMPLE NAMES
cc <- rep(list(NULL),cols); cc[2] <- c(as.double(0))
cat("Chromosomes: ");Chromosomes <-scan(file=inputFile,what=cc,sep="\t",quote="",skip=1,nlines=rows,flush=TRUE,fill=TRUE,comment.char="")
nChroms 	<- unique(Chromosomes[[2]])
nSamples 	<- length(firstLine)-end
sampleNames <- colnames(firstLine)[(end+1):length(firstLine)]
### CREATE LINE matrix
lijnen      <- matrix(data=0, nrow=length(nChroms), ncol=3, byrow=FALSE, dimnames=NULL)
colnames(lijnen) <- c("min","Totaal","Midden")
### CREATE LINE POSITIONS OF NORMAL PROFILES
cc <- rep(list(NULL),cols); cc[3] <- c(as.double(0))
cat("Probe positions: ");Positions <- scan(file=inputFile,what=cc,sep="\t",quote="",skip=1,nlines=rows,flush=TRUE,fill=TRUE,comment.char="")
for (i in 1:length(nChroms)){
lijnen[i,1] <- sum(Chromosomes[[2]] == (unique(Chromosomes[[2]]))[i])} ### adds total number of features to the list
lijnen[,2] <- cumsum(as.numeric(lijnen[,1]))
lijnen[1,3] <-lijnen[1,1]*0.5
for (i in 2:length(nChroms)-1){
lijnen[(i+1),3] <- mean(lijnen[i:(i+1),2])}
eind <- lijnen[length(nChroms),2]+60
### SMALL ADJUSTMENTS FOR PLOTTING
if(length(nChroms) > 22){nChroms2 <- as.integer(c(1:13,"",15,"",17,"",19,"",21,"",23,""))}
if(length(nChroms) < 23){nChroms2 <- as.integer(nChroms)}
if(slideType == "Agilent 105k, Genetica Erasmus"){nChroms2 <- as.integer(c(1:10,"",12,"",14:20,"",22:24))}
for (j in 1:nSamples){
### READ A SINGLE COLUMN FROM THE INPUTFILE
cc <- rep(list(NULL),cols); cc[end+j] <- c(as.double(0))
cat(sampleNames[j],": ");features <- scan(file=inputFile,what=cc,sep="\t",quote="",skip=1,nlines=rows,flush=TRUE,fill=TRUE,comment.char="")
### FIND AMPLIFICATIONS & DELETIONS
Amp <- rep(NA,rows);Del <- rep(NA,rows);een <- 0; twee <- 0
for (h in 1:(rows-1)){twee <- features[[end+j]][h]
if (((een+twee)/2) >= 5){Amp[h] <- 5.15}
if (((een+twee)/2) < -2.2){Del[h] <- -2.15}
een <- twee}
### CREATE OUTPUT FILE NAME
outputFile <- paste("Norm_plot_",sampleNames[j],".png",sep="")
png(outputFile, bg="white", width=3250, height=2260, units="px", res=300)
### PLOT THE DATA
plot(0,type="n",col="grey",xlab="",ylab="",xaxt="n",yaxt="n",xlim=c(0,rows),ylim=c(-2,5),main=sampleNames[j])
axis(2,at=seq(-2,5,1),labels=seq(-2,5,1),cex.axis=0.75)
mtext("Chromosomes",1,2.5,las=1,cex=1.4)
mtext("log2ratio",2,3,at=1.5,las=0,cex=1.4)
mtext(format(Sys.Date(), ("%d-%b-%Y")),side=4, cex=0.5,adj = 1)
mtext(slideType,side=3, cex=0.75,adj = 0)
abline(h=0)
points(features[[end+j]], type="p", col="BLACK", cex=0.05, ylim=c(-2,5))
abline(v=0, col="grey", lty="dashed")
abline(v=eind, col="grey", lty="dashed")
for (d in 1:length(nChroms)){
abline(v=lijnen[d,2], col="grey", lty="dashed")
axis(1,at=lijnen[d,3],labels=nChroms2[d],cex.axis=0.7)}
points(Amp, col="GREEN", cex=0.5, pch=24, bg="GREEN",ylim=c(-2,5))
points(Del, col="RED", cex=0.5, pch=25, bg="RED",ylim=c(-2,5))
dev.off()}
if (j == max(nSamples)){cat("Finished !!!\n")}
#### REMOVE ALL ITEMS FROM SCRIPT
rm(inputFile)
rm(firstLine)
rm(cols)
rm(rows)
rm(cc)
rm(Chromosomes)
rm(nChroms)
rm(nSamples)
rm(sampleNames)
rm(lijnen)
rm(eind)
rm(outputFile)
rm(features)
}
####################################
makeMenu <- function(){
winMenuAdd("Parse Agilent")
winMenuAddItem("Parse Agilent", "Run", "menuParseAgilent(getTemp('files'),getTemp('design'))")
winMenuAddItem("Parse Agilent", "-", "")
winMenuAddItem("Parse Agilent", "Open Agilent FE", "menuOpenFE()")
winMenuAddItem("Parse Agilent", "Open design", "design <- menuOpenDesign(getTemp('file'))")
winMenuAddItem("Parse Agilent", "Make design", "design <- menuMakeDesign(getTemp('files'))")
winMenuAddItem("Parse Agilent", "--", "")
winMenuAddItem("Parse Agilent", "Data output", "menuOutputData()")
winMenuAddItem("Parse Agilent", "Plot output", "menuOutputPlot()")
}
menuParseAgilent <- function(files,design){
data_output <- getTemp("dataFile")
data_type <- getTemp("dataFileType")
plot_output <- getTemp("plotFile")
plot_type <- getTemp("plotFileType")
data_filetype <- data_type
if(data_type=="both"){
data_filetype <- ".txt & .rdata"
}
cat("Running Parse Agilent:\n")
cat("Input Settings:\n\n")
cat("Files:\n")
print(files)
cat("\n")
cat("Design:\n")
print(design)
cat("\nOutput Settings:\n\n")
cat("Data: File Name: ",data_output,"\n")
cat("Data: File Type: ",data_filetype,"\n\n")
cat("Plot: File Name: ",plot_output,"\n")
cat("Plot: File Type: ",plot_type,"\n")
parseAgilent(files=files,design=design,data_output=data_output,data_type=data_type,plot_output=plot_output,plot_type=plot_type)
parseAgilentPlot()
}
menuOutputPlot <- function(){
OnOK <- function() {
assignTemp("plotFile",as.character(tclvalue(plotFile)))
assignTemp("plotFileType",as.character(tclvalue(plotFileType)))
tkdestroy(tt)
}
tt <- tktoplevel()
tkwm.title(tt, "Plot")
if (existsTemp("plotFileType")){
plotFileType <- tclVar(getTemp("plotFileType"))
}else{
plotFileType <- tclVar("ps")
}
if (existsTemp("plotFile")) {
plotFile <- tclVar(getTemp("plotFile"))
}else {
plotFile <- tclVar("normalized_plots")
}
rb1 <- tkradiobutton(tt)
firstLabel <- tklabel(tt, text = "PDF (.pdf)")
rb2 <- tkradiobutton(tt)
secondLabel <- tklabel(tt, text = "PostScript (.ps)")
rb3 <- tkradiobutton(tt)
thirdLabel <- tklabel(tt, text = "None")
tkconfigure(rb1, variable = plotFileType, value = ".pdf")
tkconfigure(rb2, variable = plotFileType, value = ".ps")
tkconfigure(rb3, variable = plotFileType, value = "none")
entry <- tkentry(tt, width = "30", textvariable = plotFile)
OK.but <- tkbutton(tt, text = "OK", command = OnOK)
tkgrid(tklabel(tt, text = "File Name:"), row=1, sticky = "e")
tkgrid(entry, sticky = "w",row=1, column=1, columnspan=5)
tkgrid(tklabel(tt, text = "File Type:"), firstLabel, rb1, secondLabel, rb2, thirdLabel, rb3, sticky = "e")
tkgrid(OK.but, columnspan = "5")
tkfocus(tt)
}
menuOutputData <- function(){
OnOK <- function() {
assignTemp("dataFile",as.character(tclvalue(dataFile)))
assignTemp("dataFileType",as.character(tclvalue(dataFileType)))
tkdestroy(tt)
}
tt <- tktoplevel()
tkwm.title(tt, "Data")
if (existsTemp("dataFileType")){
dataFileType <- tclVar(getTemp("dataFileType"))
}else{
dataFileType <- tclVar("both")
}
if (existsTemp("dataFile")) {
dataFile <- tclVar(getTemp("dataFile"))
}else {
dataFile <- tclVar("raw_output")
}
rb1 <- tkradiobutton(tt)
firstLabel <- tklabel(tt, text = "Data (.Rdata)")
rb2 <- tkradiobutton(tt)
secondLabel <- tklabel(tt, text = "Text (.txt)")
rb3 <- tkradiobutton(tt)
thirdLabel <- tklabel(tt, text = "Both (.Rdata & .txt)")
rb4 <- tkradiobutton(tt)
fourthLabel <- tklabel(tt, text = "None")
tkconfigure(rb1, variable = dataFileType, value = ".rdata")
tkconfigure(rb2, variable = dataFileType, value = ".txt")
tkconfigure(rb3, variable = dataFileType, value = "both")
tkconfigure(rb4, variable = dataFileType, value = "none")
entry <- tkentry(tt, width = "30", textvariable = dataFile)
OK.but <- tkbutton(tt, text = "OK", command = OnOK)
tkgrid(tklabel(tt, text = "File Name:"), row=1, sticky = "e")
tkgrid(entry, sticky = "w",row=1, column=1, columnspan=5)
tkgrid(tklabel(tt, text = "File Type:"), firstLabel, rb1, secondLabel, rb2, thirdLabel, rb3, fourthLabel,rb4, sticky = "e")
tkgrid(OK.but, columnspan = "5")
tkfocus(tt)
}
menuOpenDesign <- function(file){
if(is.null(file)){
file <- choose.files(default=paste(getwd(),"/","*.*",sep=""),multi=FALSE)
}
if(length(file)!=0){
path <- strsplit(file,"\\\\")[[1]]
path <- paste(path[1:length(path)-1],"\\",collapse="",sep="")
file <- substr(file,nchar(path)+1,nchar(file))
setwd(path)
design <- getDesign(path,file)
assignTemp("design",design)
}else{
cat("Error in parseAgilent: file.choose(): File choice cancelled.")
}
}
menuMakeDesign <- function(files){
if(is.null(files)){
files <- choose.files(default=paste(getwd(),"/","*.*",sep=""))
}
if(length(files)!=0){
path <- strsplit(files[1],"\\\\")[[1]]
path <- paste(path[1:length(path)-1],"\\",collapse="",sep="")
files <- substr(files,nchar(path)+1,nchar(files))
files <- sort(files)
setwd(path)
design <- makeDesign(files)
assignTemp("design",design)
}else{
cat("Error in parseAgilent: file.choose(): File choice cancelled.")
}
}
menuOpenFE <- function(){
files <- choose.files(default=paste(getwd(),"/","*.*",sep=""))
if(length(files)!=0){
path <- strsplit(files[1],"\\\\")[[1]]
path <- paste(path[1:length(path)-1],"\\",collapse="",sep="")
setwd(path)
files <- sort(files)
assignTemp("files",files)
}else{
cat("Error in parseAgilent: file.choose(): File choice cancelled.")
}
}
assignTemp("files",NULL)
assignTemp("file",NULL)
assignTemp("design",NULL)
assignTemp("dataFile","raw_output")
assignTemp("dataFileType","both")
assignTemp("plotFile","normalized_plots")
assignTemp("plotFileType","none")
if(.Platform$OS.type == "windows") {
makeMenu()
} else {
parseAgilent()
}
# EOF
input.path <- "D:\\R SCRIPTS\\ddPCR analysis\\input.data\\20151202 EGFR spike-in sm_2015-12-02-15-25"
error.file <- list.files(input.path, pattern = "Error.log")
error.file
csv.file <- gsub(pattern = "Error.log", replacement = ".csv",x = error.file)
csv.file
experiment.data <-  read.csv(file = csv.file,header = TRUE, sep=",")
error.file <- list.files(input.path, pattern = "Error.log",full.names = TRUE)
csv.file <- gsub(pattern = "Error.log", replacement = ".csv",x = error.file)
if(file.exists(csv.file) == TRUE)
{
experiment.data <-  read.csv(file = csv.file,header = TRUE, sep=",")
}
experiment.data
summary(experiment.data)
overview(experiment.data)
unique(experiment.data$Target)
unique(gsub(pattern = " wt", replacement = "", x=experiment.data$Target))
targets <- unique(gsub(pattern = " wt", replacement = "", x=experiment.data$Target))
targets
targets <- unique(gsub(pattern != " wt", replacement = "", x=experiment.data$Target))
targets <- unique(gsub(pattern = " wt", replacement = "", x=experiment.data$Target))
wells <- unique(experiment.data$Well)
wells
experiment.name <- gsub(pattern = "Error.log", replacement = "",x = error.file)
csv.file <- paste(experiment.name,".csv", sep="")
csv.file
error.file <- list.files(input.path, pattern = "Error.log",full.names = FALSE)
file.exists(file.path(input.file,csv.file)) == TRUE
file.exists(file.path(input.path,csv.file)) == TRUE
error.file <- list.files(input.path, pattern = "Error.log",full.names = FALSE)
experiment.name <- gsub(pattern = "Error.log", replacement = "",x = error.file)
csv.file <- paste(experiment.name,".csv", sep="")
if(file.exists(file.path(input.path,csv.file)) == TRUE)
{
experiment.data <-  read.csv(file = csv.file,header = TRUE, sep=",")
}
experiment.data <-  read.csv(file = file.path(input.path,csv.file),header = TRUE, sep=",")
targets <- unique(gsub(pattern = " wt", replacement = "", x=experiment.data$Target))
wells <- unique(experiment.data$Well)
wells
paste(experiment.name,"_",well,"_Amplitude.csv")
paste(experiment.name,"_",wells,"_Amplitude.csv",sep="")
file.path(input.path,paste(experiment.name,"_",wells,"_Amplitude.csv",sep=""))
file.exists(
file.path(input.path,paste(experiment.name,"_",wells,"_Amplitude.csv",sep=""))
)
experiment.data
experiment.data[1:10,1:6]
experiment.data$Sample
control.data=list(c("positive","pos control"),c("TE buffer","water"))
control.data
experiment.data$Sample %in% control.data
dim(experiment.data)
experiment.data$Sample
experiment.data$Sample %in% control.data[[1]]
experiment.data$Sample %in% control.data[[2]]
control.data=list(pos=c("positive","pos control"),ntc=c("TE buffer","water"))
control.data
names(control.data)
results <- rep("sample",length(x))
experiment.data$Sample -> x
results <- rep("sample",length(x))
results
x <- tolower(x)
control.data <- tolower(control.data)
control.data
x <- tolower(x)
x
i=1
results[results %in% tolower(control.data[[i]])]
n
x %in% tolower(control.data[[i]])
x
control.data[[i]]
results[x %in% control.data[[i]]]
control.data[[i]]
control.data=list(pos=c("positive","pos control"),ntc=c("te buffer","water"))
control.data[[i]]
tolower(control.data[[i]])
results[x %in% tolower(control.data[[i]])]
x %in% tolower(control.data[[i]])
results[x %in% tolower(control.data[[i]])] <- names(control.data)[i]
for(i in 1:length(names(control.data)))
{
results[x %in% tolower(control.data[[i]])] <- names(control.data)[i]
}
results
get.controls <- function(x, control.data=list(pos=c("positive","pos control"),ntc=c("te buffer","water")))
{
results <- rep("sample",length(x))
x <- tolower(x)
for(i in 1:length(names(control.data)))
{
results[x %in% tolower(control.data[[i]])] <- names(control.data)[i]
}
}
get.controls(experiment.data$Sample, list(c(H1975),c(water)))
get.controls(experiment.data$Sample, list(c(D1975),c(water)))
get.controls(experiment.data$Sample, list(c(h1975),c(water)))
get.controls <- function(x, pos=c("positive","pos control"), ntc=c("te buffer","water"), neg="")
{
results <- rep("sample",length(x))
x <- tolower(x)
results[x %in% tolower(pos)] <- "pos"
results[x %in% tolower(ntc)] <- "ntc"
results[x %in% tolower(neg)] <- "neg"
}
get.controls(experiment.data$Sample, pos="h1975")
get.controls <- function(x, pos=c("positive","pos control"), ntc=c("te buffer","water"), neg="")
{
results <- rep("sample",length(x))
x <- tolower(x)
results[x %in% tolower(pos)] <- "pos"
results[x %in% tolower(ntc)] <- "ntc"
results[x %in% tolower(neg)] <- "neg"
return(results)
}
get.controls(experiment.data$Sample, pos="h1975")
experiment.data$Sample
head(experiment.data)
