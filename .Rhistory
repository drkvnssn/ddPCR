# - [ ] create a matrix to hold all the data
all.sample.data <- matrix(data = 0,nrow = dim(unique.data)[1],ncol = nSamples)
colnames(all.sample.data) <- sample.names
#### parse first half of the set
pb   <- txtProgressBar(1, nSamples, style=3) # add outside loop to print process bar during for loop
for(i in 1:nSamples)
{
data <- read.table(file = input.files[i], sep="\t", header=FALSE, skip=1)
colnames(data) <- c("Chromosome","Start","End","Ratio")
sample.data <- data.table(data, key=keys,keep.rownames = TRUE)
sample.data[unique.data, Bounced := 1L]
all.sample.data[,i] <- sample.data[sample.data$Bounced == 1,Ratio]
output.file <- file.path(path$output.data,"sample_",first.sample,"-",last.sample,"_Stanford.txt",sep="")
setTxtProgressBar(pb, i) # add inside loop
if(i %% 5 == 0 | i == nSamples){write.table(x = unique.data,file = output.file,quote = FALSE,sep = "\t",row.names = FALSE)
# - [ ] is the unique data still in the wrong format?
as.character(unique(sample.data$Chromosome))
}
}
path$output.data
list.files(path$output.data)
output.file <- file.path(path$output.data,paste("sample_",first.sample,"-",last.sample,"_Stanford.txt",sep=""))
output.file
output.file <- file.path(path$output.data,paste("sample_",first.sample,"-",last.sample,"_Stanford.txt",sep=""))
setTxtProgressBar(pb, i) # add inside loop
if(i %% 5 == 0 | i == nSamples){write.table(x = unique.data,file = output.file,quote = FALSE,sep = "\t",row.names = FALSE)
# - [ ] is the unique data still in the wrong format?
as.character(unique(sample.data$Chromosome))
}
pb   <- txtProgressBar(1, nSamples, style=3) # add outside loop to print process bar during for loop
for(i in 1:nSamples)
{
data <- read.table(file = input.files[i], sep="\t", header=FALSE, skip=1)
colnames(data) <- c("Chromosome","Start","End","Ratio")
sample.data <- data.table(data, key=keys,keep.rownames = TRUE)
sample.data[unique.data, Bounced := 1L]
all.sample.data[,i] <- sample.data[sample.data$Bounced == 1,Ratio]
output.file <- file.path(path$output.data,paste("sample_",first.sample,"-",last.sample,"_Stanford.txt",sep=""))
setTxtProgressBar(pb, i) # add inside loop
if(i %% 5 == 0 | i == nSamples){write.table(x = unique.data,file = output.file,quote = FALSE,sep = "\t",row.names = FALSE)
# - [ ] is the unique data still in the wrong format?
as.character(unique(sample.data$Chromosome))
}
}
length(nSamples)
create.folders(path=input.path,c("archive","input.data","output.data","output.plot","scripts","scripts.log"))
path <- set.paths(input.path)
log.file <- paste(format(Sys.time(), "%Y%m%d-%H%M"),"_script_checklist.md",sep="")
make_doc(path=path$scripts,dest = file.path(path$scripts.log,log.file))
# list all the files in the data set
input.files <- list.files(path = path$input.data,full.names = TRUE, pattern = ".txt.bedGraph.txt")
first.sample <- 1
last.sample <- 100
nSamples <- (last.sample-first.sample)+1
input.files <- input.files[first.sample:last.sample]
sample.names <- gsub(x = basename(input.files), pattern = ".txt.bedGraph.txt", replacement = "")
# read unique probes
unique.probes <- read.table(file = file.path(path$output.data,"matching_probes_all_samples.txt"),header = TRUE,sep = "\t")
library(data.table)
keys <- c("Chromosome", "Start")
unique.data <- data.table(unique.probes, key=keys)
# - [ ] store the chromosome, start, end locations after probe selection
data <- read.table(file = input.files[i], sep="\t", header=FALSE, skip=1)
# - [ ] create a matrix to hold all the data
all.sample.data <- matrix(data = 0,nrow = dim(unique.data)[1],ncol = nSamples)
colnames(all.sample.data) <- sample.names
#### parse first half of the set
pb   <- txtProgressBar(1, nSamples, style=3) # add outside loop to print process bar during for loop
for(i in 1:nSamples)
{
data <- read.table(file = input.files[i], sep="\t", header=FALSE, skip=1)
colnames(data) <- c("Chromosome","Start","End","Ratio")
sample.data <- data.table(data, key=keys,keep.rownames = TRUE)
sample.data[unique.data, Bounced := 1L]
all.sample.data[,i] <- sample.data[sample.data$Bounced == 1,Ratio]
output.file <- file.path(path$output.data,paste("sample_",first.sample,"-",last.sample,"_Stanford.txt",sep=""))
setTxtProgressBar(pb, i) # add inside loop
if(i %% 5 == 0 | i == nSamples){write.table(x = unique.data,file = output.file,quote = FALSE,sep = "\t",row.names = FALSE)
# - [ ] is the unique data still in the wrong format?
print(as.character(unique(sample.data$Chromosome)))
}
}
dim(unique.data)
dim(all.sample.data)
probe.chrom <- gsub(pattern = "chrX",replacement = "23",unique.data[,1])
probe.chrom <- gsub(pattern = "chrY",replacement = "24",probe.chrom)
probe.chrom <- gsub(pattern = "chr",replacement = "",probe.chrom)
# - [ ] combine chromosome, start, end for probeName column
probe.name <- paste(probe.chrom,":",unique.data[,2],"-",unique.data[,2],sep="")
temp <- cbind(probe.name,probe.chrom,unique.data[,2:3],all.sample.data)
dim(all.sample.data)
length(probe.name)
probe.name
head(probe.chrom)
probe.chrom <- gsub(pattern = "chrX",replacement = "23",unique.data$Chromosome)
head(probe.chrom)
probe.chrom <- gsub(pattern = "chrY",replacement = "24",probe.chrom)
probe.chrom <- gsub(pattern = "chr",replacement = "",probe.chrom)
probe.name <- paste(probe.chrom,":",unique.data[,2],"-",unique.data[,2],sep="")
head(probe.name)
probe.name <- paste(probe.chrom,":",unique.data$Start,"-",unique.data$End,sep="")
head(probe.name)
unique(unique.data$Chromosome)
unique(probe.chrom)
temp <- cbind(probe.name,probe.chrom,unique.data$Start,unique.data$End,all.sample.data)
input.path <- "D:\\R SCRIPTS\\ddPCR analysis" #work
project <- "Test_EGFR_2015-11-03-16-39"
# FUNCTIONS
get_comments = function(filename){
is_assign = function(expr) as.character(expr) %in% c("<-", "<<-", "=", "assign")
is_function = function(expr) is.call(expr) && is_assign(expr[[1L]]) && is.call(expr[[3L]]) && expr[[3L]][[1L]] == quote(`function`)
src = parse(filename, keep.source = TRUE)
functions = Filter(is_function, src)
fun_names = as.character(lapply(functions, `[[`, 2L))
# - [x] extract all comments
r = setNames(lapply(attr(functions, "srcref"), grep, pattern = "^\\s*#", value = TRUE), fun_names)
# - [x] remove leading spaces and comment sign '#'
r = lapply(r, function(x) sub(pattern = "^\\s*#", replacement = "", x = x))
# - [x] keep only markdown checkboxes like " - [ ] " or " - [x] "
r = lapply(r, function(x) x[nchar(x) >= 7L & substr(x, 1L, 7L) %in% c(" - [ ] "," - [x] ")])
# - [x] return only non empty results
r[as.logical(sapply(r, length))]
}
make_doc = function(path = "R", files, package, dest){
if(!missing(package)) path = system.file(path, package=package)
stopifnot(file.exists(path))
if(missing(files)) files = list.files(path, pattern = "\\.R$")
if(!length(files)){
warning(paste0("No files to process in ",path,"."))
return(invisible())
}
if(!all(sapply(file.path(path, files), file.exists))) stop(paste0("Processing stopped as some files not exists: ", paste(files[!sapply(file.path(path, files), file.exists)], collapse=", "),"."))
r = setNames(lapply(file.path(path, files), get_comments), files)
r = r[as.logical(sapply(r, length))]
if(missing(dest)) return(r)
if(!file.exists(dirname(dest))) dir.create(dirname(dest), recursive=TRUE)
if(file.exists(dest)) file.rename(dest, paste0(dest,"_backup"))
invisible(lapply(names(r), function(filename){
cat(c("",paste("###", filename)), sep = "\n", file = dest, append = file.exists(dest))
lapply(names(r[[filename]]), function(funname){
cat(c("",paste("####", funname),""), sep = "\n", file = dest, append = TRUE)
cat(r[[filename]][[funname]], sep = "\n", file = dest, append = TRUE)
})
}))
if(file.exists(paste0(dest,"_backup"))) file.remove(paste0(dest,"_backup"))
invisible(dest)
}
create.folders <- function(path,folders){
# - [x] set path
# - [x] set folders
# - [x] for loooooop
for(i in 1:length(folders))
{
if(!file.exists(file.path(path,as.character(folders[i]))))
{
dir.create(file.path(path,as.character(folders[i])))
}
}
# - [x] check file.exists
# - [x] create folder
# - [x] does it work?
}
set.paths <- function(path=""){
if(path == "" | class(path) == "numeric"){ stop
} else {
# - [x] set paths
paths <- list(archive=file.path(path,"archive"),
input.data=file.path(path,"input.data"),
output.data=file.path(path,"output.data"),
output.plot=file.path(path,"output.plot"),
scripts=file.path(path,"scripts"),
scripts.log= file.path(path,"scripts.log"))
# - [x] make list
return(paths)
# - [x] return list
}
}
# RUN FUNCTIONS
create.folders(path=input.path,c("archive","input.data","output.data","output.plot","scripts","scripts.log"))
path <- set.paths(input.path)
log.file <- paste(format(Sys.time(), "%Y%m%d-%H%M"),"_script_checklist.md",sep="")
make_doc(path=path$scripts,dest = file.path(path$scripts.log,log.file))
design <- matrix(data = "", nrow = length(amplitude.files), ncol = 8)
amplitude.files <- list.files(path = path, pattern = "Amplitude.csv")
path
input.path <- file.path(path$input.data,project)
amplitude.files <- list.files(path = input.path, pattern = "_Amplitude.csv")
amplitude.files
sample.names <- gsub(pattern = "_Amplitude.csv",x = amplitude.files)
sample.names <- gsub(pattern = "_Amplitude.csv",x = amplitude.files, replacement = "")
ssample.int()
ssample.n
sample.names
design <- matrix(data = "", nrow = length(amplitude.files), ncol = 8)
design <- matrix(data = "", nrow = length(amplitude.files), ncol = 4)
colnames(design) <- c("Name","File","Type","Probe")
design[,1] <- sample.names
design[,2] <- amplitude.files
design[,1] <- sample.names
design[,2] <- amplitude.files
design[,3] <- "pos-neg-sample"
output.file <- file.path(path,"design.txt")
output.file <- file.path(input.path,"design.txt")
output.file
write.table(file = output.file,x = design,quote = "",sep = "\t",row.names = FALSE)
write.table(file = output.file,x = design,quote = FALSE,sep = "\t",row.names = FALSE)
design[,4] <- "probe"
output.file <- file.path(input.path,"design.txt")
write.table(file = output.file,x = design,quote = FALSE,sep = "\t",row.names = FALSE)
design[,4] <- "probe_name"
output.file <- file.path(input.path,"design.txt")
write.table(file = output.file,x = design,quote = FALSE,sep = "\t",row.names = FALSE)
probe.data <- list( probe.name = "probe name",
date = "current date",
BreakPoint1 = c("channel1", "channel2"),
BreakPoint2 = c("channel1", "channel2"),
PosClusterAmp = c("channel1", "channel2"),
NegClusterAmp = c("channel1", "channel2"),
PosClusterSD = c("channel1", "channel2"),
NegClusterSD = c("channel1", "channel2"),
PosFDR = c("channel1", "channel2"),
RainFDR = c("channel1", "channel2")
)
probe.data
BreakPoint1 = matrix(data = BreakPoint1, nrow = 1, ncol = 2,dimnames = c("Ch1","Ch2"))
BreakPoint1 = c("Ch1", "Ch2")
BreakPoint1 = matrix(data = BreakPoint1, nrow = 1, ncol = 2,dimnames = c("Ch1","Ch2"))
matrix(data = BreakPoint1, nrow = 1, ncol = 2,dimnames = c("Ch1","Ch2"))
BreakPoint1 = matrix(data = BreakPoint1, nrow = 1, ncol = 2)
BreakPoint1
?matrix
col.names <- list(c("Ch1","Ch2"))
BreakPoint1 = matrix(data = BreakPoint1, nrow = 1, ncol = 2,dimnames = col.names);
col.names <- list(c("Ch1","Ch2"))
BreakPoint1 = matrix(data = BreakPoint1, nrow = 1, ncol = 2,dimnames = col.names);
BreakPoint1 = matrix(data = BreakPoint1, nrow = 1, ncol = 2,dimnames = list(NULL,col.names);
BreakPoint1 = matrix(data = BreakPoint1, nrow = 1, ncol = 2,dimnames = list(NULL,col.names)
)
col.names <- c("Ch1","Ch2")
BreakPoint1 = matrix(data = BreakPoint1, nrow = 1, ncol = 2,dimnames = list(NULL,col.names)
)
BreakPoint1
col.names <- c("Ch1","Ch2")
probe.data <- list( Name = Name,
Date = Date,
BreakPoint1 = matrix(data = BreakPoint1, nrow = 1, ncol = 2,dimnames = list(NULL,col.names)),
BreakPoint2 = matrix(data = BreakPoint2, nrow = 1, ncol = 2,dimnames = list(NULL,col.names)),
PosClusterAmp = matrix(data = PosClusterAmp, nrow = 1, ncol = 2,dimnames = list(NULL,col.names)),
NegClusterAmp = matrix(data = NegClusterAmp, nrow = 1, ncol = 2,dimnames = list(NULL,col.names)),
PosClusterSD = matrix(data = PosClusterSD, nrow = 1, ncol = 2,dimnames = list(NULL,col.names)),
NegClusterSD = matrix(data = NegClusterSD, nrow = 1, ncol = 2,dimnames = list(NULL,col.names)),
PosFDR = matrix(data = PosFDR, nrow = 1, ncol = 2,dimnames = list(NULL,col.names)),
RainFDR = matrix(data = RainFDR, nrow = 1, ncol = 2,dimnames = list(NULL,col.names)),
)
Name = "probe name",
Name = "probe name"
probe.data <- list( Name = Name,
Date = Date,
BreakPoint1 = matrix(data = BreakPoint1, nrow = 1, ncol = 2,dimnames = list(NULL,col.names)),
BreakPoint2 = matrix(data = BreakPoint2, nrow = 1, ncol = 2,dimnames = list(NULL,col.names)),
PosClusterAmp = matrix(data = PosClusterAmp, nrow = 1, ncol = 2,dimnames = list(NULL,col.names)),
NegClusterAmp = matrix(data = NegClusterAmp, nrow = 1, ncol = 2,dimnames = list(NULL,col.names)),
PosClusterSD = matrix(data = PosClusterSD, nrow = 1, ncol = 2,dimnames = list(NULL,col.names)),
NegClusterSD = matrix(data = NegClusterSD, nrow = 1, ncol = 2,dimnames = list(NULL,col.names)),
PosFDR = matrix(data = PosFDR, nrow = 1, ncol = 2,dimnames = list(NULL,col.names)),
RainFDR = matrix(data = RainFDR, nrow = 1, ncol = 2,dimnames = list(NULL,col.names)),
)
Date = "current date"
BreakPoint1 = c("Ch1", "Ch2")
BreakPoint2 = c("Ch1", "Ch2")
PosClusterAmp = c("Ch1", "Ch2")
NegClusterAmp = c("Ch1", "Ch2")
PosClusterSD = c("Ch1", "Ch2")
NegClusterSD = c("Ch1", "Ch2")
PosFDR = c("Ch1", "Ch2")
RainFDR = c("Ch1", "Ch2")
probe.data <- list( Name = Name,
Date = Date,
BreakPoint1 = matrix(data = BreakPoint1, nrow = 1, ncol = 2,dimnames = list(NULL,col.names)),
BreakPoint2 = matrix(data = BreakPoint2, nrow = 1, ncol = 2,dimnames = list(NULL,col.names)),
PosClusterAmp = matrix(data = PosClusterAmp, nrow = 1, ncol = 2,dimnames = list(NULL,col.names)),
NegClusterAmp = matrix(data = NegClusterAmp, nrow = 1, ncol = 2,dimnames = list(NULL,col.names)),
PosClusterSD = matrix(data = PosClusterSD, nrow = 1, ncol = 2,dimnames = list(NULL,col.names)),
NegClusterSD = matrix(data = NegClusterSD, nrow = 1, ncol = 2,dimnames = list(NULL,col.names)),
PosFDR = matrix(data = PosFDR, nrow = 1, ncol = 2,dimnames = list(NULL,col.names)),
RainFDR = matrix(data = RainFDR, nrow = 1, ncol = 2,dimnames = list(NULL,col.names)),
)
probe.data
probe.data$probe.name <- rbind(probe.data$probe.name,"1")
probe.data
ls()
BreakPoint1 = c("Ch1", "Ch2")
BreakPoint2 = c("Ch1", "Ch2")
probe.data <- list( Name = Name,
Date = Date,
BreakPoint1 = matrix(data = BreakPoint1, nrow = 1, ncol = 2,dimnames = list(NULL,col.names)),
BreakPoint2 = matrix(data = BreakPoint2, nrow = 1, ncol = 2,dimnames = list(NULL,col.names)),
PosClusterAmp = matrix(data = PosClusterAmp, nrow = 1, ncol = 2,dimnames = list(NULL,col.names)),
NegClusterAmp = matrix(data = NegClusterAmp, nrow = 1, ncol = 2,dimnames = list(NULL,col.names)),
PosClusterSD = matrix(data = PosClusterSD, nrow = 1, ncol = 2,dimnames = list(NULL,col.names)),
NegClusterSD = matrix(data = NegClusterSD, nrow = 1, ncol = 2,dimnames = list(NULL,col.names)),
PosFDR = matrix(data = PosFDR, nrow = 1, ncol = 2,dimnames = list(NULL,col.names)),
RainFDR = matrix(data = RainFDR, nrow = 1, ncol = 2,dimnames = list(NULL,col.names)),
)
BreakPoint1
col.names <- c("Ch1","Ch2")
probe.data <- list( Name = Name,
Date = Date,
BreakPoint1 = matrix(data = BreakPoint1, nrow = 1, ncol = 2,dimnames = list(NULL,col.names)),
BreakPoint2 = matrix(data = BreakPoint2, nrow = 1, ncol = 2,dimnames = list(NULL,col.names)),
PosClusterAmp = matrix(data = PosClusterAmp, nrow = 1, ncol = 2,dimnames = list(NULL,col.names)),
NegClusterAmp = matrix(data = NegClusterAmp, nrow = 1, ncol = 2,dimnames = list(NULL,col.names)),
PosClusterSD = matrix(data = PosClusterSD, nrow = 1, ncol = 2,dimnames = list(NULL,col.names)),
NegClusterSD = matrix(data = NegClusterSD, nrow = 1, ncol = 2,dimnames = list(NULL,col.names)),
PosFDR = matrix(data = PosFDR, nrow = 1, ncol = 2,dimnames = list(NULL,col.names)),
RainFDR = matrix(data = RainFDR, nrow = 1, ncol = 2,dimnames = list(NULL,col.names)),
)
probe.data <- list( Name = Name,
Date = Date,
#BreakPoint1 = matrix(data = BreakPoint1, nrow = 1, ncol = 2,dimnames = list(NULL,col.names)),
BreakPoint2 = matrix(data = BreakPoint2, nrow = 1, ncol = 2,dimnames = list(NULL,col.names)),
PosClusterAmp = matrix(data = PosClusterAmp, nrow = 1, ncol = 2,dimnames = list(NULL,col.names)),
NegClusterAmp = matrix(data = NegClusterAmp, nrow = 1, ncol = 2,dimnames = list(NULL,col.names)),
PosClusterSD = matrix(data = PosClusterSD, nrow = 1, ncol = 2,dimnames = list(NULL,col.names)),
NegClusterSD = matrix(data = NegClusterSD, nrow = 1, ncol = 2,dimnames = list(NULL,col.names)),
PosFDR = matrix(data = PosFDR, nrow = 1, ncol = 2,dimnames = list(NULL,col.names)),
RainFDR = matrix(data = RainFDR, nrow = 1, ncol = 2,dimnames = list(NULL,col.names)),
)
probe.data <- list( Name = Name,
Date = Date,
BreakPoint1 = matrix(data = BreakPoint1, nrow = 1, ncol = 2,dimnames = list(NULL,col.names)),
BreakPoint2 = matrix(data = BreakPoint2, nrow = 1, ncol = 2,dimnames = list(NULL,col.names)),
PosClusterAmp = matrix(data = PosClusterAmp, nrow = 1, ncol = 2,dimnames = list(NULL,col.names)),
NegClusterAmp = matrix(data = NegClusterAmp, nrow = 1, ncol = 2,dimnames = list(NULL,col.names)),
PosClusterSD = matrix(data = PosClusterSD, nrow = 1, ncol = 2,dimnames = list(NULL,col.names)),
NegClusterSD = matrix(data = NegClusterSD, nrow = 1, ncol = 2,dimnames = list(NULL,col.names)),
PosFDR = matrix(data = PosFDR, nrow = 1, ncol = 2,dimnames = list(NULL,col.names)),
RainFDR = matrix(data = RainFDR, nrow = 1, ncol = 2,dimnames = list(NULL,col.names))
)
probe.data
output.file <- file.path(path,paste(Name,".Rdata",sep=""))
output.file
output.file <- file.path(path[1],paste(Name,".Rdata",sep=""))
output.file
output.file <- file.path(path[2],paste(Name,".Rdata",sep=""))
output.file
save(probe.data, file=output.file)
,
probe.data <- load(file.path(path[2],paste(Name,".Rdata",sep="")))
probe.data <- load(file.path(path[2],paste(Name,".Rdata",sep="")))
probe.data
load(file.path(path[2],paste(Name,".Rdata",sep="")))
ls
ls()
probe.data
read.design.file <- function(path,file){
design <- read.table(file = file.path(path,file),header = TRUE,sep = "\t",quote = FALSE)
return(design)
}
read.design.file(path=file.path(path$input.data,folder),file)
read.design.file(path=file.path(path$input.data,project),file)
read.design.file(path=file.path(path$input.data,project),"design.txt")
read.design.file <- function(path,file)
{
design <- read.table(file = file.path(path,file),header = TRUE,sep = "\t")
return(design)
}
read.design.file(path=file.path(path$input.data,project),"design.txt")
exp.design <- read.design.file(path=file.path(path$input.data,project),"design.txt")
exp.design
control.files <- exp.design$Type == c("pos","neg")
control.files
control.files <- exp.design[exp.design$Type == c("pos","neg"),2]
control.files
control.data <- combine.controls(file.path(path,project),files=control.files)
combine.controls <- function(path,files)
{
combined.data <- NULL
for(i in 1:length(files))
{
sample.data <- read.table(file=file.path(path,files[i]),header = TRUE,sep = "\t")
combined.data <- rbind(combined.data,sample.data )
}
return(combined.data)
}
control.data <- combine.controls(file.path(path,project),files=control.files)
control.data <- combine.controls(file=file.path(path,project),files=control.files)
control.data <- combine.controls(path=file.path(path,project),files=control.files)
control.files
length(control.files)
path=file.path(path,project)
path
control.data <- combine.controls(path=file.path(path$input.data,project),files=control.files)
path <- set.paths(input.path)
control.data <- combine.controls(path=file.path(path$input.data,project),files=control.files)
project
path$input.data
input.path <- "D:\\R SCRIPTS\\ddPCR analysis" #work
path <- set.paths(input.path)
path
control.data <- combine.controls(path=file.path(path$input.data,project),files=control.files)
control.data
head(control.data)
combine.controls <- function(path,files)
{
combined.data <- NULL
for(i in 1:length(files))
{
sample.data <- read.table(file=file.path(path,files[i]),header = TRUE,sep = ",")
combined.data <- rbind(combined.data,sample.data )
}
return(combined.data)
}
control.data <- combine.controls(path=file.path(path$input.data,project),files=control.files)
head(control.data)
dim(control.data)
get.breakpoint <- function(x,nClusters=2)
{ # use kmeans function
x <- as.numeric(x)
result <- NULL
breakpoint <- kmeans(x=x,centers=nClusters)$centers
if(dim(breakpoint)[1] == 2){result <- mean(breakpoint)}
if(dim(breakpoint)[1] == 3){result <- c(mean(breakpoint[1:2,1]),mean(breakpoint[2:3,1]))}
return(result)
}
breakpoint.ch1 <- get.breakpoint(x = control.data[,1])
breakpoint.ch2 <- get.breakpoint(x = control.data[,1])
breakpoint.ch1
breakpoint.ch2
plot(control.data[,1],control.data[,2])
plot(control.data[,2],control.data[,1])
plot(control.data[,2],control.data[,1], cex=0.1)
plot(control.data[,2],control.data[,1], cex=0.3, pch=15)
plot(control.data[,2],control.data[,1], cex=0.3, pch=15, col="#00000040")
plot(control.data[,2],control.data[,1], cex=0.3, pch=15, col="#00000040")
plot(control.data[,2],control.data[,1], cex=0.3, pch=15, col="#0000040")
plot(control.data[,2],control.data[,1], cex=0.3, pch=15, col="#00000040")
plot(control.data[,2],control.data[,1], cex=0.3, pch=15)
head(control.data)
plot(control.data[,2],control.data[,1], cex=0.5, col="#00000020", xlab="Ch1 Amplitude", ylab="Ch2 Amplitude", pch=19,main="Controls",
ylim=c(0,11000), xlim=c(0,15000) )
abline(v=breakpoint.ch1, col="red") # channel 1
abline(h=breakpoint.ch2, col="red") # channel 2
plot(control.data[,2],control.data[,1], cex=0.5, col="#00000020", xlab="Ch1 Amplitude", ylab="Ch2 Amplitude", pch=19,main="Controls",
ylim=c(0,max(control.data)), xlim=c(0,max(control.data)) )
abline(v=breakpoint.ch1, col="red") # channel 1
abline(h=breakpoint.ch2, col="red") # channel 2
plot(control.data[,2],control.data[,1], cex=0.5, col="#00000020", xlab="Ch1 Amplitude", ylab="Ch2 Amplitude", pch=19,main="Controls",
xlim=c(0,max(control.data[,1])),ylim=c(0,max(control.data[,2])) )
abline(v=breakpoint.ch1, col="red") # channel 1
abline(h=breakpoint.ch2, col="red") # channel 2
max(control.data[,1])
max(control.data[,2])
head(control.data)
plot(x=control.data[,1],y=control.data[,2], cex=0.5, col="#00000020", xlab="Ch1 Amplitude", ylab="Ch2 Amplitude", pch=19,main="Controls",
xlim=c(0,max(control.data[,1])),ylim=c(0,max(control.data[,2])) )
abline(v=breakpoint.ch1, col="red") # channel 1
abline(h=breakpoint.ch2, col="red") # channel 2
breakpoint.ch2
abline(h=breakpoint.ch1, col="red") # channel 1
abline(v=breakpoint.ch2, col="red") # channel 2
plot(y=control.data[,1],x=control.data[,2], cex=0.5, col="#00000020", ylab="Ch2 Amplitude",xlab="Ch1 Amplitude", pch=19,main="Controls",
xlim=c(0,max(control.data[,2])),ylim=c(0,max(control.data[,1])) )
abline(h=breakpoint.ch1, col="red") # channel 1
abline(v=breakpoint.ch2, col="red") # channel 2
breakpoint.ch1
breakpoint.ch2
breakpoint.ch1 <- get.breakpoint(x = control.data[,1])
breakpoint.ch2 <- get.breakpoint(x = control.data[,2])
breakpoint.ch2
breakpoint.ch1
abline(h=breakpoint.ch1, col="red") # channel 1
abline(v=breakpoint.ch2, col="red") # channel 2
plot(y=control.data[,1],x=control.data[,2], cex=0.5, col="#00000020", ylab="Ch2 Amplitude",xlab="Ch1 Amplitude", pch=15,main="Controls",
xlim=c(0,max(control.data[,2])),ylim=c(0,max(control.data[,1])) )
abline(h=breakpoint.ch1, col="red") # channel 1
abline(v=breakpoint.ch2, col="red") # channel 2
plot(y=control.data[,1],x=control.data[,2], cex=0.5, col="#00000020", ylab="Ch2 Amplitude",xlab="Ch1 Amplitude", pch=19,main="Controls",
xlim=c(0,max(control.data[,2])),ylim=c(0,max(control.data[,1])) )
abline(h=breakpoint.ch1, col="red") # channel 1
abline(v=breakpoint.ch2, col="red") # channel 2
plot(y=control.data[,1],x=control.data[,2], cex=0.5, col="#00000020", ylab="Ch2 Amplitude",xlab="Ch1 Amplitude", pch=20,main="Controls",
xlim=c(0,max(control.data[,2])),ylim=c(0,max(control.data[,1])) )
abline(h=breakpoint.ch1, col="red") # channel 1
abline(v=breakpoint.ch2, col="red") # channel 2
plot(y=control.data[,1],x=control.data[,2], cex=1, col="#00000020", ylab="Ch2 Amplitude",xlab="Ch1 Amplitude", pch=20,main="Controls",
xlim=c(0,max(control.data[,2])),ylim=c(0,max(control.data[,1])) )
abline(h=breakpoint.ch1, col="red") # channel 1
abline(v=breakpoint.ch2, col="red") # channel 2
plot(y=control.data[,1],x=control.data[,2], cex=1, col="#00000020", ylab="Ch2 Amplitude",xlab="Ch1 Amplitude", pch=16,main="Controls",
xlim=c(0,max(control.data[,2])),ylim=c(0,max(control.data[,1])) )
abline(h=breakpoint.ch1, col="red") # channel 1
abline(v=breakpoint.ch2, col="red") # channel 2
plot(y=control.data[,1],x=control.data[,2], cex=1, col="#00000040", ylab="Ch2 Amplitude",xlab="Ch1 Amplitude", pch=16,main="Controls",
xlim=c(0,max(control.data[,2])),ylim=c(0,max(control.data[,1])) )
abline(h=breakpoint.ch1, col="red") # channel 1
abline(v=breakpoint.ch2, col="red") # channel 2
plot(y=control.data[,1],x=control.data[,2], cex=0.8, col="#00000040", ylab="Ch2 Amplitude",xlab="Ch1 Amplitude", pch=16,main="Controls",
xlim=c(0,max(control.data[,2])),ylim=c(0,max(control.data[,1])) )
abline(h=breakpoint.ch1, col="red") # channel 1
abline(v=breakpoint.ch2, col="red") # channel 2
plot(y=control.data[,1],x=control.data[,2], cex=0.7, col="#00000040", ylab="Ch2 Amplitude",xlab="Ch1 Amplitude", pch=16,main="Controls",
xlim=c(0,max(control.data[,2])),ylim=c(0,max(control.data[,1])) )
abline(h=breakpoint.ch1, col="red") # channel 1
abline(v=breakpoint.ch2, col="red") # channel 2
abline(v=breakpoint.ch2, col="red") # channel 2
name
Name
plot(y=control.data[,1],x=control.data[,2], cex=0.7, col="#00000040", ylab="Ch2 Amplitude",xlab="Ch1 Amplitude", pch=16,main=Name,
xlim=c(0,max(control.data[,2])),ylim=c(0,max(control.data[,1])) )
abline(h=breakpoint.ch1, col="red") # channel 1
abline(v=breakpoint.ch2, col="red") # channel 2
