if(targets[i] == "EGFR T790M"){control.sample <- "H1975"}
if(targets[i] == "EGFR E746_A750"){control.sample <- "H1650"}
sample.list  <- data.targets[[i]]
sample.type <- get.controls(x = sample.list$Sample[duplicated(sample.list$Well)],pos = control.sample)
file.names <- unique(sample.list$Sample)
file.wells <- unique(sample.list$Well)
files <- paste(experiment,"_",file.wells,"_Amplitude.csv",sep="")
if(sum(files %in% list.files(path)) == length(files))
{# are all files available for analysis.
# - [x] get max Amplitude of all the files
data.xy.max <-
combine.samples(path=path,files=files) %>%
get.max.channels(.)
# - [x] get positive sample and determine breakpoints
control.data.pos  <-
files[sample.type == "pos"] %>%
combine.samples(path=path,files=.)
# - [x] get positive control breakpoints
breakpoints <-
control.data.pos %>%
get.ddpcr.breakpoints(., algorithm = "hist")
# - [x] set clusters positive control with breakpoints
control.data.pos %<>%
define.clusters(., breakpoints)
# - [x] set file name control sample
control.name <- paste(file.names[sample.type == "pos"],"_pos_Control",sep="")
output.file <- file.path(path.targets[[i]], paste(control.name,".png",sep=""))
# - [x] create plot for control data
png(filename=output.file,width = 800,height = 800)
plot.ddpcr(x=control.data.pos, main=control.name, max.xy=data.xy.max, breakpoints=breakpoints)
dev.off()
# - [x] get ntc sample(s)
control.data.ntc <-
files[sample.type == "ntc"] %>%
combine.samples(path=path,files=.)
# - [ ] set clusters ntc control with breakpoints
control.data.ntc %<>%
define.clusters(., breakpoints)
# - [x] set file name NTC control sample
control.name <- paste(file.names[sample.type == "ntc"],"_ntc_Control",sep="")
output.file <- file.path(path.targets[[i]], paste(control.name,".png",sep=""))
# - [x] create plot for control data
png(filename=output.file,width = 800,height = 800)
plot.ddpcr(x=control.data.ntc, main=control.name, max.xy=data.xy.max, breakpoints=breakpoints)
dev.off()
# - [x] set results <- c()
results <- c()
# - [x] loop through all the samples
for(j in 1:length(files))
{
sample.data <-
read.table(file=file.path(path,files[j]),header = TRUE,sep = ",") %>%
define.clusters(., breakpoints)
# - [ ] redefine clusters with mean & stdev
breakpoints.2 <-
sample.data %>%
refine.clusters.stdev(., stdev=3,breakpoints = breakpoints)
# - [ ] set clusters positive control with new breakpoints
sample.data %<>%
define.clusters(., breakpoints.2)
# - [x] create plot for sample data
sample.name <- gsub(pattern = "_Amplitude.csv",replacement="",x=files[j])
output.file <- file.path(path.targets[[i]], paste(sample.name,".png",sep=""))
png(filename=output.file,width = 800,height = 800)
plot.ddpcr(x=sample.data, main=file.names[j], max.xy = data.xy.max, breakpoints = breakpoints.2)
dev.off()
# - [x] Add: Well, Sample, TargetType (ch1/ch2), Target, Status concentration,
result <- cbind(Well=rep(as.character(file.wells[j]),2),Sample=rep(as.character(file.names[j]),2))
result <- data.frame(result)
result <- cbind(result, TargetType=c("Channel 1","Channel 2"))
result <- cbind(result, Target=rep(targets[i],2))
result <- cbind(result, Status=rep("Undetermined",2))
result <- cbind(result, Threshold=breakpoints.2)
result <- cbind(result, get.statistics.droplets(sample.data))
# - [x] colnames of droplet count data is changed after data.frame conversion
copies.data <- get.statistics.copies(sample.data)
result <- cbind(result, copies.data)
result <- cbind(result, ngPer1ul=convert.copies.to.ng(result$CopiesPer1ul))
result <- cbind(result, get.statistics.ratio.fract(copies.data))
# - [ ] sample status needs to be updated
results <- rbind(results,result)
}
output.file <- file.path(path.targets[[i]],paste(experiment,"_",targets[[i]], "_results.txt",sep=""))
write.table(x = results,file = output.file,quote = FALSE,sep = "\t",row.names = FALSE)
cat("Probe", targets[i], "has been processed.\n")
}
}
}
ddpcr.analysis(path=analysis.path)
sample.data
sample.type
droplet.count(x = sample.data, cluster = c(1,2,3,4))
result <- c()
result <- c(result,"CHECK DROPLETS:")
result
droplet.count(x = sample.data, cluster = c(2,3,4)) > 0
if(droplet.count(x = sample.data, cluster=1) == 0){result <- c(result,"NO POSITIVE DROPLETS CLUSTER 1:")}
if(droplet.count(x = sample.data, cluster = c(2,3,4)) > 0){result <- c(result,"POSITIVE DROPLETS FOUND:")}
result
unlist(result)
collapse(result)
unstring(result)
paste(result, sep=":", collapse=TRUE)
paste(result, sep=":", collapse="")
paste(result, sep="", collapse=":")
paste(result, sep="", collapse="")
paste(result, sep="", collapse="")
x <- c("This ", "is ", "one ", "sentence.")
paste(x, sep=" ", collapse"")
paste(x, sep=" ", collapse="")
check.well.qc <- function(x, sample.type)
{ # input = amplitide data with defined clusters
result <- C()
if(droplet.count(x = sample.data, cluster = c(1,2,3,4)) < 10000)
{
result <- c(result,"CHECK DROPLET COUNT")
} else  {
result <- c(result,"DROPLET COUNT OK")
}
if(tolower(sample.type) == "pos")
{
if(droplet.count(x = sample.data, cluster=1) == 0){result <- c(result,"NO POSITIVE DROPLETS CLUSTER 1")}
if(droplet.count(x = sample.data, cluster=2) == 0){result <- c(result,"NO POSITIVE DROPLETS CLUSTER 2")}
if(droplet.count(x = sample.data, cluster=3) == 0){result <- c(result,"NO POSITIVE DROPLETS CLUSTER 3")}
if(droplet.count(x = sample.data, cluster=5) == 0){result <- c(result,"NO POSITIVE DROPLETS CLUSTER 4")}
}
if(tolower(sample.type) == "neg")
{
if(droplet.count(x = sample.data, cluster = c(2,3,4)) > 0){result <- c(result,"POSITIVE DROPLETS FOUND")}
}
paste(result, sep="", collapse="")
return(results)
}
check.well.qc <- function(x, sample.type)
{ # input = amplitide data with defined clusters
result <- C()
if(droplet.count(x = x, cluster = c(1,2,3,4)) < 10000)
{
result <- c(result,"CHECK DROPLET COUNT")
} else  {
result <- c(result,"DROPLET COUNT OK")
}
if(tolower(sample.type) == "pos")
{
if(droplet.count(x = x, cluster=1) == 0){result <- c(result,"NO POSITIVE DROPLETS CLUSTER 1")}
if(droplet.count(x = x, cluster=2) == 0){result <- c(result,"NO POSITIVE DROPLETS CLUSTER 2")}
if(droplet.count(x = x, cluster=3) == 0){result <- c(result,"NO POSITIVE DROPLETS CLUSTER 3")}
if(droplet.count(x = x, cluster=5) == 0){result <- c(result,"NO POSITIVE DROPLETS CLUSTER 4")}
}
if(tolower(sample.type) == "neg")
{
if(droplet.count(x = x, cluster = c(2,3,4)) > 0){result <- c(result,"POSITIVE DROPLETS FOUND")}
}
paste(result, sep="", collapse="")
return(results)
}
check.well.qc(sample.data, "pos")
check.well.qc(sample.data, sample.type = "pos")
check.well.qc <- function(x, sample.type)
{ # input = amplitide data with defined clusters
result <- C()
if(droplet.count(x = x, cluster = c(1,2,3,4)) < 10000)
{
result <- c(result,"CHECK DROPLET COUNT")
} else  {
result <- c(result,"DROPLET COUNT OK")
}
if(tolower(sample.type) == "pos")
{
if(droplet.count(x = x, cluster=1) == 0){result <- c(result,"NO POSITIVE DROPLETS CLUSTER 1")}
if(droplet.count(x = x, cluster=2) == 0){result <- c(result,"NO POSITIVE DROPLETS CLUSTER 2")}
if(droplet.count(x = x, cluster=3) == 0){result <- c(result,"NO POSITIVE DROPLETS CLUSTER 3")}
if(droplet.count(x = x, cluster=5) == 0){result <- c(result,"NO POSITIVE DROPLETS CLUSTER 4")}
}
if(tolower(sample.type) == "neg")
{
if(droplet.count(x = x, cluster = c(2,3,4)) > 0){result <- c(result,"POSITIVE DROPLETS FOUND")}
}
paste(result, sep="", collapse="")
return(result)
}
check.well.qc(sample.data, sample.type = "pos")
droplet.count(x = x, cluster = c(1,2,3,4)) < 10000
sample.data
x <- sample.data
result <- C()
if(droplet.count(x = x, cluster = c(1,2,3,4)) < 10000)
{
result <- c(result,"CHECK DROPLET COUNT")
} else  {
result <- c(result,"DROPLET COUNT OK")
}
if(tolower(sample.type) == "pos")
{
if(droplet.count(x = x, cluster=1) == 0){result <- c(result,"NO POSITIVE DROPLETS CLUSTER 1")}
if(droplet.count(x = x, cluster=2) == 0){result <- c(result,"NO POSITIVE DROPLETS CLUSTER 2")}
if(droplet.count(x = x, cluster=3) == 0){result <- c(result,"NO POSITIVE DROPLETS CLUSTER 3")}
if(droplet.count(x = x, cluster=5) == 0){result <- c(result,"NO POSITIVE DROPLETS CLUSTER 4")}
}
if(tolower(sample.type) == "neg")
{
check.well.qc <- function(x, sample.type)
{ # input = amplitide data with defined clusters
result <- C()
if(droplet.count(x = x, cluster = c(1,2,3,4)) < 10000)
{
result <- c(result,"CHECK DROPLET COUNT")
} else  {
result <- c(result,"DROPLET COUNT OK")
}
if(tolower(sample.type) == "pos")
{
if(droplet.count(x = x, cluster=1) == 0){result <- c(result,"NO DROPLETS CLUSTER 1")}
if(droplet.count(x = x, cluster=2) == 0){result <- c(result,"NO DROPLETS CLUSTER 2")}
if(droplet.count(x = x, cluster=3) == 0){result <- c(result,"NO DROPLETS CLUSTER 3")}
if(droplet.count(x = x, cluster=4) == 0){result <- c(result,"NO DROPLETS CLUSTER 4")}
}
if(tolower(sample.type) == "neg")
{
if(droplet.count(x = x, cluster = c(2,3,4)) > 0){result <- c(result,"FALSE POSITIVE FOUND")}
}
paste(result, sep="", collapse="")
return(result)
}
check.well.qc <- function(x, sample.type)
{ # input = amplitide data with defined clusters
result <- C()
if(droplet.count(x = x, cluster = c(1,2,3,4)) < 10000)
{
result <- c(result,"CHECK DROPLET COUNT")
} else  {
result <- c(result,"DROPLET COUNT OK")
}
if(tolower(sample.type) == "pos")
{
if(droplet.count(x = x, cluster=1) == 0){result <- c(result,"NO DROPLETS CLUSTER 1")}
if(droplet.count(x = x, cluster=2) == 0){result <- c(result,"NO DROPLETS CLUSTER 2")}
if(droplet.count(x = x, cluster=3) == 0){result <- c(result,"NO DROPLETS CLUSTER 3")}
if(droplet.count(x = x, cluster=4) == 0){result <- c(result,"NO DROPLETS CLUSTER 4")}
}
if(tolower(sample.type) == "neg")
{
if(droplet.count(x = x, cluster = c(2,3,4)) > 0){result <- c(result,"FALSE POSITIVE FOUND")}
}
paste(result, sep="", collapse="")
return(result)
}
check.well.qc(sample.data)
x
result <- C()
if(droplet.count(x = x, cluster = c(1,2,3,4)) < 10000)
{
result <- c(result,"CHECK DROPLET COUNT")
} else  {
result <- c(result,"DROPLET COUNT OK")
}
if(tolower(sample.type) == "pos")
{
if(droplet.count(x = x, cluster=1) == 0){result <- c(result,"NO DROPLETS CLUSTER 1")}
if(droplet.count(x = x, cluster=2) == 0){result <- c(result,"NO DROPLETS CLUSTER 2")}
if(droplet.count(x = x, cluster=3) == 0){result <- c(result,"NO DROPLETS CLUSTER 3")}
if(droplet.count(x = x, cluster=4) == 0){result <- c(result,"NO DROPLETS CLUSTER 4")}
}
sample.type
check.well.qc(sample.data, sample.type[j])
check.well.qc(sample.data, sample.type="pos")
tolower(sample.type) == "pos"
sample.type="pos"
tolower(sample.type) == "pos"
check.well.qc <- function(x, sample.type)
{ # input = amplitide data with defined clusters
result <- C()
if(droplet.count(x = x, cluster = c(1,2,3,4)) < 10000)
{
result <- c(result,"CHECK DROPLET COUNT")
} else  {
result <- c(result,"DROPLET COUNT OK")
}
if(tolower(sample.type) == "pos")
{
if(droplet.count(x = x, cluster=1) == 0){result <- c(result,"NO DROPLETS CLUSTER 1")}
if(droplet.count(x = x, cluster=2) == 0){result <- c(result,"NO DROPLETS CLUSTER 2")}
if(droplet.count(x = x, cluster=3) == 0){result <- c(result,"NO DROPLETS CLUSTER 3")}
if(droplet.count(x = x, cluster=4) == 0){result <- c(result,"NO DROPLETS CLUSTER 4")}
}
if(tolower(sample.type) == "neg")
{
if(droplet.count(x = x, cluster = c(2,3,4)) > 0){result <- c(result,"FALSE POSITIVE FOUND")}
}
paste(result, sep="", collapse="")
return(result)
}
sample.list  <- data.targets[[i]]
sample.type <- get.controls(x = sample.list$Sample[duplicated(sample.list$Well)],pos = control.sample)
j=1
i=1
sample.data <-
read.table(file=file.path(path,files[j]),header = TRUE,sep = ",") %>%
define.clusters(., breakpoints)
# - [ ] redefine clusters with mean & stdev
breakpoints.2 <-
sample.data %>%
refine.clusters.stdev(., stdev=3,breakpoints = breakpoints)
# - [ ] set clusters positive control with new breakpoints
sample.data %<>%
define.clusters(., breakpoints.2)
plot.ddpcr(sample.data)
sample.qc <- function(x, sample.type)
{ # input = amplitide data with defined clusters
result <- C()
if(droplet.count(x = x, cluster = c(1,2,3,4)) < 10000)
{
result <- c(result,"CHECK DROPLET COUNT")
} else  {
result <- c(result,"DROPLET COUNT OK")
}
if(tolower(sample.type) == "pos")
{
if(droplet.count(x = x, cluster=1) == 0){result <- c(result,"NO DROPLETS CLUSTER 1")}
if(droplet.count(x = x, cluster=2) == 0){result <- c(result,"NO DROPLETS CLUSTER 2")}
if(droplet.count(x = x, cluster=3) == 0){result <- c(result,"NO DROPLETS CLUSTER 3")}
if(droplet.count(x = x, cluster=4) == 0){result <- c(result,"NO DROPLETS CLUSTER 4")}
}
if(tolower(sample.type) == "neg")
{
if(droplet.count(x = x, cluster = c(2,3,4)) > 0){result <- c(result,"FALSE POSITIVE FOUND")}
}
paste(result, sep="", collapse="")
return(result)
}
sample.qc(sample.data, sample.typ[j])
sample.type[j]
sample.qc <- function(x, sample.type)
{ # input = amplitide data with defined clusters
result <- C()
if(droplet.count(x = x, cluster = c(1,2,3,4)) < 10000)
{
result <- c(result,"CHECK DROPLET COUNT")
cat("total droplets count\n")
} else  {
result <- c(result,"DROPLET COUNT OK")
}
if(tolower(sample.type) == "pos")
{
if(droplet.count(x = x, cluster=1) == 0){result <- c(result,"NO DROPLETS CLUSTER 1")}
if(droplet.count(x = x, cluster=2) == 0){result <- c(result,"NO DROPLETS CLUSTER 2")}
if(droplet.count(x = x, cluster=3) == 0){result <- c(result,"NO DROPLETS CLUSTER 3")}
if(droplet.count(x = x, cluster=4) == 0){result <- c(result,"NO DROPLETS CLUSTER 4")}
cat("post cluster count\n")
}
if(tolower(sample.type) == "neg")
{
if(droplet.count(x = x, cluster = c(2,3,4)) > 0){result <- c(result,"FALSE POSITIVE FOUND")}
cat("neg droplets count\n")
}
cat("before paste results\n")
paste(result, sep="", collapse="")
return(result)
}
sample.qc(sample.data, sample.type[j])
droplet.count(x = x, cluster = c(1,2,3,4)) < 10000
sample.data -> x
droplet.count(x = x, cluster = c(1,2,3,4)) < 10000
if(droplet.count(x = x, cluster = c(1,2,3,4)) < 10000)
{
result <- c(result,"CHECK DROPLET COUNT")
cat("total droplets count\n")
} else  {
result <- c(result,"DROPLET COUNT OK")
}
result
rm(result)
if(droplet.count(x = x, cluster = c(1,2,3,4)) < 10000)
{
result <- "CHECK DROPLET COUNT"
cat("total droplets count\n")
} else  {
result <- "DROPLET COUNT OK"
}
result
tolower(sample.type) == "pos"
if(droplet.count(x = x, cluster=1) == 0){result <- c(result,"NO DROPLETS CLUSTER 1")}
if(droplet.count(x = x, cluster=2) == 0){result <- c(result,"NO DROPLETS CLUSTER 2")}
if(droplet.count(x = x, cluster=3) == 0){result <- c(result,"NO DROPLETS CLUSTER 3")}
if(droplet.count(x = x, cluster=4) == 0){result <- c(result,"NO DROPLETS CLUSTER 4")}
result
tolower(sample.type) == "neg"
if(droplet.count(x = x, cluster = c(2,3,4)) > 0){result <- c(result,"FALSE POSITIVE FOUND")}
result
paste(result, sep="", collapse="")
paste(result, sep=":", collapse="")
sample.qc <- function(x, sample.type="")
{ # input = amplitide data with defined clusters
if(droplet.count(x = x, cluster = c(1,2,3,4)) < 10000)
{
result <- "CHECK DROPLET COUNT"
cat("total droplets count\n")
} else  {
result <- "DROPLET COUNT OK"
}
if(tolower(sample.type) == "pos")
{
if(droplet.count(x = x, cluster=1) == 0){result <- c(result,"NO DROPLETS CLUSTER 1")}
if(droplet.count(x = x, cluster=2) == 0){result <- c(result,"NO DROPLETS CLUSTER 2")}
if(droplet.count(x = x, cluster=3) == 0){result <- c(result,"NO DROPLETS CLUSTER 3")}
if(droplet.count(x = x, cluster=4) == 0){result <- c(result,"NO DROPLETS CLUSTER 4")}
cat("post cluster count\n")
}
if(tolower(sample.type) == "neg")
{
if(droplet.count(x = x, cluster = c(2,3,4)) > 0){result <- c(result,"FALSE POSITIVE FOUND")}
cat("neg droplets count\n")
}
cat("before paste results\n")
paste(result, sep=":", collapse="")
return(result)
}
sample.qc(x=sample.data, sample.type = "pos")
sample.qc <- function(x, sample.type="")
{ # input = amplitide data with defined clusters
if(droplet.count(x = x, cluster = c(1,2,3,4)) < 10000)
{
result <- "CHECK DROPLET COUNT"
} else  {
result <- "DROPLET COUNT OK"
}
if(tolower(sample.type) == "pos")
{
if(droplet.count(x = x, cluster=1) == 0){result <- c(result,"NO DROPLETS CLUSTER 1")}
if(droplet.count(x = x, cluster=2) == 0){result <- c(result,"NO DROPLETS CLUSTER 2")}
if(droplet.count(x = x, cluster=3) == 0){result <- c(result,"NO DROPLETS CLUSTER 3")}
if(droplet.count(x = x, cluster=4) == 0){result <- c(result,"NO DROPLETS CLUSTER 4")}
}
if(tolower(sample.type) == "neg")
{
if(droplet.count(x = x, cluster = c(2,3,4)) > 0){result <- c(result,"FALSE POSITIVE FOUND")}
}
paste(result, sep=":", collapse="")
return(result)
}
for(j in 1:length(files))
{
sample.data <-
read.table(file=file.path(path,files[j]),header = TRUE,sep = ",") %>%
define.clusters(., breakpoints)
# - [ ] redefine clusters with mean & stdev
breakpoints.2 <-
sample.data %>%
refine.clusters.stdev(., stdev=3,breakpoints = breakpoints)
# - [ ] set clusters positive control with new breakpoints
sample.data %<>%
define.clusters(., breakpoints.2)
# - [x] create plot for sample data
sample.name <- gsub(pattern = "_Amplitude.csv",replacement="",x=files[j])
output.file <- file.path(path.targets[[i]], paste(sample.name,".png",sep=""))
png(filename=output.file,width = 800,height = 800)
plot.ddpcr(x=sample.data, main=file.names[j], max.xy = data.xy.max, breakpoints = breakpoints.2)
dev.off()
# - [x] Add: Well, Sample, TargetType (ch1/ch2), Target, Status concentration,
result <- cbind(Well=rep(as.character(file.wells[j]),2),Sample=rep(as.character(file.names[j]),2))
result <- data.frame(result)
result <- cbind(result, TargetType=c("Channel 1","Channel 2"))
result <- cbind(result, Target=rep(targets[i],2))
result <- cbind(result, Status=rep(sample.qc(x=sample.data,sample.type = sample.type[j]),2))
result <- cbind(result, Threshold=breakpoints.2)
result <- cbind(result, get.statistics.droplets(sample.data))
# - [x] colnames of droplet count data is changed after data.frame conversion
copies.data <- get.statistics.copies(sample.data)
result <- cbind(result, copies.data)
result <- cbind(result, ngPer1ul=convert.copies.to.ng(result$CopiesPer1ul))
result <- cbind(result, get.statistics.ratio.fract(copies.data))
# - [ ] sample status needs to be updated
results <- rbind(results,result)
}
results <- c()
for(j in 1:length(files))
{
sample.data <-
read.table(file=file.path(path,files[j]),header = TRUE,sep = ",") %>%
define.clusters(., breakpoints)
# - [ ] redefine clusters with mean & stdev
breakpoints.2 <-
sample.data %>%
refine.clusters.stdev(., stdev=3,breakpoints = breakpoints)
# - [ ] set clusters positive control with new breakpoints
sample.data %<>%
define.clusters(., breakpoints.2)
# - [x] create plot for sample data
sample.name <- gsub(pattern = "_Amplitude.csv",replacement="",x=files[j])
output.file <- file.path(path.targets[[i]], paste(sample.name,".png",sep=""))
png(filename=output.file,width = 800,height = 800)
plot.ddpcr(x=sample.data, main=file.names[j], max.xy = data.xy.max, breakpoints = breakpoints.2)
dev.off()
# - [x] Add: Well, Sample, TargetType (ch1/ch2), Target, Status concentration,
result <- cbind(Well=rep(as.character(file.wells[j]),2),Sample=rep(as.character(file.names[j]),2))
result <- data.frame(result)
result <- cbind(result, TargetType=c("Channel 1","Channel 2"))
result <- cbind(result, Target=rep(targets[i],2))
result <- cbind(result, Status=rep(sample.qc(x=sample.data,sample.type = sample.type[j]),2))
result <- cbind(result, Threshold=breakpoints.2)
result <- cbind(result, get.statistics.droplets(sample.data))
# - [x] colnames of droplet count data is changed after data.frame conversion
copies.data <- get.statistics.copies(sample.data)
result <- cbind(result, copies.data)
result <- cbind(result, ngPer1ul=convert.copies.to.ng(result$CopiesPer1ul))
result <- cbind(result, get.statistics.ratio.fract(copies.data))
# - [ ] sample status needs to be updated
results <- rbind(results,result)
}
results
plot.ddpcr(sample.data, breakpoints.2)
plot.ddpcr(sample.data, breakpoints.2)
