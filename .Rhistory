}
if(tolower(algorithm) == "densityhist")
{
if(verbose == TRUE){
cat("Setting threshold based on 'densityhist'.\n")
}
result <- c(channel.1 = .thresholdDensityHist(x = ch1, breaks = breaks, strict = strict),
channel.2 = .thresholdDensityHist(x = ch2, breaks = breaks, strict = strict))
}
# result <- thresholdData(tData = tData, amplitude = result, type = 'threshold')
return(result)
}
setThresholds <- function(data = NULL, algorithm = "densityhist",
breaks = 100, strict = TRUE,
type = "probe", verbose = TRUE){
if((class(data)[1] == "ddPCRdata") != TRUE){
stop ("data structure is not in the correct format.\n")
}
if(tolower(type) == "all"){
channel.1 <- matrix(data = data@assayData$Ch1.Amplitude, ncol = 1)
channel.2 <- matrix(data = data@assayData$Ch2.Amplitude, ncol = 1)
result <- .determineThresholds(ch1 = channel.1, ch2 = channel.2,
algorithm = algorithm,
breaks = breaks, strict = strict,
verbose = verbose)
data@phenoData$ch1['threshold',] <- result[1]
data@phenoData$ch2['threshold',] <- result[2]
} else if(tolower(type) == "probe"){
probes <- unique(data@phenoData$sampleData['probe', ])
for(i in 1:length(probes)){
selection <- data@phenoData$sampleData['probe', ] %in% probes[i]
channel.1 <- data@assayData$Ch1.Amplitude[,selection]
channel.2 <- data@assayData$Ch2.Amplitude[,selection]
channel.1 <- matrix(data = channel.1, ncol = 1)
channel.2 <- matrix(data = channel.2, ncol = 1)
result <- .determineThresholds(ch1 = channel.1, ch2 = channel.2,
algorithm = algorithm,
breaks = breaks, strict = strict,
verbose = verbose)
data@phenoData$ch1['threshold', selection] <- result[1]
data@phenoData$ch2['threshold', selection] <- result[2]
}
}
return(data)
}
setThresholdsWell <- function(data = NULL, well = NULL, algorithm = "densityhist",
breaks = 20, strict = TRUE,
verbose = TRUE){
if((class(data)[1] == "ddPCRdata") != TRUE){
stop ("data structure is not in the correct format.\n")
}
if(is.null(well) != TRUE){
if(class(well) == "numeric"){
selection <- well
} else if(class(well) == "character"){
selection <- tolower(data@phenoData$sampleData['well',]) %in% tolower(well)
}
} else {
stop("Well selection is not in the correct format.\n")
}
channel.1 <- data@assayData$Ch1.Amplitude[,selection]
channel.2 <- data@assayData$Ch2.Amplitude[,selection]
channel.1 <- matrix(data = channel.1, ncol = 1)
channel.2 <- matrix(data = channel.2, ncol = 1)
result <- .determineThresholds(ch1 = channel.1, ch2 = channel.2,
algorithm = algorithm,
breaks = breaks, strict = strict,
verbose = verbose)
data@phenoData$ch1['threshold', selection] <- result[1]
data@phenoData$ch2['threshold', selection] <- result[2]
return(data)
}
data <- readAmplitudeFiles(files)
data <- setThresholds(data = data)
overview(data)
plot.ddPCR(data, well = 1)
plot.ddPCR(data, well = 2)
plot.ddPCR(data, well = 3)
plot.ddPCR(data, well = 4)
plot.ddPCR(data, well = 4)
plot.ddPCR(data, well = 5)
plot.ddPCR(data, well = 6)
plot.ddPCR(data, well = 7)
plot.ddPCR(data, well = 8)
data@phenoData$ch1
overview <- function(data){
if((class(data)[1] == "ddPCRdata") != TRUE){
stop ("data structure is not in the correct format.\n")
}
probes <- unique(data@phenoData$sampleData['probe', ])
nSamples <- ncol(data@phenoData$sampleData)
cat("ddPCR structure has", nSamples, "samples with", length(probes), "probe(s).\n\n")
for (i in 1:length(probes)){
selection <- data@phenoData$sampleData['probe', ] %in% probes[i]
cat("Probe ",i ,": " , probes[i], "\n", sep ="")
samples <- data@phenoData$sampleData['name', selection ]
wells <- data@phenoData$sampleData['well', selection ]
threshold.ch1 <- wells <- data@phenoData$ch1['threshold', selection ]
threshold.ch2 <- wells <- data@phenoData$ch2['threshold', selection ]
results <- matrix(NA, nrow = length(samples), ncol = 4,
dimnames = list(c(1:length(samples)),c("Name", "Well",
"Threshold.ch1", "Threshold.ch2")))
results[,'Name'] <- samples
results[,'Well'] <- wells
results[,'Threshold.ch1'] <- threshold.ch1
results[,'Threshold.ch2'] <- threshold.ch2
print(results)
cat("\n")
}
}
overview(data)
overview <- function(data){
if((class(data)[1] == "ddPCRdata") != TRUE){
stop ("data structure is not in the correct format.\n")
}
probes <- unique(data@phenoData$sampleData['probe', ])
nSamples <- ncol(data@phenoData$sampleData)
cat("ddPCR structure has", nSamples, "samples with", length(probes), "probe(s).\n\n")
for (i in 1:length(probes)){
selection <- data@phenoData$sampleData['probe', ] %in% probes[i]
cat("Probe ",i ,": " , probes[i], "\n", sep ="")
samples <- data@phenoData$sampleData['name', selection ]
wells <- data@phenoData$sampleData['well', selection ]
threshold.ch1 <- data@phenoData$ch1['threshold', selection ]
threshold.ch2 <- data@phenoData$ch2['threshold', selection ]
results <- matrix(NA, nrow = length(samples), ncol = 4,
dimnames = list(c(1:length(samples)),c("Name", "Well",
"Threshold.ch1", "Threshold.ch2")))
results[,'Name'] <- samples
results[,'Well'] <- wells
results[,'Threshold.ch1'] <- threshold.ch1
results[,'Threshold.ch2'] <- threshold.ch2
print(results)
cat("\n")
}
}
overview(data)
plot.ddPCR(data, well = well, new = TRUE)
plot.ddPCR(data, well = 1, new = TRUE)
plot.ddPCR <- function(data = NULL, well = NULL, dotres = 0.7,
density = 60, pch = 16, bg = "#e6e6e6",
main = "ddPCR", verbose = FALSE, new = FALSE){
if((class(data)[1] == "ddPCRdata") != TRUE){
stop ("data structure is not in the correct format.\n")
}
if(is.null(well) == TRUE){
cat("No well location was given to plot.\n")
} else if (class(well) == "character"){
sample <- match(tolower(well), table = tolower(data@phenoData$sampleData['well',]))
if(is.na(sample) == TRUE){
cat("No correct sample well has been given.\n")
}
} else if(class(well) == "numeric"){
if((well > ncol(data@phenoData$sampleData)) == TRUE){
cat("No correct sample well has been given.\n")
}else {
sample <- well
}
}
if(class(density) == "numeric"){
if(density > 0 | density < 100){
data <- .updateColors(data = data, density = density)
}
}
cat("working on sample: ", data@phenoData$sampleData['name',sample], "\n")
if(new != TRUE){
data <- .updateColors(data = data, density = density)
plot(y = data@assayData$Ch1.Amplitude[,sample],
x = data@assayData$Ch2.Amplitude[,sample],
cex = dotres,
col = data@assayData$Color[,sample],
xlab = "Ch2 Amplitude",
ylab = "Ch1 Amplitude",
pch = pch,
main = data@phenoData$sampleData['name', sample],
xlim = c(0, max(data@phenoData$ch2['maxAmplitude', sample])),
ylim = c(0, max(data@phenoData$ch1['maxAmplitude', sample])))
sub.text <- .dropletCountText(x = data@assayData$Cluster[,sample])
mtext(side = 3, text = sub.text, cex = 0.8)
if(is.na(data@phenoData$ch1['threshold', sample]) != TRUE){
abline(h = data@phenoData$ch1['threshold', sample], col = "#ff0000")
}
if(is.na(data@phenoData$ch2['threshold', sample]) != TRUE){
abline(v = data@phenoData$ch2['threshold', sample], col = "#ff0000")
}
} else if (test == TRUE) {
par(bg = bg)
plot(0, bty='n', col = bg,
ylab = "Ch1 Amplitude",
xlab = "Ch2 Amplitude",
xlim = c(0, max(data@phenoData$ch2['maxAmplitude', ])),
ylim = c(0, max(data@phenoData$ch1['maxAmplitude', ])),
main = data@phenoData$sampleData['name',sample]
)
# FOR GRID LINES
line500 <- c(-500,0, cumsum(rep(500,50)))
abline(v = line500, col = "#FFFFFF60")
abline(h = line500, col = "#FFFFFF60")
# add points
points(y = data@assayData$Ch1.Amplitude[,sample],
x = data@assayData$Ch2.Amplitude[,sample],
cex = dotres,
col = data@assayData$Color[,sample],
pch = pch
)
if(is.na(data@phenoData$ch1['threshold', sample]) != TRUE){
abline(h = data@phenoData$ch1['threshold', sample], col = "#ff0000")
}
if(is.na(data@phenoData$ch2['threshold', sample]) != TRUE){
abline(v = data@phenoData$ch2['threshold', sample], col = "#ff0000")
}
}
}
plot.ddPCR(data, well = 1, new = TRUE)
plot.ddPCR <- function(data = NULL, well = NULL, dotres = 0.7,
density = 60, pch = 16, bg = "#e6e6e6",
main = "ddPCR", verbose = FALSE, new = FALSE){
if((class(data)[1] == "ddPCRdata") != TRUE){
stop ("data structure is not in the correct format.\n")
}
if(is.null(well) == TRUE){
cat("No well location was given to plot.\n")
} else if (class(well) == "character"){
sample <- match(tolower(well), table = tolower(data@phenoData$sampleData['well',]))
if(is.na(sample) == TRUE){
cat("No correct sample well has been given.\n")
}
} else if(class(well) == "numeric"){
if((well > ncol(data@phenoData$sampleData)) == TRUE){
cat("No correct sample well has been given.\n")
}else {
sample <- well
}
}
if(class(density) == "numeric"){
if(density > 0 | density < 100){
data <- .updateColors(data = data, density = density)
}
}
cat("working on sample: ", data@phenoData$sampleData['name',sample], "\n")
if(new != TRUE){
data <- .updateColors(data = data, density = density)
plot(y = data@assayData$Ch1.Amplitude[,sample],
x = data@assayData$Ch2.Amplitude[,sample],
cex = dotres,
col = data@assayData$Color[,sample],
xlab = "Ch2 Amplitude",
ylab = "Ch1 Amplitude",
pch = pch,
main = data@phenoData$sampleData['name', sample],
xlim = c(0, max(data@phenoData$ch2['maxAmplitude', sample])),
ylim = c(0, max(data@phenoData$ch1['maxAmplitude', sample])))
sub.text <- .dropletCountText(x = data@assayData$Cluster[,sample])
mtext(side = 3, text = sub.text, cex = 0.8)
if(is.na(data@phenoData$ch1['threshold', sample]) != TRUE){
abline(h = data@phenoData$ch1['threshold', sample], col = "#ff0000")
}
if(is.na(data@phenoData$ch2['threshold', sample]) != TRUE){
abline(v = data@phenoData$ch2['threshold', sample], col = "#ff0000")
}
} else if (new == TRUE) {
par(bg = bg)
plot(0, bty='n', col = bg,
ylab = "Ch1 Amplitude",
xlab = "Ch2 Amplitude",
xlim = c(0, max(data@phenoData$ch2['maxAmplitude', ])),
ylim = c(0, max(data@phenoData$ch1['maxAmplitude', ])),
main = data@phenoData$sampleData['name',sample]
)
# FOR GRID LINES
line500 <- c(-500,0, cumsum(rep(500,50)))
abline(v = line500, col = "#FFFFFF60")
abline(h = line500, col = "#FFFFFF60")
# add points
points(y = data@assayData$Ch1.Amplitude[,sample],
x = data@assayData$Ch2.Amplitude[,sample],
cex = dotres,
col = data@assayData$Color[,sample],
pch = pch
)
if(is.na(data@phenoData$ch1['threshold', sample]) != TRUE){
abline(h = data@phenoData$ch1['threshold', sample], col = "#ff0000")
}
if(is.na(data@phenoData$ch2['threshold', sample]) != TRUE){
abline(v = data@phenoData$ch2['threshold', sample], col = "#ff0000")
}
}
}
plot.ddPCR(data, well = 1, new = TRUE)
data <- setThresholds(data = data, algorithm = "densityhist", breaks = 100, strict = TRUE)
overview(data)
plot.ddPCR(data, well = 1, new = TRUE)
data <- setThresholds(data = data, algorithm = "densityhist", breaks = 150, strict = TRUE)
overview(data)
plot.ddPCR(data, well = 1, new = TRUE)
data <- setThresholds(data = data, algorithm = "densityhist", breaks = 50, strict = TRUE)
overview(data)
plot.ddPCR(data, well = 1, new = TRUE)
data <- setThresholds(data = data, algorithm = "densityhist", breaks = 40, strict = TRUE)
overview(data)
plot.ddPCR(data, well = 1, new = TRUE)
plot.ddPCR(data, well = 3, new = TRUE)
plot.ddPCR(data, well = 8, new = TRUE)
for(i in 1:16){
plot.ddPCR(data, well = i, new = TRUE)
ys.sleep(5)
}
for(i in 1:16){
plot.ddPCR(data, well = i, new = TRUE)
Sys.sleep(5)
}
i
plot.ddPCR(data, well = 5, new = TRUE)
cat(i)
for(i in 1:16){
cat(i)
plot.ddPCR(data, well = i, new = TRUE)
Sys.sleep(1)
}
class(i)
as.character(integer)
as.numeric(integer)
as.numeric(i)
as.character(i)
plot.ddPCR <- function(data = NULL, well = NULL, dotres = 0.7,
density = 60, pch = 16, bg = "#e6e6e6",
main = "ddPCR", verbose = FALSE, new = FALSE){
if((class(data)[1] == "ddPCRdata") != TRUE){
stop ("data structure is not in the correct format.\n")
}
if(is.null(well) == TRUE){
cat("No well location was given to plot.\n")
} else if (class(well) == "character"){
sample <- match(tolower(well), table = tolower(data@phenoData$sampleData['well',]))
if(is.na(sample) == TRUE){
cat("No correct sample well has been given.\n")
}
} else if(class(well) == "integer"){
well <- as.numeric(well)
} else if(class(well) == "numeric"){
if((well > ncol(data@phenoData$sampleData)) == TRUE){
cat("No correct sample well has been given.\n")
}else {
sample <- well
}
}
if(class(density) == "numeric"){
if(density > 0 | density < 100){
data <- .updateColors(data = data, density = density)
}
}
cat("working on sample: ", data@phenoData$sampleData['name',sample], "\n")
if(new != TRUE){
data <- .updateColors(data = data, density = density)
plot(y = data@assayData$Ch1.Amplitude[,sample],
x = data@assayData$Ch2.Amplitude[,sample],
cex = dotres,
col = data@assayData$Color[,sample],
xlab = "Ch2 Amplitude",
ylab = "Ch1 Amplitude",
pch = pch,
main = data@phenoData$sampleData['name', sample],
xlim = c(0, max(data@phenoData$ch2['maxAmplitude', sample])),
ylim = c(0, max(data@phenoData$ch1['maxAmplitude', sample])))
sub.text <- .dropletCountText(x = data@assayData$Cluster[,sample])
mtext(side = 3, text = sub.text, cex = 0.8)
if(is.na(data@phenoData$ch1['threshold', sample]) != TRUE){
abline(h = data@phenoData$ch1['threshold', sample], col = "#ff0000")
}
if(is.na(data@phenoData$ch2['threshold', sample]) != TRUE){
abline(v = data@phenoData$ch2['threshold', sample], col = "#ff0000")
}
} else if (new == TRUE) {
par(bg = bg)
plot(0, bty='n', col = bg,
ylab = "Ch1 Amplitude",
xlab = "Ch2 Amplitude",
xlim = c(0, max(data@phenoData$ch2['maxAmplitude', ])),
ylim = c(0, max(data@phenoData$ch1['maxAmplitude', ])),
main = data@phenoData$sampleData['name',sample]
)
# FOR GRID LINES
line500 <- c(-500,0, cumsum(rep(500,50)))
abline(v = line500, col = "#FFFFFF60")
abline(h = line500, col = "#FFFFFF60")
# add points
points(y = data@assayData$Ch1.Amplitude[,sample],
x = data@assayData$Ch2.Amplitude[,sample],
cex = dotres,
col = data@assayData$Color[,sample],
pch = pch
)
if(is.na(data@phenoData$ch1['threshold', sample]) != TRUE){
abline(h = data@phenoData$ch1['threshold', sample], col = "#ff0000")
}
if(is.na(data@phenoData$ch2['threshold', sample]) != TRUE){
abline(v = data@phenoData$ch2['threshold', sample], col = "#ff0000")
}
}
}
plot.ddPCR(data, well = i, new = TRUE)
as.character(i)i
i
for(i in 1:16){
cat(i)
plot.ddPCR(data, well = i, new = TRUE)
Sys.sleep(1)
}
well = 9
class(well)
for(i in 1:16){
class(i)
#plot.ddPCR(data, well = i, new = TRUE)
Sys.sleep(1)
}
for(i in 1:16){
cat(class(i))
#plot.ddPCR(data, well = i, new = TRUE)
Sys.sleep(1)
}
plot.ddPCR <- function(data = NULL, well = NULL, dotres = 0.7,
density = 60, pch = 16, bg = "#e6e6e6",
main = "ddPCR", verbose = FALSE, new = FALSE){
if((class(data)[1] == "ddPCRdata") != TRUE){
stop ("data structure is not in the correct format.\n")
}
if(is.null(well) == TRUE){
cat("No well location was given to plot.\n")
}
if(class(well) == "integer"){
well <- as.numeric(well)
}
if (class(well) == "character"){
sample <- match(tolower(well), table = tolower(data@phenoData$sampleData['well',]))
if(is.na(sample) == TRUE){
cat("No correct sample well has been given.\n")
}
} else if(class(well) == "numeric"){
if((well > ncol(data@phenoData$sampleData)) == TRUE){
cat("No correct sample well has been given.\n")
}else {
sample <- well
}
}
if(class(density) == "numeric"){
if(density > 0 | density < 100){
data <- .updateColors(data = data, density = density)
}
}
cat("working on sample: ", data@phenoData$sampleData['name',sample], "\n")
if(new != TRUE){
data <- .updateColors(data = data, density = density)
plot(y = data@assayData$Ch1.Amplitude[,sample],
x = data@assayData$Ch2.Amplitude[,sample],
cex = dotres,
col = data@assayData$Color[,sample],
xlab = "Ch2 Amplitude",
ylab = "Ch1 Amplitude",
pch = pch,
main = data@phenoData$sampleData['name', sample],
xlim = c(0, max(data@phenoData$ch2['maxAmplitude', sample])),
ylim = c(0, max(data@phenoData$ch1['maxAmplitude', sample])))
sub.text <- .dropletCountText(x = data@assayData$Cluster[,sample])
mtext(side = 3, text = sub.text, cex = 0.8)
if(is.na(data@phenoData$ch1['threshold', sample]) != TRUE){
abline(h = data@phenoData$ch1['threshold', sample], col = "#ff0000")
}
if(is.na(data@phenoData$ch2['threshold', sample]) != TRUE){
abline(v = data@phenoData$ch2['threshold', sample], col = "#ff0000")
}
} else if (new == TRUE) {
par(bg = bg)
plot(0, bty='n', col = bg,
ylab = "Ch1 Amplitude",
xlab = "Ch2 Amplitude",
xlim = c(0, max(data@phenoData$ch2['maxAmplitude', ])),
ylim = c(0, max(data@phenoData$ch1['maxAmplitude', ])),
main = data@phenoData$sampleData['name',sample]
)
# FOR GRID LINES
line500 <- c(-500,0, cumsum(rep(500,50)))
abline(v = line500, col = "#FFFFFF60")
abline(h = line500, col = "#FFFFFF60")
# add points
points(y = data@assayData$Ch1.Amplitude[,sample],
x = data@assayData$Ch2.Amplitude[,sample],
cex = dotres,
col = data@assayData$Color[,sample],
pch = pch
)
if(is.na(data@phenoData$ch1['threshold', sample]) != TRUE){
abline(h = data@phenoData$ch1['threshold', sample], col = "#ff0000")
}
if(is.na(data@phenoData$ch2['threshold', sample]) != TRUE){
abline(v = data@phenoData$ch2['threshold', sample], col = "#ff0000")
}
}
}
for(i in 1:16){
plot.ddPCR(data, well = i, new = TRUE)
Sys.sleep(1)
}
data <- setThresholds(data = data, algorithm = "densityhist", breaks = 50, strict = TRUE)
overview(data)
for(i in 1:16){
plot.ddPCR(data, well = i, new = TRUE)
Sys.sleep(1)
}
for(i in 1:16){
plot.ddPCR(data, well = i, new = TRUE)
Sys.sleep(1)
}
