results <- NULL
results <- list(clusters=c(cluster.1=sum(x == 1),cluster.2=sum(x == 2),cluster.3=sum(x == 3),cluster.4=sum(x == 4)))
results  <- c(results, text=paste("Ch1-Ch2-:",results$clusters[1],
"   Ch1+Ch2-:",results$clusters[2],
"   Ch1+Ch2+:",results$clusters[3],
"   Ch1-Ch2+:",results$clusters[4], sep=""))
return(results)
}
get.max.channels <- function(x)
{
results <- c(Ch1.max = round(max(x[,1])+100) ,Ch2.max = round(max(x[,2])+100))
return(results)
}
exp.design <- read.design.file(path=file.path(path$input.data),"design.txt")
# - [ ] get min and max
all.data <- combine.samples(path=path$input.data,files=exp.design[,2])
all.data.max <- get.max.channels(all.data)
### start CONTROL ANALYSIS for analysis
# - [ ] create check if pos and neg control are available
# - [x] find control files
control.files <- exp.design[exp.design$Type == c("pos","neg"),2]
# - [x] combine control files
control.data <- combine.samples(path=file.path(path$input.data),files=control.files)
# - [x] get breakpoint data
breakpoint.ch1 <- get.breakpoint(x = control.data[,1])
breakpoint.ch2 <- get.breakpoint(x = control.data[,2])
# - [x] cluster define based on breakpoints - with cluster notation BioRad
control.data <- define.clusters(control.data, breakpoint.ch1, breakpoint.ch2)
# - [x] colors defined  breakpoints - with cluster notation BioRad
col.vec <- define.color(control.data[,3], density=60)
head(col.vec)
length(col.vec)
dim(control.data)
droplet.count <- dropletcount.clusters(control.data$Cluster)$text
strsplit(x = as.character(control.files[1]),split = "_")[[1]][1]
control.name <- paste(strsplit(x = as.character(control.files[1]),split = "_")[[1]][1],"_Controls.png")
control.name
control.name <- paste(strsplit(x = as.character(control.files[1]),split = "_")[[1]][1],"_Controls.png",sep="")
control.name
output.file <- file.path(path$output.plot, paste(sample.name,".png",sep=""))
output.file <- file.path(path$output.plot, paste(control.name,".png",sep=""))
output.file
png(filename=output.file,width = 800,height = 800)
plot(y=control.data[,1],x=control.data[,2], cex=0.7, col=col.vec, ylab="Ch1 Amplitude",xlab="Ch2 Amplitude", pch=16, main=sample.name,
xlim=c(0,all.data.max[2]),ylim=c(0,all.data.max[1]))
mtext(side = 3,text = droplet.count, cex = 0.8)
abline(h=breakpoint.ch1, col="red") # channel 1
abline(v=breakpoint.ch2, col="red") # channel 2
dev.off()
png(filename=output.file,width = 800,height = 800)
plot(y=control.data[,1],x=control.data[,2], cex=0.7, col=col.vec, ylab="Ch1 Amplitude",xlab="Ch2 Amplitude", pch=16, main=sample.name,
xlim=c(0,all.data.max[2]),ylim=c(0,all.data.max[1]))
mtext(side = 3,text = droplet.count, cex = 0.8)
abline(h=breakpoint.ch1, col="red") # channel 1
abline(v=breakpoint.ch2, col="red") # channel 2
dev.off()
dev.off()
control.name <- paste(strsplit(x = as.character(control.files[1]),split = "_")[[1]][1],"_Controls.png",sep="")
output.file <- file.path(path$output.plot, paste(control.name,".png",sep=""))
# - [x] create plot for control data
png(filename=output.file,width = 800,height = 800)
plot(y=control.data[,1],x=control.data[,2], cex=0.7, col=col.vec, ylab="Ch1 Amplitude",xlab="Ch2 Amplitude", pch=16, main=sample.name,
xlim=c(0,all.data.max[2]),ylim=c(0,all.data.max[1]))
mtext(side = 3,text = droplet.count, cex = 0.8)
abline(h=breakpoint.ch1, col="red") # channel 1
abline(v=breakpoint.ch2, col="red") # channel 2
dev.off()
plot(y=control.data[,1],x=control.data[,2], cex=0.7, col=col.vec, ylab="Ch1 Amplitude",xlab="Ch2 Amplitude", pch=16, main=control.name,
xlim=c(0,all.data.max[2]),ylim=c(0,all.data.max[1]))
unique(col.vec)
ddpcr.colors <- paste(c("#000000","#0033FF","#FF6600","#00CC00"), as.character(density), sep="")
density=60
ddpcr.colors <- paste(c("#000000","#0033FF","#FF6600","#00CC00"), as.character(density), sep="")
ddpcr.colors
define.color <- function(x,density=40)
{
# - [x] find cluster notation BioRad
ddpcr.colors <- paste(c("#000000","#FF6600","#00CC00","#0033FF"), as.character(density), sep="")
x <- as.character(x)
x <- mgsub(pattern = c("1","3","4","2"),replacement = ddpcr.colors,x=x)
return(x)
}
col.vec <- define.color(control.data[,3], density=60)
unique(col.vec)
plot(y=control.data[,1],x=control.data[,2], cex=0.7, col=col.vec, ylab="Ch1 Amplitude",xlab="Ch2 Amplitude", pch=16, main=control.name,
xlim=c(0,all.data.max[2]),ylim=c(0,all.data.max[1]))
mtext(side = 3,text = droplet.count, cex = 0.8)
abline(h=breakpoint.ch1, col="red") # channel 1
abline(v=breakpoint.ch2, col="red") # channel 2
output.file <- file.path(path$output.plot, paste(control.name,".png",sep=""))
output.file
control.name <- paste(strsplit(x = as.character(control.files[1]),split = "_")[[1]][1],"_Controls",sep="")
output.file <- file.path(path$output.plot, paste(control.name,".png",sep=""))
# - [x] create plot for control data
png(filename=output.file,width = 800,height = 800)
plot(y=control.data[,1],x=control.data[,2], cex=0.7, col=col.vec, ylab="Ch1 Amplitude",xlab="Ch2 Amplitude", pch=16, main=control.name,
xlim=c(0,all.data.max[2]),ylim=c(0,all.data.max[1]))
mtext(side = 3,text = droplet.count, cex = 0.8)
abline(h=breakpoint.ch1, col="red") # channel 1
abline(v=breakpoint.ch2, col="red") # channel 2
dev.off()
# - [ ] retrieve control data
sample.files <- exp.design[,2]
sample.files
for(i in 1:length(sample.files))
{
sample.data <- read.table(file=file.path(path$input.data,sample.files[i]),header = TRUE,sep = ",")
sample.data <- define.clusters(sample.data, breakpoint.ch1, breakpoint.ch2)
col.vec <- define.color(sample.data, breakpoint.ch1, breakpoint.ch2, density=60)
droplet.count <- dropletcount.clusters(sample.data$Cluster)$text
sample.name <- gsub(pattern = "_Amplitude.csv",replacement="",x=sample.files[i])
output.file <- file.path(path$output.plot, paste(sample.name,".png",sep=""))
png(filename = output.file,width = 800,height = 800)
plot(y=sample.data[,1],x=sample.data[,2], cex=0.7, col=col.vec, ylab="Ch1 Amplitude",xlab="Ch2 Amplitude", pch=16, main=sample.name,
xlim=c(0,all.data.max[2]),ylim=c(0,all.data.max[1]))
mtext(side = 3,text = droplet.count, cex = 0.8)
abline(h=breakpoint.ch1, col="red") # channel 1
abline(v=breakpoint.ch2, col="red") # channel 2
dev.off()
}
col.vec <- define.color(sample.data[,3], density=60)
unique(col.vec)
droplet.count <- dropletcount.clusters(sample.data$Cluster)$text
sample.name <- gsub(pattern = "_Amplitude.csv",replacement="",x=sample.files[i])
output.file <- file.path(path$output.plot, paste(sample.name,".png",sep=""))
png(filename = output.file,width = 800,height = 800)
for(i in 1:length(sample.files))
{
sample.data <- read.table(file=file.path(path$input.data,sample.files[i]),header = TRUE,sep = ",")
sample.data <- define.clusters(sample.data, breakpoint.ch1, breakpoint.ch2)
col.vec <- define.color(sample.data[,3], density=60)
droplet.count <- dropletcount.clusters(sample.data$Cluster)$text
sample.name <- gsub(pattern = "_Amplitude.csv",replacement="",x=sample.files[i])
output.file <- file.path(path$output.plot, paste(sample.name,".png",sep=""))
png(filename = output.file,width = 800,height = 800)
plot(y=sample.data[,1],x=sample.data[,2], cex=0.7, col=col.vec, ylab="Ch1 Amplitude",xlab="Ch2 Amplitude", pch=16, main=sample.name,
xlim=c(0,all.data.max[2]),ylim=c(0,all.data.max[1]))
mtext(side = 3,text = droplet.count, cex = 0.8)
abline(h=breakpoint.ch1, col="red") # channel 1
abline(v=breakpoint.ch2, col="red") # channel 2
dev.off()
}
dev.off()
exp.design <- read.design.file(path=file.path(path$input.data),"design.txt")
# - [ ] get min and max
all.data <- combine.samples(path=path$input.data,files=exp.design[,2])
all.data.max <- get.max.channels(all.data)
### start CONTROL ANALYSIS for analysis
# - [ ] create check if pos and neg control are available
# - [x] find control files
control.files <- exp.design[exp.design$Type == c("pos","neg"),2]
# - [x] combine control files
control.data <- combine.samples(path=file.path(path$input.data),files=control.files)
# - [x] get breakpoint data
breakpoint.ch1 <- get.breakpoint(x = control.data[,1])
breakpoint.ch2 <- get.breakpoint(x = control.data[,2])
# - [x] cluster define based on breakpoints - with cluster notation BioRad
control.data <- define.clusters(control.data, breakpoint.ch1, breakpoint.ch2)
# - [x] colors defined  breakpoints - with cluster notation BioRad
col.vec <- define.color(control.data[,3], density=60)
# - [x] droplet count defined by cluster notion BioRad
droplet.count <- dropletcount.clusters(control.data$Cluster)$text
# - [x] set file name control sample
control.name <- paste(strsplit(x = as.character(control.files[1]),split = "_")[[1]][1],"_Controls",sep="")
output.file <- file.path(path$output.plot, paste(control.name,".png",sep=""))
# - [x] create plot for control data
png(filename=output.file,width = 800,height = 800)
plot(y=control.data[,1],x=control.data[,2], cex=0.7, col=col.vec, ylab="Ch1 Amplitude",xlab="Ch2 Amplitude", pch=16, main=control.name,
xlim=c(0,all.data.max[2]),ylim=c(0,all.data.max[1]))
mtext(side = 3,text = droplet.count, cex = 0.8)
abline(h=breakpoint.ch1, col="red") # channel 1
abline(v=breakpoint.ch2, col="red") # channel 2
dev.off()
# - [ ] retrieve control data
# - [ ] compare control data
# - [ ] add control data
# - [ ] save control data
# - [x] retrieve sample files (all files)
sample.files <- exp.design[,2]
# - [ ] analyse sample files
for(i in 1:length(sample.files))
{
sample.data <- read.table(file=file.path(path$input.data,sample.files[i]),header = TRUE,sep = ",")
sample.data <- define.clusters(sample.data, breakpoint.ch1, breakpoint.ch2)
col.vec <- define.color(sample.data[,3], density=60)
droplet.count <- dropletcount.clusters(sample.data$Cluster)$text
sample.name <- gsub(pattern = "_Amplitude.csv",replacement="",x=sample.files[i])
output.file <- file.path(path$output.plot, paste(sample.name,".png",sep=""))
png(filename = output.file,width = 800,height = 800)
plot(y=sample.data[,1],x=sample.data[,2], cex=0.7, col=col.vec, ylab="Ch1 Amplitude",xlab="Ch2 Amplitude", pch=16, main=sample.name,
xlim=c(0,all.data.max[2]),ylim=c(0,all.data.max[1]))
mtext(side = 3,text = droplet.count, cex = 0.8)
abline(h=breakpoint.ch1, col="red") # channel 1
abline(v=breakpoint.ch2, col="red") # channel 2
dev.off()
}
dev.off()
dev.off()
exp.design <- read.design.file(path=file.path(path$input.data),"design.txt")
# - [ ] get min and max
all.data <- combine.samples(path=path$input.data,files=exp.design[,2])
all.data.max <- get.max.channels(all.data)
### start CONTROL ANALYSIS for analysis
# - [ ] create check if pos and neg control are available
# - [x] find control files
control.files <- exp.design[exp.design$Type == c("pos","neg"),2]
# - [x] combine control files
control.data <- combine.samples(path=file.path(path$input.data),files=control.files)
# - [x] get breakpoint data
breakpoint.ch1 <- get.breakpoint(x = control.data[,1])
breakpoint.ch2 <- get.breakpoint(x = control.data[,2])
# - [x] cluster define based on breakpoints - with cluster notation BioRad
control.data <- define.clusters(control.data, breakpoint.ch1, breakpoint.ch2)
# - [x] colors defined  breakpoints - with cluster notation BioRad
col.vec <- define.color(control.data[,3], density=60)
# - [x] droplet count defined by cluster notion BioRad
droplet.count <- dropletcount.clusters(control.data$Cluster)$text
# - [x] set file name control sample
control.name <- paste(strsplit(x = as.character(control.files[1]),split = "_")[[1]][1],"_Controls",sep="")
output.file <- file.path(path$output.plot, paste(control.name,".png",sep=""))
# - [x] create plot for control data
png(filename=output.file,width = 800,height = 800)
plot(y=control.data[,1],x=control.data[,2], cex=0.7, col=col.vec, ylab="Ch1 Amplitude",xlab="Ch2 Amplitude", pch=16, main=control.name,
xlim=c(0,all.data.max[2]),ylim=c(0,all.data.max[1]))
mtext(side = 3,text = droplet.count, cex = 0.8)
abline(h=breakpoint.ch1, col="red") # channel 1
abline(v=breakpoint.ch2, col="red") # channel 2
dev.off()
# - [ ] retrieve control data
# - [ ] compare control data
# - [ ] add control data
# - [ ] save control data
# - [x] retrieve sample files (all files)
sample.files <- exp.design[,2]
# - [ ] analyse sample files
for(i in 1:length(sample.files))
{
sample.data <- read.table(file=file.path(path$input.data,sample.files[i]),header = TRUE,sep = ",")
sample.data <- define.clusters(sample.data, breakpoint.ch1, breakpoint.ch2)
col.vec <- define.color(sample.data[,3], density=60)
droplet.count <- dropletcount.clusters(sample.data$Cluster)$text
sample.name <- gsub(pattern = "_Amplitude.csv",replacement="",x=sample.files[i])
output.file <- file.path(path$output.plot, paste(sample.name,".png",sep=""))
png(filename = output.file,width = 800,height = 800)
plot(y=sample.data[,1],x=sample.data[,2], cex=0.7, col=col.vec, ylab="Ch1 Amplitude",xlab="Ch2 Amplitude", pch=16, main=sample.name,
xlim=c(0,all.data.max[2]),ylim=c(0,all.data.max[1]))
mtext(side = 3,text = droplet.count, cex = 0.8)
abline(h=breakpoint.ch1, col="red") # channel 1
abline(v=breakpoint.ch2, col="red") # channel 2
dev.off()
}
plot.ddpcr <- function(x,dotres=0.7,main=NULL,colors="ddpcr",density=60,breakpoint.ch1=NULL,breakpoint.ch2=NULL,xmax=NULL,ymax=NULL,verbose=FALSE)
{
if(class(xmax) == "NULL") {
xmax <- max(x[,2])
}
if(class(ymax) == "NULL") {
xmax <- max(x[,1])
}
cat("fase 1")
col.vec <- define.color(x = x[,3],density = density)
cat("fase 2")
plot(y=x[,1],x=x[,2], cex=dotres, col=col.vec, ylab="Ch1 Amplitude",xlab="Ch2 Amplitude", pch=16, main=main,
xlim=c(0,xmax),ylim=c(0,ymax))
cat("fase 3")
sub.text <- dropletcount.clusters(x=x[,3])$text
mtext(side = 3,text = sub.text, cex = 0.8)
if(class(breakpoint.ch1) == "NULL" | class(breakpoint.ch2) == "NULL") {
if(verbose == TRUE){cat("No breakpoint data has been given. Data will not be plotted.")}
}else{
abline(h=breakpoint.ch1, col="red") # channel 1
abline(v=breakpoint.ch2, col="red") # channel 2
}
}
plot.ddpcr(x = control.data,
breakpoint.ch1 = breakpoint.ch1, breakpoint.ch2 = breakpoint.ch2,
xmax = all.data.max[2], ymax = all.data.max[1])
plot.ddpcr(x=control.data,main=control.name,xmax(all.data.max[2]),ymax=all.data.max[1])
plot.ddpcr(x=control.data,main=control.name,xmax=all.data.max[2],ymax=all.data.max[1])
plot.ddpcr <- function(x,dotres=0.7,main="ddPCR",pch=16,colors="ddpcr",density=60,breakpoint.ch1=NULL,breakpoint.ch2=NULL,xmax=NULL,ymax=NULL,verbose=FALSE)
{
if(class(xmax) == "NULL") {
xmax <- max(x[,2])
}
if(class(ymax) == "NULL") {
xmax <- max(x[,1])
}
col.vec <- define.color(x = x[,3],density = density)
plot(y=x[,1],x=x[,2], cex=dotres, col=col.vec, ylab="Ch1 Amplitude",xlab="Ch2 Amplitude", pch=pch, main=main,
xlim=c(0,xmax),ylim=c(0,ymax))
sub.text <- dropletcount.clusters(x=x[,3])$text
mtext(side = 3,text = sub.text, cex = 0.8)
if(class(breakpoint.ch1) == "NULL" | class(breakpoint.ch2) == "NULL") {
if(verbose == TRUE){cat("No breakpoint data has been given. Data will not be plotted.")}
}else{
abline(h=breakpoint.ch1, col="red") # channel 1
abline(v=breakpoint.ch2, col="red") # channel 2
}
}
plot.ddpcr(x=control.data,main=control.name,xmax=all.data.max[2],ymax=all.data.max[1])
plot.ddpcr(x=control.data,main=control.name,xmax=all.data.max[2],ymax=all.data.max[1],breakpoint.ch1 = breakpoint.ch1 ,breakpoint.ch2 = breakpoint.ch2 )
for(i in 1:length(sample.files))
{
sample.data <- read.table(file=file.path(path$input.data,sample.files[i]),header = TRUE,sep = ",")
sample.data <- define.clusters(sample.data, breakpoint.ch1, breakpoint.ch2)
col.vec <- define.color(sample.data[,3], density=60)
droplet.count <- dropletcount.clusters(sample.data$Cluster)$text
sample.name <- gsub(pattern = "_Amplitude.csv",replacement="",x=sample.files[i])
output.file <- file.path(path$output.plot, paste(sample.name,".png",sep=""))
png(filename=output.file,width = 800,height = 800)
plot.ddpcr(x=sample.data,main=sample.name,xmax=all.data.max[2],ymax=all.data.max[1],breakpoint.ch1 = breakpoint.ch1 ,breakpoint.ch2 = breakpoint.ch2 )
dev.off()
}
output.file
dev.off()
dev.off()
for(i in 1:length(sample.files))
{
sample.data <- read.table(file=file.path(path$input.data,sample.files[i]),header = TRUE,sep = ",")
sample.data <- define.clusters(sample.data, breakpoint.ch1, breakpoint.ch2)
col.vec <- define.color(sample.data[,3], density=60)
droplet.count <- dropletcount.clusters(sample.data$Cluster)$text
sample.name <- gsub(pattern = "_Amplitude.csv",replacement="",x=sample.files[i])
output.file <- file.path(path$output.plot, paste(sample.name,".png",sep=""))
png(filename=output.file,width = 800,height = 800)
plot.ddpcr(x=sample.data,main=sample.name,xmax=all.data.max[2],ymax=all.data.max[1],breakpoint.ch1 = breakpoint.ch1 ,breakpoint.ch2 = breakpoint.ch2 )
dev.off()
}
create.design.file(path$input.data)
read.design.file <- function(path,file)
{
design <- read.table(file = file.path(path,file),header = TRUE,sep = "\t")
return(design)
}
exp.design <- read.design.file(path=file.path(path$input.data),"design.txt")
exp.design <- read.design.file(path=file.path(path$input.data),"design.txt")
exp.design
all.data <- combine.samples(path=path$input.data,files=exp.design[,2])
all.data.max <- get.max.channels(all.data)
### start CONTROL ANALYSIS for analysis
# - [ ] create check if pos and neg control are available
# - [x] find control files
control.files <- exp.design[exp.design$Type == c("pos","neg"),2]
# - [x] combine control files
control.data <- combine.samples(path=file.path(path$input.data),files=control.files)
# - [x] get breakpoint data
breakpoint.ch1 <- get.breakpoint(x = control.data[,1])
breakpoint.ch2 <- get.breakpoint(x = control.data[,2])
# - [x] cluster define based on breakpoints - with cluster notation BioRad
control.data <- define.clusters(control.data, breakpoint.ch1, breakpoint.ch2)
# - [x] colors defined  breakpoints - with cluster notation BioRad
col.vec <- define.color(control.data[,3], density=60)
# - [x] droplet count defined by cluster notion BioRad
droplet.count <- dropletcount.clusters(control.data$Cluster)$text
# - [x] set file name control sample
control.name <- paste(strsplit(x = as.character(control.files[1]),split = "_")[[1]][1],"_Controls",sep="")
output.file <- file.path(path$output.plot, paste(control.name,".png",sep=""))
# - [x] create plot for control data
png(filename=output.file,width = 800,height = 800)
plot.ddpcr(x=control.data,main=control.name,xmax=all.data.max[2],ymax=all.data.max[1],breakpoint.ch1 = breakpoint.ch1 ,breakpoint.ch2 = breakpoint.ch2 )
dev.off()
# - [ ] retrieve control data
# - [ ] compare control data
# - [ ] add control data
# - [ ] save control data
# - [x] retrieve sample files (all files)
sample.files <- exp.design[,2]
# - [ ] analyse sample files
for(i in 1:length(sample.files))
{
sample.data <- read.table(file=file.path(path$input.data,sample.files[i]),header = TRUE,sep = ",")
sample.data <- define.clusters(sample.data, breakpoint.ch1, breakpoint.ch2)
col.vec <- define.color(sample.data[,3], density=60)
droplet.count <- dropletcount.clusters(sample.data$Cluster)$text
sample.name <- gsub(pattern = "_Amplitude.csv",replacement="",x=sample.files[i])
output.file <- file.path(path$output.plot, paste(sample.name,".png",sep=""))
png(filename=output.file,width = 800,height = 800)
plot.ddpcr(x=sample.data,main=sample.name,xmax=all.data.max[2],ymax=all.data.max[1],breakpoint.ch1 = breakpoint.ch1 ,breakpoint.ch2 = breakpoint.ch2 )
dev.off()
}
# - [ ]
read.design.file <- function(path,pattern=NULL)
{
design.file <- list.files(path=path,pattern=pattern)
if(length(design.files) > 1){
stop("multiple design files found. Unable to continue.\n"
)
}else{
design <- read.table(file = file.path(path,design.file),header = TRUE,sep = "\t")
return(design)
}
}
exp.design <- read.design.file(path=file.path(path$input.data),pattern="design")
read.design.file <- function(path,pattern=NULL)
{
design.file <- list.files(path=path,pattern=pattern)
if(length(design.file) > 1){
stop("multiple design files found. Unable to continue.\n"
)
}else{
design <- read.table(file = file.path(path,design.file),header = TRUE,sep = "\t")
return(design)
}
}
exp.design <- read.design.file(path=file.path(path$input.data),pattern="design")
exp.design
exp.design <- read.design.file(path=file.path(path$input.data),pattern="design")
exp.design
get_comments = function(filename){
is_assign = function(expr) as.character(expr) %in% c("<-", "<<-", "=", "assign")
is_function = function(expr) is.call(expr) && is_assign(expr[[1L]]) && is.call(expr[[3L]]) && expr[[3L]][[1L]] == quote(`function`)
src = parse(filename, keep.source = TRUE)
functions = Filter(is_function, src)
fun_names = as.character(lapply(functions, `[[`, 2L))
# - [x] extract all comments
r = setNames(lapply(attr(functions, "srcref"), grep, pattern = "^\\s*#", value = TRUE), fun_names)
# - [x] remove leading spaces and comment sign '#'
r = lapply(r, function(x) sub(pattern = "^\\s*#", replacement = "", x = x))
# - [x] keep only markdown checkboxes like " - [ ] " or " - [x] "
r = lapply(r, function(x) x[nchar(x) >= 7L & substr(x, 1L, 7L) %in% c(" - [ ] "," - [x] ")])
# - [x] return only non empty results
r[as.logical(sapply(r, length))]
}
make_doc = function(path = "R", files, package, dest){
if(!missing(package)) path = system.file(path, package=package)
stopifnot(file.exists(path))
if(missing(files)) files = list.files(path, pattern = "\\.R$")
if(!length(files)){
warning(paste0("No files to process in ",path,"."))
return(invisible())
}
if(!all(sapply(file.path(path, files), file.exists))) stop(paste0("Processing stopped as some files not exists: ", paste(files[!sapply(file.path(path, files), file.exists)], collapse=", "),"."))
r = setNames(lapply(file.path(path, files), get_comments), files)
r = r[as.logical(sapply(r, length))]
if(missing(dest)) return(r)
if(!file.exists(dirname(dest))) dir.create(dirname(dest), recursive=TRUE)
if(file.exists(dest)) file.rename(dest, paste0(dest,"_backup"))
invisible(lapply(names(r), function(filename){
cat(c("",paste("###", filename)), sep = "\n", file = dest, append = file.exists(dest))
lapply(names(r[[filename]]), function(funname){
cat(c("",paste("####", funname),""), sep = "\n", file = dest, append = TRUE)
cat(r[[filename]][[funname]], sep = "\n", file = dest, append = TRUE)
})
}))
if(file.exists(paste0(dest,"_backup"))) file.remove(paste0(dest,"_backup"))
invisible(dest)
}
create.folders <- function(path,folders){
# - [x] set path
# - [x] set folders
# - [x] for loooooop
for(i in 1:length(folders))
{
if(!file.exists(file.path(path,as.character(folders[i]))))
{
dir.create(file.path(path,as.character(folders[i])))
}
}
# - [x] check file.exists
# - [x] create folder
# - [x] does it work?
}
set.paths <- function(path=""){
if(path == "" | class(path) == "numeric"){ stop
} else {
# - [x] set paths
paths <- list(archive=file.path(path,"archive"),
input.data=file.path(path,"input.data"),
output.data=file.path(path,"output.data"),
output.plot=file.path(path,"output.plot"),
scripts=file.path(path,"scripts"),
scripts.log= file.path(path,"scripts.log"))
# - [x] make list
return(paths)
# - [x] return list
}
}
get.breakpoint <- function(x,nClusters=2){ # use kmeans function
x <- as.numeric(x)
result <- NULL
breakpoint <- kmeans(x=x,centers=nClusters)$centers
if(dim(breakpoint)[1] == 2){result <- mean(breakpoint)}
if(dim(breakpoint)[1] == 3){result <- c(mean(breakpoint[1:2,1]),mean(breakpoint[2:3,1]))}
return(result)
}
get.breakpoint.mean <- function(x){
result <- min(x)+((max(x)-min(x))/2)
return(result)
}
clusters.mean.sd <- function(x,na.rm=TRUE,breakpoint){
clusters <- c(mean(x[x < breakpoint],na.rm=na.rm), sd(x[x < breakpoint],na.rm=na.rm))
clusters <- rbind(clusters,c(mean(x[x > breakpoint],na.rm=na.rm), sd(x[x > breakpoint],na.rm=na.rm)))
clusters <- cbind(clusters,clusters[,2]*3)
rownames(clusters) <- c("cluster1","cluster2");colnames(clusters) <- c("mean","sd","3*sd")
return(clusters)
}
create.design <- function(path){
if(!file.exists(file.path(path,"design.txt"))){
files <- list.files(path)
sample.names <- paste("sample",seq(1,length(files),by=1),sep="_")
sample.type <- c(rep("sample", length(files)-1),"negative")
output.data <- cbind(Name=sample.names, File=files,Type=sample.type)
output.file <- file.path(path,"design.txt")
write.table(x=output.data,file = output.file,quote = FALSE, sep = "\t",row.names = FALSE)
}
}
# RUN FUNCTIONS
create.folders(path=input.path,c("archive","input.data","output.data","output.plot","scripts","scripts.log"))
path <- set.paths(input.path)
log.file <- paste(format(Sys.time(), "%Y%m%d-%H%M"),"_script_checklist.md",sep="")
make_doc(path=path$scripts,dest = file.path(path$scripts.log,log.file))
# END
